{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Willkommen zum Fridgely-Projekt","text":"<p>Fridgely ist mehr als nur Software \u2013 es ist ein innovatives Bildungsprojekt, das Kindern im Alter von 7-13 Jahren einen nachhaltigen Umgang mit Lebensmitteln vermittelt. Durch die Kombination eines physischen Mock-Smart-K\u00fchlschranks mit interaktiver Software schaffen wir eine spielerische Lernumgebung, die Kinder begeistert und gleichzeitig wichtige Werte vermittelt.</p> \ud83c\udfaf Projektziele <ul> <li>Sensibilisierung f\u00fcr Lebensmittelverschwendung</li> <li>Spielerisches Lernen durch Gamification</li> <li>F\u00f6rderung nachhaltigen Handelns im Alltag</li> <li>St\u00e4rkung des Bewusstseins f\u00fcr Ressourcenschonung</li> </ul> \u2699\ufe0f Physischer Prototyp <ul> <li>Mock-Smart-K\u00fchlschrank aus Holz</li> <li>Dual-Monitor-Setup f\u00fcr immersives Erleben</li> <li>Barcode-Scanner f\u00fcr interaktive Produkterfassung</li> <li>Raspberry Pi 5 als leistungsstarkes Herzst\u00fcck</li> </ul>"},{"location":"#das-team-hinter-fridgely","title":"Das Team hinter Fridgely","text":"<p>Unser interdisziplin\u00e4res Team vereint Expertise aus Softwareentwicklung, P\u00e4dagogik und Nachhaltigkeitsforschung, um dieses innovative Lernger\u00e4t zu entwickeln.</p> ES Erik Steinacher IP2 Software-Architekt (PM Stv.) IP1 Projektmanager (KOM Stv.) LV Lorenz Voser IP2 Requirements Engineer (SA Stv.) IP1 Software-Architekt (SC Stv.) PH Patrick Heid IP2 Projektmanager (KOM Stv.) IP1 Kommunikationsverantwortlicher (RE Stv.) DV Diego Varela IP2 Developer (RE Stv.) IP1 Requirements Engineer (TM Stv.) BW Ben Woodtli IP2 Testmanager (UX Stv.) IP1 UX-Verantwortlicher (PM Stv.) JM Joanna Val Marin IP2 UX-Verantwortliche (TM Stv.) IP1 Testmanagerin (UX Stv.) PE Philipp Eberhard IP2 Projektmanager (DEV Stv.) SV Stefan Vetter Teamcoach EG Elif G\u00fcrcinar Product Owner (Experience UX)"},{"location":"#der-physische-prototyp","title":"Der physische Prototyp","text":"<p>Unser Fridgely-Prototyp verbindet Hardware und Software zu einem immersiven Lernerlebnis:</p> Hardware-Komponenten <ul> <li>Geh\u00e4use: Massgefertigter Holzk\u00fchlschrank (Budget: CHF 200.-)</li> <li>Computing: Raspberry Pi 5 mit 2GB RAM</li> <li>Displays: Dual-Monitor-Setup (Hauptdisplay und K\u00fchlschrankanzeige)</li> <li>Eingabe: USB-Barcode-Scanner, Touch-Display</li> <li>Netzwerk: WLAN f\u00fcr Remote-Wartung</li> </ul> Besondere Merkmale <ul> <li>Interaktivit\u00e4t: Echtzeit-Reaktionen auf Barcode-Scans</li> <li>Multimodalit\u00e4t: Visuelle und akustische R\u00fcckmeldungen</li> <li>Kindgerechtes Design: Farbenfrohe, intuitive Benutzeroberfl\u00e4che</li> <li>Spielmodi: Einzelspieler- und Mehrspielermodus f\u00fcr verschiedene Lernerfahrungen</li> <li>Mehrsprachigkeit: Vollst\u00e4ndige Unterst\u00fctzung f\u00fcr DE, EN und FR</li> </ul>"},{"location":"#die-padagogische-vision","title":"Die p\u00e4dagogische Vision","text":"<p>Fridgely ist mehr als ein Technologieprojekt \u2013 es ist ein Bildungswerkzeug mit klaren p\u00e4dagogischen Zielen:</p> \ud83d\udca1 Lernziele f\u00fcr Kinder <ul> <li>Verst\u00e4ndnis f\u00fcr den Wert von Lebensmitteln entwickeln</li> <li>Praktische F\u00e4higkeiten zur Lebensmittelverwaltung erlernen</li> <li>Kreativit\u00e4t durch Rezeptvorschl\u00e4ge f\u00f6rdern</li> <li>Verantwortungsbewusstsein f\u00fcr nachhaltige Entscheidungen st\u00e4rken</li> <li>Teamarbeit und gemeinsame Entscheidungsfindung im Mehrspielermodus \u00fcben</li> </ul>"},{"location":"#partnerschaften","title":"Partnerschaften","text":"<p>Das Fridgely-Projekt wird in Zusammenarbeit mit folgenden Partnern realisiert:</p> Primeo Energie AG Hauptsponsor FHNW Akademischer Partner Primeo Energie AG Hauptsponsor FHNW Akademischer Partner Primeo Energie AG Hauptsponsor FHNW Akademischer Partner"},{"location":"#dokumentation-entwicklung","title":"Dokumentation &amp; EntwicklungZur Software-Architekturdokumentation","text":"<p>Um einen tieferen Einblick in die technische Umsetzung von Fridgely zu erhalten, kann die Software-Architekturdokumentation besucht werden. Diese enth\u00e4lt detaillierte Informationen zu Designentscheidungen, Architektur und Implementierung.</p> <p>Detaillierte Einblicke in Design, Architektur und technische Entscheidungen des Fridgely-Systems</p>      Fridgely-Projekt \u2022 IP2 Team \u2022 FHNW \u2022 2025"},{"location":"Hardware/Hardware/","title":"Dokumentation","text":""},{"location":"Hardware/Hardware/#hardware","title":"Hardware","text":""},{"location":"Hardware/Hardware/#materialliste","title":"Materialliste","text":"Name Bezeichnung Beschaffungsort Grosser Display f\u00fcr Lageranzeige 24 Zoll Samsung Office Privatverkauf Touch-Display f\u00fcr Bedienung Universal High Resolution 10,1 Display mit HDMI / VGA / Composite Eingang &amp; kapazitivem Touchscreen Berrybase Barcode-Scanner Barcode Scanner Modul liest 1D / 2D Codes, UART / USB Ausgang Berrybase Steckdosenleiste Steffen Power Easy Digitec HDMI-Mico-HDMI Kabel Raspberry Pi Official cable Micro-HDMI to HDMI Black, 1m Digitec"},{"location":"Hardware/Hardware/#verwendete-bautteile","title":"Verwendete Bautteile","text":"Name Ben\u00f6tigt f\u00fcr MDF Holz (19mm) Geh\u00e4use von Fridgely Schrauben Befestigung der Bildschirme Lamelos Zusammenbau des Geh\u00e4uses Holzleim Befestigung des Geh\u00e4uses"},{"location":"Hardware/Hardware/#bauplan","title":"Bauplan","text":""},{"location":"Hardware/Hardware/#zusammengebaute-hardware","title":"Zusammengebaute Hardware","text":""},{"location":"Other/3D-Products/","title":"3D-Produkte f\u00fcr das Fridgely-System","text":"<p>Diese Seite dokumentiert die 3D-Druckbaren Modelle, die f\u00fcr das Fridgely-System entwickelt wurden. Diese Modelle repr\u00e4sentieren die physischen Lebensmittel-Attrappen, die in Verbindung mit den Barcode-Scannern verwendet werden.</p>"},{"location":"Other/3D-Products/#entwicklungsumgebung","title":"Entwicklungsumgebung","text":"<p>Das Fridgely-System wurde mit allgemein zug\u00e4nglichen 3D-Druck-Tools entwickelt, um eine einfache Wartung und Weiterentwicklung zu erm\u00f6glichen. Die grundlegenden 3D-Tools f\u00fcr Entwicklung und Anpassungen sind:</p> <ul> <li>Blender als prim\u00e4re Entwicklungsumgebung</li> <li>PrusaSlicer zur Vorbereitung der Druckdateien</li> <li>Original Prusa MK3.9 mit einer 0.4 mm D\u00fcse als Drucker</li> </ul>"},{"location":"Other/3D-Products/#verfugbare-3d-modelle","title":"Verf\u00fcgbare 3D-Modelle","text":"<p>Unten sind die 3D-Modelle der Lebensmittel-Attrappen aufgelistet, die f\u00fcr das Fridgely-System verwendet werden. Diese Modelle k\u00f6nnen f\u00fcr den 3D-Druck heruntergeladen werden.</p> \ud83c\udf4e Apfel <p>3D-Modell einer Apfel-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83c\udf4c Banane <p>3D-Modell einer Bananen-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\udd69 Fleisch <p>3D-Modell einer Fleisch-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83c\udf5e Brot <p>3D-Modell einer Brot-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\uddc8 Butter <p>3D-Modell einer Butter-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\udd55 Karotten <p>3D-Modell einer Karotten-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\uddc0 K\u00e4se <p>3D-Modell einer K\u00e4se-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\udd5a Ei <p>3D-Modell einer Ei-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\uddc4 Knoblauch <p>3D-Modell einer Knoblauch-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\udd69 Fleisch (Teil 1) <p>3D-Modell einer Fleisch-Attrappe (Teil 1) f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\udd69 Fleisch (Teil 2) <p>3D-Modell einer Fleisch-Attrappe (Teil 2) f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\uded2 Oliven\u00f6l <p>3D-Modell einer Oliven\u00f6l-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\udd54 Kartoffel <p>3D-Modell einer Kartoffel-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83c\udf57 Rohes H\u00e4hnchen <p>3D-Modell einer rohen H\u00e4hnchen-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83c\udf53 Erdbeere <p>3D-Modell einer Erdbeer-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83e\uddca Tofu <p>3D-Modell einer Tofu-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen \ud83c\udf45 Tomate <p>3D-Modell einer Tomaten-Attrappe f\u00fcr das Fridgely-System.</p> Herunterladen"},{"location":"Other/3D-Products/#druckempfehlungen","title":"Druckempfehlungen","text":"<p>F\u00fcr optimale Ergebnisse beim 3D-Druck der Lebensmittel-Attrappen empfehlen wir:</p> <ul> <li>F\u00fcllung: 15-20% f\u00fcr leichte aber robuste Modelle</li> <li>Schichth\u00f6he: 0.2mm f\u00fcr eine gute Balance zwischen Detailgenauigkeit und Druckzeit</li> <li>Druckgeschwindigkeit: 50-60mm/s</li> <li>Material: PLA f\u00fcr einfachen Druck und lebendige Farben</li> <li>Temperatur: Druckbett bei 60\u00b0C, D\u00fcse je nach PLA-Typ bei 190-210\u00b0C</li> </ul>"},{"location":"Other/3D-Products/#barcodes-zuordnen","title":"Barcodes zuordnen","text":"<p>Jedes 3D-Modell sollte mit einem entsprechenden Barcode versehen werden. Die Barcodes sind in der Datei BarcodeKarten.pdf. Die Zuordnung der Barcodes zu den Produkten ist in der SQLite-Datenbank des Systems definiert.</p>"},{"location":"Other/Adding3DProducts/","title":"Hinzuf\u00fcgen von 3D-Produkten zu Fridgely","text":"\u00dcberblick <p>Diese Anleitung erkl\u00e4rt ausf\u00fchrlich den Prozess zum Hinzuf\u00fcgen von 3D-Produkten zum Fridgely-System. Die 3D-Produkte werden in der Lageransicht und in der Benutzeroberfl\u00e4che verwendet, um eine visuelle Repr\u00e4sentation der gescannten Lebensmittel zu erm\u00f6glichen.</p> <p>Eine vollst\u00e4ndige Dokumentation der bereits vorhandenen 3D-Produkte befindet sich hier: 3D-Produkte Dokumentation.</p>"},{"location":"Other/Adding3DProducts/#der-prozess-im-uberblick","title":"Der Prozess im \u00dcberblick","text":"<pre><code>graph LR\n    classDef defaultStep fill:#3b4252,stroke:#81a1c1,color:#eceff4,stroke-width:2px;\n    H[Produkt zeichnen] --&gt; S1[2D-Sprite erstellen]\n    S1 --&gt; S2[Sprite im Produktbilder-Ordner ablegen]\n    S2 --&gt; A[3D-Modell erstellen]\n    A --&gt; B[Modell optimieren]\n    B --&gt; C[Als STL exportieren]\n    C --&gt; D[Mit PrusaSlicer vorbereiten]\n    D --&gt; E[3D-Druck durchf\u00fchren]\n    E --&gt; F1[Anmalen mit Acrylfarbe]\n    F1 --&gt; F2[Barcode generieren und aufkleben]\n    F2 --&gt; I[Datenbank Produkt anlegen]\n    I --&gt; S3[SQL-Eintrag erstellen]\n    S3 --&gt; G[Testen in der Anwendung]\n    class H,S1,S2,A,B,C,D,E,F1,F2,I,S3,G defaultStep;</code></pre>"},{"location":"Other/Adding3DProducts/#voraussetzungen","title":"Voraussetzungen","text":"<ul> <li>3D-Modellierungssoftware: Blender (Version 3.0+), Fusion 360 (Version 2023+)</li> <li>PrusaSlicer: Version 2.6.0 oder neuer f\u00fcr die Vorbereitung der STL-Dateien f\u00fcr den 3D-Druck</li> <li>3D-Drucker: Original Prusa MK3.9 (0.4 mm D\u00fcse empfohlen) oder kompatibles Modell</li> <li>Filament: Generic PLA</li> <li>Etikettenpapier: HERMA PREMIUM No.4456 X2422X (3 x 10)</li> <li>Barcode-Generator: Beliebiger Online-Generator, z.B. https://barcode.tec-it.com/en</li> <li>Dateiformate: STL f\u00fcr den 3D-Druck, originale Quellformate (.blend, .f3d) f\u00fcr Backups</li> <li>Acrylfarben: Wasserfeste Acrylfarben und feine Pinsel f\u00fcr realistische Produktgestaltung</li> <li>Grundierung: Weisse Acryl-Grundierung f\u00fcr bessere Farbhaftung (optional)</li> <li>Grafiksoftware: Adobe Photoshop (CC 2023+), GIMP (2.10+) oder Affinity Designer (2.0+) f\u00fcr die Erstellung von Produkt-Sprites</li> <li>SQL-Kenntnisse: Grundlegende Kenntnisse f\u00fcr Bearbeiten von SQL-Dateien</li> <li>Zugriff auf: Fridgely Code-Repository</li> </ul>"},{"location":"Other/Adding3DProducts/#detaillierte-anleitung","title":"Detaillierte Anleitung","text":""},{"location":"Other/Adding3DProducts/#1-produkt-zeichnen-und-im-system-anlegen","title":"1. Produkt zeichnen und im System anlegen","text":"<ul> <li>Zeichne das gew\u00fcnschte Produkt (z.B. in einer Skizze oder digital).</li> <li>Lege das Produkt im Fridgely-System an, indem die Produktdaten (Name, Kategorie, Barcode) im System erfasst werden.</li> <li>\u00dcberpr\u00fcfe in der 3D-Produkte Dokumentation, ob bereits ein \u00e4hnliches Produkt oder eine geeignete Vorlage existiert.</li> </ul>"},{"location":"Other/Adding3DProducts/#11-produkt-sprite-erstellen-und-in-den-ressourcen-ordner-einfugen","title":"1.1. Produkt-Sprite erstellen und in den Ressourcen-Ordner einf\u00fcgen","text":"<p>F\u00fcr die visuelle Darstellung in der 2D-Ansicht der Fridgely-Anwendung ist es notwendig, ein Sprite (eine 2D-Grafik) des Produkts zu erstellen:</p> <ol> <li>Erstellen des Sprites:</li> <li>\u00d6ffne Grafiksoftware (Photoshop, GIMP oder Affinity Designer).</li> <li>Erstelle ein neues Dokument mit folgenden Einstellungen:<ul> <li>Breite: 2000 Pixel</li> <li>H\u00f6he: 2000 Pixel</li> <li>Aufl\u00f6sung: 300 dpi</li> <li>Farbmodell: RGB</li> <li>Hintergrund: Transparent</li> <li>Dateiformat: PNG (mit Transparenz)</li> </ul> </li> <li>Zeichne oder importiere eine Frontansicht des Produkts.</li> <li>Achte auf einen transparenten Hintergrund, um eine saubere Integration in die Anwendung zu gew\u00e4hrleisten.</li> <li>Verwende realistische Farben und Details, die dem tats\u00e4chlichen Produkt entsprechen.</li> <li> <p>Das Produkt sollte ca. 80% der Bildgr\u00f6sse einnehmen, mit etwas Abstand zum Rand.</p> </li> <li> <p>Exportieren des Sprites:</p> </li> <li> <p>Exportiere die Grafik in PNG-Format.</p> </li> <li> <p>Stelle sicher, dass die Transparenz erhalten bleibt.</p> </li> <li> <p>Benennung des Sprite-Bildes:</p> </li> <li> <p>Verwende das Format: <code>[Barcode].png</code></p> </li> <li> <p>Beispiel: F\u00fcr ein Produkt mit dem Barcode 085 w\u00e4re der Dateiname <code>085.png</code></p> </li> <li> <p>Platzierung im Ressourcen-Ordner:</p> </li> <li> <p>Kopiere die erstellte Sprite-Datei in den Produktbilder-Ordner des Fridgely-Projekts:    <pre><code>src\\main\\resources\\ch\\primeo\\fridgely\\productimages\n</code></pre></p> </li> <li>Stelle sicher, dass die Dateirechte korrekt gesetzt sind, damit die Anwendung auf das Bild zugreifen kann.</li> </ol> <p>Hinweis: Achte darauf, dass die Bilder konsistent mit den anderen Produkt-Sprites in Stil und Qualit\u00e4t sind, um ein einheitliches Erscheinungsbild in der Anwendung zu gew\u00e4hrleisten.</p>"},{"location":"Other/Adding3DProducts/#2-erstellen-oder-beschaffen-eines-3d-modells","title":"2. Erstellen oder Beschaffen eines 3D-Modells","text":"<p>Es kann ein 3D-Modell selbst erstellt werden oder aus einer Bibliothek bezogen werden. Es gilt:</p> <ul> <li>Dateigr\u00f6sse: M\u00f6glichst kompakt, damit der Druck nicht zu lange dauert (idealerweise unter 10 MB)</li> <li>Polygonanzahl: Nicht zu hoch, um die Druckzeit und Dateigr\u00f6sse gering zu halten (Zielbereich: 5.000-20.000 Polygone)</li> <li>Massstab: Realistische Gr\u00f6ssenverh\u00e4ltnisse (Skalierungsfaktor 1:1 zur realen Gr\u00f6sse)</li> </ul> <p>Empfohlene Quellen:</p> <ul> <li>Printables</li> <li>Thingiverse</li> <li>Selbst modelliert (z.B. mit Blender, Fusion 360, Tinkercad)</li> </ul>"},{"location":"Other/Adding3DProducts/#3-optimieren-des-3d-modells","title":"3. Optimieren des 3D-Modells","text":"Optimierungsaspekt Empfohlene Werte Beschreibung Wandst\u00e4rke Mindestens 1 mm F\u00fcr Stabilit\u00e4t beim Druck Dateigr\u00f6sse Max. 10 MB F\u00fcr schnelle Verarbeitung im Slicer Druckorientierung Flache Seite nach unten F\u00fcr optimale Druckqualit\u00e4t und Stabilit\u00e4t"},{"location":"Other/Adding3DProducts/#4-export-als-stl-format","title":"4. Export als STL-Format","text":"<p>Exportiere das Modell als <code>.stl</code>-Datei. Achte darauf, dass das Modell geschlossen (wasserdicht) ist und keine Fehler enth\u00e4lt.</p>"},{"location":"Other/Adding3DProducts/#5-vorbereitung-mit-prusaslicer","title":"5. Vorbereitung mit PrusaSlicer","text":"<ul> <li>\u00d6ffne das STL-Modell in PrusaSlicer.</li> <li>Druckeinstellungen: 0.20mm SPEED (f\u00fcr Details) oder 0.30mm DRAFT (f\u00fcr schnelleren Druck)</li> <li>Filament: Generic PLA (Temperatur: 215\u00b0C f\u00fcr erste Schicht, 210\u00b0C f\u00fcr weitere Schichten)</li> <li>Drucker: Original Prusa MK3.9 mit 0.4 mm D\u00fcse</li> <li>St\u00fctzen: \u00dcberall mit 15% Dichte</li> <li>Infill: 15-25% (je nach gew\u00fcnschter Stabilit\u00e4t)</li> <li>Infill-Muster: Gitter (f\u00fcr normale Modelle) oder Gyroid (f\u00fcr erh\u00f6hte Stabilit\u00e4t)</li> <li>Slice das Modell und speichere die GCODE-Datei.</li> </ul>"},{"location":"Other/Adding3DProducts/#6-3d-druck-durchfuhren","title":"6. 3D-Druck durchf\u00fchren","text":"<ul> <li>\u00dcbertrage die GCODE-Datei auf den Drucker.</li> <li>Starte den Druckvorgang.</li> <li>Nach dem Druck das Modell ggf. von St\u00fctzmaterial befreien.</li> </ul>"},{"location":"Other/Adding3DProducts/#61-anmalen-mit-acrylfarbe-optional","title":"6.1. Anmalen mit Acrylfarbe (optional)","text":"<ul> <li>(Optional) Eine d\u00fcnne Schicht weisse Grundierung auftragen und trocknen lassen (ca. 1-2 Stunden).</li> <li>Anmaltipps:<ul> <li>Verwende wasserfeste Acrylfarben f\u00fcr eine dauerhafte F\u00e4rbung.</li> <li>Trage die Farbe in mehreren d\u00fcnnen Schichten auf, statt in einer dicken Schicht.</li> <li>(Optional) Nach dem vollst\u00e4ndigen Trocknen (24 Stunden) mit Acryllack versiegeln f\u00fcr zus\u00e4tzlichen Schutz und Glanz.</li> </ul> </li> <li>Achte darauf, erst nach dem Anmalen den Barcode anzubringen, um Farbverschmierungen zu vermeiden.</li> </ul>"},{"location":"Other/Adding3DProducts/#7-barcode-generieren-und-aufkleben","title":"7. Barcode generieren und aufkleben","text":"<ul> <li>Erstelle einen Barcode f\u00fcr das Produkt. Jeder Online-Barcode-Generator ist geeignet, z.B. https://barcode.tec-it.com/en.<ul> <li>Verwende den EAN-13 Barcode-Typ f\u00fcr die beste Kompatibilit\u00e4t mit dem Scanner</li> <li>Drucke den Barcode mit mindestens 300 DPI Aufl\u00f6sung</li> </ul> </li> <li>Drucke den Barcode auf HERMA PREMIUM No.4456 X2422X Etikettenpapier (3 x 10).</li> <li>Klebe den Barcode auf das gedruckte 3D-Produkt:<ul> <li>Bevorzugte Position: An der Unterseite des Produkts oder auf der R\u00fcckseite</li> <li>Alternative Position: An einer flachen, gut sichtbaren Stelle</li> <li>Meide: Kurven, Kanten oder strukturierte Oberfl\u00e4chen</li> <li>Stelle sicher, dass der Barcode komplett flach aufgeklebt ist, ohne Luftblasen oder Falten</li> </ul> </li> </ul>"},{"location":"Other/Adding3DProducts/#71-sql-eintrag-fur-das-produkt-erstellen","title":"7.1. SQL-Eintrag f\u00fcr das Produkt erstellen","text":"<p>F\u00fcr die Integration des Produkts in die Fridgely-Datenbank ist ein entsprechender SQL-Eintrag erforderlich:</p> <ol> <li>SQL-Datei bearbeiten:</li> <li>Navigiere zum SQL-Ressourcen-Ordner des Fridgely-Projekts:    <pre><code>src\\main\\resources\\ch\\primeo\\fridgely\\sql\n</code></pre></li> <li> <p>\u00d6ffne die allgemeine Produkt-Insert-Datei <code>data.sql</code>.</p> </li> <li> <p>Vorlage f\u00fcr den SQL-Eintrag:</p> </li> </ol> <pre><code>INSERT INTO Products (\n    Barcode, \n    Name, \n    NameDE, \n    NameFR,\n    Description, \n    DescriptionDE, \n    DescriptionFR,\n    IsDefaultProduct, \n    IsBio, \n    IsLocal, \n    IsLowCO2\n) \n\nVALUES (\n    '4001234567890', \n    'Organic Milk', \n    'Bio-Milch', \n    'Lait Bio',\n    'Fresh organic milk from local farms', \n    'Frische Bio-Milch von lokalen Bauernh\u00f6fen', \n    'Lait bio frais des fermes locales',\n    0, -- kein Standardprodukt\n    1, -- ist Bio\n    1, -- ist lokal\n    1  -- ist CO2-arm\n);\n</code></pre> <ol> <li>SQL-Datei speichern:</li> <li>Speicher die SQL-Datei im Ressourcen-Ordner.</li> <li>Stelle sicher, dass die Datei in UTF-8 kodiert ist, um Umlaute und Sonderzeichen korrekt darzustellen.</li> </ol>"},{"location":"Other/Adding3DProducts/#8-testen-der-3d-darstellung","title":"8. Testen der 3D-Darstellung","text":"<p>Checkliste:</p> <ul> <li> 3D-Modell ist stabil</li> <li> Barcode ist gut lesbar</li> <li> Produkt wird vom System korrekt erkannt und zugeordnet</li> <li> Produktinformationen werden korrekt in der App angezeigt</li> <li> Barcode l\u00e4sst sich aus allen \u00fcblichen Scan-Winkeln gut lesen</li> </ul> <p>Test-Ablauf:</p> <ol> <li>Scannen des 3D-Produkts bei Fridgely</li> <li>\u00dcberpr\u00fcfen, ob das korrekte Produkt im System erkannt wird</li> <li>Testen der korrekten Darstellung des Sprites</li> </ol>"},{"location":"Other/Adding3DProducts/#fehlerbehebung","title":"Fehlerbehebung","text":"Problem M\u00f6gliche Ursachen L\u00f6sungsans\u00e4tze Modell l\u00e4sst sich nicht drucken Fehlerhafte STL, zu d\u00fcnne W\u00e4nde Modell reparieren, Wandst\u00e4rke erh\u00f6hen Druck haftet nicht Druckbett nicht vorbereitet Bett reinigen, Haftmittel verwenden Barcode wird nicht erkannt Schlechte Druckqualit\u00e4t, falscher Code Barcode neu drucken, anderen Generator testen Produkt zu instabil Zu wenig Infill, zu d\u00fcnne W\u00e4nde Infill erh\u00f6hen, Wandst\u00e4rke anpassen Modell passt nicht in den K\u00fchlschrank Zu gross skaliert Massstab anpassen, neu skalieren Farbe des Modells verblasst UV-Exposition, minderwertiges Filament Hochwertiges Filament verwenden, UV-Schutz auftragen Produkt wird nicht im System erkannt Datenbank-Eintrag fehlerhaft Datenbankeintr\u00e4ge \u00fcberpr\u00fcfen, Barcode neu zuordnen Materialbeschaffenheit nicht realistisch Falsches Filament, Einstellungen Materialwechsel erw\u00e4gen, Druckparameter anpassen Acrylfarbe bl\u00e4ttert ab Schlechte Haftung, fehlende Grundierung Oberfl\u00e4che anschleifen, Grundierung verwenden Farben verlaufen ineinander Zu nasse Anwendung, zu wenig Trockenzeit D\u00fcnnere Schichten auftragen, zwischen Farben trocknen lassen SQL-Fehler beim Einf\u00fcgen Syntax-Fehler, falsche Datentypen SQL-Syntax pr\u00fcfen, korrekte Tabellennamen verwenden Sprite wird nicht angezeigt Falscher Pfad, Format nicht unterst\u00fctzt Dateipfad und -format \u00fcberpr\u00fcfen, Berechtigungen pr\u00fcfen Datenbankeintrag f\u00fchrt zu Duplikat Barcode bereits vorhanden Existierende Eintr\u00e4ge pr\u00fcfen, UPDATE statt INSERT verwenden Bild-Ressourcen werden nicht geladen Falscher Pfad, Schreibweise Korrekte Pfade und Dateinamen verwenden"},{"location":"Other/Adding3DProducts/#best-practices","title":"Best Practices","text":"<ul> <li>Druck Anmerkung: Verwendung von 15-20% Infill f\u00fcr die 3D-Produkte.</li> <li>Backups/Dokumentation: Originale 3D-Modelle sichern. Gespeichert werden alle Modelle im <code>.blend</code>, <code>.f3d</code> oder entsprechenden Quellformat sowie bevorzugt als <code>.stl</code>. Zus\u00e4tzlich sollten alle neue Produkte in der 3D-Produkte Dokumentation hinzugef\u00fcgt werden.</li> <li>Barcode-Qualit\u00e4t: Hochaufl\u00f6send drucken und sauber aufkleben. Wir empfehlen mindestens 300 DPI beim Druck.</li> <li>Bemalen f\u00fcr Realismus: Verwenden von Acrylfarben f\u00fcr eine bessere Darstellung.</li> </ul>"},{"location":"Other/Adding3DProducts/#wichtige-dateipfade","title":"Wichtige Dateipfade","text":"Ressource Pfad Format Beschreibung Sprite-Bilder <code>src\\main\\resources\\ch\\primeo\\fridgely\\productimages</code> PNG 2D-Bilder der Produkte f\u00fcr die Anzeige in der App SQL-Dateien <code>src\\main\\resources\\ch\\primeo\\fridgely\\sql</code> SQL Datenbank-Eintr\u00e4ge f\u00fcr neue Produkte Modell-Quelldateien SAD Verzeichnis .blend, .f3d, etc. Original-Quelldateien der 3D-Modelle"},{"location":"Other/Adding3DProducts/#checkliste-fur-vollstandige-produktintegration","title":"Checkliste f\u00fcr vollst\u00e4ndige Produktintegration","text":"<ul> <li> 2D-Sprite erstellt und im productimages-Ordner platziert</li> <li> 3D-Modell erstellt/beschafft und optimiert </li> <li> 3D-Modell gedruckt und nach Bedarf bemalt</li> <li> Barcode korrekt angebracht</li> <li> SQL-Eintrag erstellt</li> <li> Anwendung neu gestartet</li> <li> Barcode wird vom Fridgely-Scanner korrekt erkannt</li> <li> Produkt im 3D-Modell-Katalog dokumentiert</li> <li> Backup aller Dateien erstellt (GIT)</li> </ul>"},{"location":"Other/AddingLanguages/","title":"Neue Sprachen zu Fridgely hinzuf\u00fcgen","text":"<p>Diese Anleitung beschreibt detailliert, wie man dem Fridgely-System neue Sprachen hinzuf\u00fcgen kann. Das System verwendet einen zentralisierten Lokalisierungsmechanismus, der es erm\u00f6glicht, die Benutzeroberfl\u00e4che in verschiedenen Sprachen anzuzeigen und zur Laufzeit zwischen diesen Sprachen zu wechseln.</p>"},{"location":"Other/AddingLanguages/#inhaltsverzeichnis","title":"Inhaltsverzeichnis","text":""},{"location":"Other/AddingLanguages/#uberblick-uber-das-mehrsprachigkeitskonzept","title":"\u00dcberblick \u00fcber das Mehrsprachigkeitskonzept","text":"<p>Fridgely unterst\u00fctzt mehrere Sprachen (standardm\u00e4ssig Deutsch, Englisch und Franz\u00f6sisch) mithilfe eines zentralisierten Lokalisierungsdienstes. Dieser basiert auf folgenden Komponenten:</p> <ol> <li>AppLocalizationService: Ein Singleton-Service, der die Sprachressourcen verwaltet und UI-Komponenten \u00fcber Sprach\u00e4nderungen informiert.</li> <li>LocalizationObserver: Ein Interface, das von UI-Komponenten implementiert wird, um auf Sprach\u00e4nderungen zu reagieren.</li> <li>Properties-Dateien: Textdateien im Schl\u00fcssel-Wert-Format, die die \u00fcbersetzten Texte f\u00fcr jede Sprache enthalten.</li> </ol> <p>Der Lokalisierungsmechanismus verwendet das Observer-Pattern, um dynamisch die UI-Elemente zu aktualisieren, wenn die Sprache gewechselt wird.</p>"},{"location":"Other/AddingLanguages/#sprachdateien-und-ihre-struktur","title":"Sprachdateien und ihre Struktur","text":"<p>Die Sprachdateien befinden sich im Verzeichnis <code>src/main/resources/ch/primeo/fridgely/</code> und folgen der Namenskonvention <code>languages_XX.properties</code>, wobei <code>XX</code> der ISO-639-1-Sprachcode ist (z.B. <code>de</code> f\u00fcr Deutsch, <code>en</code> f\u00fcr Englisch, <code>fr</code> f\u00fcr Franz\u00f6sisch).</p>"},{"location":"Other/AddingLanguages/#beispiel-fur-den-aufbau-einer-sprachdatei","title":"Beispiel f\u00fcr den Aufbau einer Sprachdatei","text":"<p>Eine typische Sprachdatei enth\u00e4lt Schl\u00fcssel-Wert-Paare, wobei der Schl\u00fcssel in allen Sprachdateien identisch ist und der Wert die \u00dcbersetzung in der jeweiligen Sprache darstellt:</p> <pre><code># Navigation\nhome.button.lang=English\ngamemode.title=Choose Game Mode\ngamemode.singleplayer=Single Player\ngamemode.multiplayer=Multiplayer\n\n# Tutorials\ntutorial.welcome=Welcome to Fridgely!\ntutorial.game.winner=Help Fridgely reclaim its iceberg!\n\n# Product labels\nproduct.isBio=Organic\nproduct.isNotBio=Non-Organic\nproduct.isLocal=Local\nproduct.isNotLocal=Non-Local\n</code></pre>"},{"location":"Other/AddingLanguages/#eine-neue-sprache-hinzufugen","title":"Eine neue Sprache hinzuf\u00fcgen","text":"<p>Um eine neue Sprache zu Fridgely hinzuzuf\u00fcgen, sind folgende Schritte erforderlich:</p>"},{"location":"Other/AddingLanguages/#1-erstellen-einer-neuen-sprachdatei","title":"1. Erstellen einer neuen Sprachdatei","text":"<ol> <li>Erstelle eine neue Datei mit dem Namen <code>languages_XX.properties</code> im Verzeichnis <code>src/main/resources/ch/primeo/fridgely/</code>, wobei <code>XX</code> der ISO-639-1-Code der neuen Sprache ist (z.B. <code>it</code> f\u00fcr Italienisch).</li> <li>Kopiere den gesamten Inhalt einer bestehenden Sprachdatei (z.B. <code>languages_en.properties</code>) in die neue Datei.</li> <li>\u00dcbersetze alle Werte (rechts vom <code>=</code>-Zeichen) in die neue Sprache. Wichtig: Die Schl\u00fcssel (links vom <code>=</code>-Zeichen) d\u00fcrfen nicht ver\u00e4ndert werden.</li> </ol> <p>Hinweis: Achte besonders auf Platzhalter wie <code>%d</code> oder <code>%s</code> in den Texten. Diese m\u00fcssen in der \u00dcbersetzung an der entsprechenden Position beibehalten werden, da sie zur Laufzeit durch variable Werte ersetzt werden.</p>"},{"location":"Other/AddingLanguages/#2-aktualisieren-des-applocalizationservice","title":"2. Aktualisieren des AppLocalizationService","text":"<p>\u00d6ffne die Datei <code>src/main/java/ch/primeo/fridgely/service/localization/AppLocalizationService.java</code> und f\u00fcge die neue Locale zur Liste der unterst\u00fctzten Sprachen hinzu:</p> <pre><code>private final List&lt;Locale&gt; locales = Arrays.asList(\n    Locale.forLanguageTag(\"en\"),\n    Locale.forLanguageTag(\"de\"),\n    Locale.forLanguageTag(\"fr\"),\n    Locale.forLanguageTag(\"XX\")  // F\u00fcge hier den Code der neuen Sprache ein\n);\n</code></pre>"},{"location":"Other/AddingLanguages/#aktualisieren-der-anwendungskonfiguration","title":"Aktualisieren der Anwendungskonfiguration","text":"<p>Um die neue Sprache als Standard festzulegen, kann die Datei <code>application.properties</code> aktualisiert werden:</p> <ol> <li>\u00d6ffne die Datei <code>src/main/resources/application.properties</code>.</li> <li>Suche nach der Zeile <code>app.language=de</code> (oder einer anderen Sprache).</li> <li>\u00c4ndere den Wert auf den Code deiner neuen Sprache, z.B. <code>app.language=it</code> f\u00fcr Italienisch.</li> </ol>"},{"location":"Other/AddingLanguages/#testen-der-neuen-sprache","title":"Testen der neuen Sprache","text":"<p>Nach dem Hinzuf\u00fcgen einer neuen Sprache sollten folgende Tests durchgef\u00fchrt werden:</p> <ol> <li>Startsprache testen: Starte die Anwendung und pr\u00fcfe, ob die konfigurierte Startsprache korrekt geladen wird.</li> <li>Sprachumschaltung testen: Verwende die Sprachumschaltung in der Anwendung, um sicherzustellen, dass die neue Sprache im Zyklus erscheint.</li> <li>UI-Elemente pr\u00fcfen: \u00dcberpr\u00fcfe alle Bereiche der Anwendung, um sicherzustellen, dass alle Texte korrekt \u00fcbersetzt wurden.</li> <li>Dynamische Inhalte testen: Teste Texte mit Platzhaltern (z.B. Punkteanzeige oder Rundenanzeige), um sicherzustellen, dass die Formatierung korrekt funktioniert.</li> </ol>"},{"location":"Other/AddingLanguages/#fehlerbehebung","title":"Fehlerbehebung","text":"<p>Hier sind einige h\u00e4ufige Probleme und deren L\u00f6sungen:</p> <ol> <li>Fehlende \u00dcbersetzung: Wenn ein Text in der neuen Sprache nicht angezeigt wird, \u00fcberpr\u00fcfe, ob der entsprechende Schl\u00fcssel in der Sprachdatei vorhanden und korrekt \u00fcbersetzt ist.</li> <li>Zeichenkodierungsprobleme: Bei Sonderzeichen k\u00f6nnen Kodierungsprobleme auftreten. Stelle sicher, dass die Properties-Datei mit UTF-8-Kodierung gespeichert wird.</li> <li>Formatierungsfehler: Achte auf korrekte Formatierung und Platzhalter in den \u00fcbersetzten Texten.</li> <li>Cachingprobleme: Manchmal muss die Anwendung neu gestartet werden, damit \u00c4nderungen an den Sprachdateien wirksam werden.</li> </ol>"},{"location":"Other/AddingLanguages/#beispiel-italienisch-hinzufugen","title":"Beispiel: Italienisch hinzuf\u00fcgen","text":"<p>Hier ist ein Beispiel f\u00fcr das Hinzuf\u00fcgen von Italienisch als neue Sprache:</p>"},{"location":"Other/AddingLanguages/#1-erstellen-der-italienischen-sprachdatei","title":"1. Erstellen der italienischen Sprachdatei","text":"<p>Erstelle die Datei <code>languages_it.properties</code> im Verzeichnis <code>src/main/resources/ch/primeo/fridgely/</code> mit dem folgenden Inhalt (Auszug):</p> <pre><code>home.button.lang=Italiano\ngamemode.title=Scegli Modalit\u00e0 di Gioco\ngamemode.singleplayer=Giocatore Singolo\ngamemode.multiplayer=Multigiocatore\ngamemode.singleplayer.tooltip=Gioca da solo\ngamemode.multiplayer.tooltip=Gioca con amici\nmultiplayer.of=di\n# Tutorial Messages\ntutorial.welcome=Benvenuto a Fridgely!\ntutorial.multiplayer.player1=Giocatore 1: Scansiona prodotti sostenibili per riempire Fridgely\ntutorial.multiplayer.player2=Giocatore 2: Scegli una ricetta e usa quanti pi\u00f9 prodotti possibile\n</code></pre>"},{"location":"Other/AddingLanguages/#2-aktualisieren-des-applocalizationservice_1","title":"2. Aktualisieren des AppLocalizationService","text":"<pre><code>private final List&lt;Locale&gt; locales = Arrays.asList(\n    Locale.forLanguageTag(\"en\"),\n    Locale.forLanguageTag(\"de\"),\n    Locale.forLanguageTag(\"fr\"),\n    Locale.forLanguageTag(\"it\")  // Italienisch hinzugef\u00fcgt\n);\n</code></pre>"},{"location":"Other/AddingLanguages/#3-testen-der-italienischen-sprache","title":"3. Testen der italienischen Sprache","text":"<p>Starte die Anwendung und teste die italienische Sprachoption mit den oben beschriebenen Testschritten.</p>"},{"location":"Other/AddingLanguages/#tipps-fur-ubersetzer","title":"Tipps f\u00fcr \u00dcbersetzer","text":"<ul> <li>Konsistenz: Achte auf einheitliche Begriffe und Terminologie in der gesamten \u00dcbersetzung.</li> <li>Kontext beachten: Ber\u00fccksichtige bei der \u00dcbersetzung den Kontext, in dem der Text verwendet wird.</li> <li>Platzhalter: Stelle sicher, dass alle Platzhalter (<code>%s</code>, <code>%d</code>, etc.) in der \u00dcbersetzung erhalten bleiben.</li> <li>UI-Raumbeschr\u00e4nkungen: Bedenke, dass zu lange \u00dcbersetzungen das UI-Layout beeintr\u00e4chtigen k\u00f6nnen.</li> <li>Zielgruppe: Da Fridgely f\u00fcr Kinder und Jugendliche konzipiert ist, solltest du kindgerechte Formulierungen verwenden.</li> </ul>"},{"location":"Other/AddingRecipes/","title":"Anleitung zum Hinzuf\u00fcgen von Rezepten","text":"<p>Diese Anleitung erkl\u00e4rt, wie neue Rezepte zum Fridgely-System hinzugef\u00fcgt werden k\u00f6nnen. Die Rezeptdatenbank ist ein zentraler Bestandteil von Fridgely und erm\u00f6glicht es Benutzern, passende Rezepte basierend auf den im K\u00fchlschrank vorhandenen Zutaten zu finden.</p>"},{"location":"Other/AddingRecipes/#datenbankstruktur-fur-rezepte","title":"Datenbankstruktur f\u00fcr Rezepte","text":"<p>Fridgely verwendet eine SQLite-Datenbank mit folgenden relevanten Tabellen f\u00fcr Rezepte:</p> <ol> <li>Recipes - Enth\u00e4lt grundlegende Rezeptinformationen</li> <li>RecipeIngredients - Verkn\u00fcpft Rezepte mit den ben\u00f6tigten Produkten (Join-Tabelle)</li> <li>Products - Enth\u00e4lt alle Produktinformationen</li> </ol>"},{"location":"Other/AddingRecipes/#recipes-tabelle","title":"Recipes-Tabelle","text":"<pre><code>CREATE TABLE Recipes\n(\n    Id            INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name          TEXT,     -- Englischer Name des Rezepts\n    NameDE        TEXT,     -- Deutscher Name des Rezepts\n    NameFR        TEXT,     -- Franz\u00f6sischer Name des Rezepts\n    Description   TEXT,     -- Englische Beschreibung\n    DescriptionDE TEXT,     -- Deutsche Beschreibung\n    DescriptionFR TEXT      -- Franz\u00f6sische Beschreibung\n);\n</code></pre>"},{"location":"Other/AddingRecipes/#recipeingredients-tabelle-verknupfungstabelle","title":"RecipeIngredients-Tabelle (Verkn\u00fcpfungstabelle)","text":"<pre><code>CREATE TABLE RecipeIngredients\n(\n    RecipeId INTEGER NOT NULL, -- Fremdschl\u00fcssel zum Rezept\n    Barcode  TEXT    NOT NULL, -- Fremdschl\u00fcssel zum Produkt\n    FOREIGN KEY (RecipeId) REFERENCES Recipes (Id),\n    FOREIGN KEY (Barcode) REFERENCES Products (Barcode),\n    PRIMARY KEY (RecipeId, Barcode)\n);\n</code></pre>"},{"location":"Other/AddingRecipes/#schritt-fur-schritt-anleitung-zum-hinzufugen-von-rezepten","title":"Schritt-f\u00fcr-Schritt Anleitung zum Hinzuf\u00fcgen von Rezepten","text":""},{"location":"Other/AddingRecipes/#1-vorbereitung","title":"1. Vorbereitung","text":"<p>Bevor ein neues Rezept hinzugef\u00fcgt wird, pr\u00fcfe folgende Punkte:</p> <ul> <li>Stelle sicher, dass alle ben\u00f6tigten Produkte (Zutaten) bereits in der Produktdatenbank existieren</li> <li>\u00dcberlege einen passenden Namen und eine Beschreibung in allen unterst\u00fctzten Sprachen (Englisch, Deutsch, Franz\u00f6sisch)</li> <li>Notiere die Barcodes aller ben\u00f6tigten Zutaten</li> </ul>"},{"location":"Other/AddingRecipes/#2-sql-skript-erstellen","title":"2. SQL-Skript erstellen","text":"<p>Um ein neues Rezept hinzuzuf\u00fcgen, m\u00fcssen die SQL-Anweisungen f\u00fcr beide Tabellen erstellt werden.</p>"},{"location":"Other/AddingRecipes/#a-rezept-in-die-recipes-tabelle-einfugen","title":"a) Rezept in die Recipes-Tabelle einf\u00fcgen","text":"<pre><code>INSERT INTO recipe (name, nameDE, nameFR, description, descriptionDE, descriptionFR)\nVALUES\n    ('Recipe Name', 'Rezeptname', 'Nom de la recette',\n     'Recipe description in English.', 'Rezeptbeschreibung auf Deutsch.', 'Description de la recette en fran\u00e7ais.');\n</code></pre>"},{"location":"Other/AddingRecipes/#b-zutaten-in-die-recipeingredients-tabelle-einfugen","title":"b) Zutaten in die RecipeIngredients-Tabelle einf\u00fcgen","text":"<p>Wenn die Rezept-ID bereits bekannt ist, kann die folgende Vorlage verwendet werden:</p> <pre><code>INSERT INTO recipe_ingredient (id, recipe_recipe_id, product_barcode)\nVALUES\n    ([N\u00e4chste verf\u00fcgbare ID], [Rezept-ID], '[Produkt-Barcode 1]'),\n    ([N\u00e4chste verf\u00fcgbare ID + 1], [Rezept-ID], '[Produkt-Barcode 2]'),\n    ([N\u00e4chste verf\u00fcgbare ID + 2], [Rezept-ID], '[Produkt-Barcode 3]');\n</code></pre>"},{"location":"Other/AddingRecipes/#3-beispiel-fur-ein-vollstandiges-rezept","title":"3. Beispiel f\u00fcr ein vollst\u00e4ndiges Rezept","text":"<p>Hier ist ein Beispiel f\u00fcr das Hinzuf\u00fcgen eines neuen Rezepts \"Vegetarische Pasta\":</p> <pre><code>-- Rezept hinzuf\u00fcgen\nINSERT INTO recipe (name, nameDE, nameFR, description, descriptionDE, descriptionFR)\nVALUES\n    ('Vegetarian Pasta', 'Vegetarische Pasta', 'P\u00e2tes V\u00e9g\u00e9tariennes',\n     'Pasta with tomatoes, garlic and olive oil.', 'Nudeln mit Tomaten, Knoblauch und Oliven\u00f6l.', 'P\u00e2tes aux tomates, \u00e0 l''ail et \u00e0 l''huile d''olive.');\n\n-- Zutaten verkn\u00fcpfen (angenommen, das neue Rezept hat die ID 46)\nINSERT INTO recipe_ingredient (id, recipe_recipe_id, product_barcode)\nVALUES\n    (120, 46, 'CCC'),  -- Pasta / Nudeln\n    (121, 46, '001'),  -- Tomato / Tomate\n    (122, 46, '017'),  -- Garlic / Knoblauch\n    (123, 46, 'EEE');  -- Olive Oil / Oliven\u00f6l\n</code></pre>"},{"location":"Other/AddingRecipes/#4-uberprufen-der-produktbarcodes","title":"4. \u00dcberpr\u00fcfen der Produktbarcodes","text":"<p>Stelle sicher, dass alle verwendeten Produkt-Barcodes in der Datenbank existieren:</p> <pre><code>SELECT barcode, name, nameDE, nameFR FROM product WHERE barcode IN ('001', '017', 'CCC', 'EEE');\n</code></pre>"},{"location":"Other/AddingRecipes/#hinweise-und-best-practices","title":"Hinweise und Best Practices","text":"<ol> <li> <p>Sprachversionen: Achte darauf, das Rezept immer in allen drei unterst\u00fctzten Sprachen anzulegen (Englisch, Deutsch, Franz\u00f6sisch).</p> </li> <li> <p>Komplexit\u00e4t der Rezepte: Die meisten vorhandenen Rezepte haben 2-4 Zutaten. Diese Komplexit\u00e4t sollte beibehalten werden.</p> </li> <li> <p>Standardzutaten vs. K\u00fchlschrankzutaten: Beachte, dass manche Produkte als \"Standard\" markiert sind (<code>IsDefaultProduct = 1</code>). Diese werden als immer verf\u00fcgbar betrachtet:</p> </li> <li>'AAA' (Brot / Bread)</li> <li>'BBB' (Reis / Rice)</li> <li>'CCC' (Nudeln / Pasta)</li> <li>'DDD' (Honig / Honey)</li> <li> <p>'EEE' (Oliven\u00f6l / Olive Oil)</p> </li> <li> <p>Rezepte testen: Nach dem Hinzuf\u00fcgen eines neuen Rezepts solltest du testen, ob es korrekt angezeigt wird und ob es richtig funktioniert, wenn entsprechende Produkte im K\u00fchlschrank verf\u00fcgbar sind.</p> </li> <li> <p>Backup: Erstelle immer ein Backup der Datenbank, bevor \u00c4nderungen vorgenommen werden.</p> </li> </ol>"},{"location":"Other/AddingRecipes/#fehlerbehandlung","title":"Fehlerbehandlung","text":"<p>Falls ein Rezept nach dem Hinzuf\u00fcgen nicht angezeigt wird, pr\u00fcfe folgende m\u00f6gliche Ursachen:</p> <ol> <li>Stelle sicher, dass alle Fremdschl\u00fcsselbeziehungen korrekt sind (g\u00fcltige Rezept-ID und Produkt-Barcodes).</li> <li>\u00dcberpr\u00fcfe, ob alle erforderlichen Felder ausgef\u00fcllt sind.</li> <li>\u00dcberpr\u00fcfe die Formatierung der SQL-Anweisungen, insbesondere bei Texten mit Apostrophen (ein Apostroph muss als zwei Apostrophe <code>''</code> geschrieben werden).</li> </ol>"},{"location":"Other/AddingRecipes/#liste-der-vorhandenen-produkt-barcodes","title":"Liste der vorhandenen Produkt-Barcodes","text":"<p>Hier sind die wichtigsten Produkt-Barcodes, die du in Rezepten verwenden kannst:</p> Barcode Englischer Name Deutscher Name Franz\u00f6sischer Name '001' Tomato Tomate Tomate '002' Egg Ei \u0152uf '003' Cheese K\u00e4se Fromage - France '004' Carrots Karotten Carottes Locales '005' Butter Butter Beurre '006' Beef Rindfleisch B\u0153uf '007' Milk Milch Lait '008' Spinach Spinat \u00c9pinard '010' Apples \u00c4pfel Pommes '011' Potatoes Kartoffeln Terre Locales '012' Chicken Poulet Poulet '016' Strawberries Erdbeeren Fraises '017' Garlic Knoblauch Ail '018' Lettuce Salat Laitue '019' Bananas Bananen Bananes '020' Tofu Tofu Tofu '021' Orange Orange Orange '022' Lemon Zitrone Citron '023' Onion Zwiebel Oignon '024' Avocado Avocado Avocat '025' Bell Pepper Paprika Poivron '026' Tuna Thunfisch Thon '027' Ground Beef Hackfleisch Viande Hach\u00e9e '028' Beans Bohnen Haricots '029' Corn Mais Ma\u00efs 'AAA' Bread Brot Pain 'BBB' Rice Reis Riz 'CCC' Pasta Nudeln P\u00e2tes 'DDD' Honey Honig Miel 'EEE' Olive Oil Oliven\u00f6l Huile d'Olive"},{"location":"SAD/","title":"Start","text":"<p>\"Spielerisch lernen, nachhaltig leben\"</p> <pre><code>&lt;div class=\"sad-feature\"&gt;\n    &lt;h3&gt;\ud83d\udcf1 Intuitive Benutzeroberfl\u00e4che&lt;/h3&gt;\n    &lt;p&gt;Kindgerechtes Design mit spielerischer Interaktion&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"sad-feature\"&gt;\n    &lt;h3&gt;\ud83d\udd04 Mehrsprachigkeit&lt;/h3&gt;\n    &lt;p&gt;Vollst\u00e4ndige Unterst\u00fctzung f\u00fcr DE, EN und FR&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"sad-feature\"&gt;\n    &lt;h3&gt;\ud83e\udde9 Modulare Architektur&lt;/h3&gt;\n    &lt;p&gt;Leicht erweiterbar und anpassbar&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"SAD/#architektur-highlights","title":"Architektur-Highlights","text":"MVC-Architektur <p>Klare Trennung von Modell, Ansicht und Controller f\u00fcr verbesserte Wartbarkeit und Testbarkeit.</p> Repository-Pattern <p>Einheitliche Datenzugriffsschicht f\u00fcr konsistente Fehlerbehandlung und einfaches Testen.</p>"},{"location":"SAD/#qualitatsziele-im-uberblick","title":"Qualit\u00e4tsziele im \u00dcberblick","text":"<ul> <li>Usability: Intuitive, kindgerechte Bedienung ohne ausf\u00fchrliche Erkl\u00e4rungen</li> <li>Robustheit: Stabile Funktion auch bei intensiver Nutzung durch Kinder</li> <li>Wartbarkeit: Einfache Erweiterung und Anpassung durch modulare Struktur</li> <li>Performance: Optimiert f\u00fcr Raspberry Pi mit begrenzten Ressourcen</li> </ul>"},{"location":"SAD/#uber-arc42","title":"\u00dcber arc42","text":"<p>arc42, das Template zur Dokumentation von Software- und Systemarchitekturen.</p> <p>Template Version 8.1 DE (basiert auf AsciiDoc Version), Mai 2022</p> <p>Created, maintained and (C) by Dr. Peter Hruschka, Dr. Gernot Starke and contributors. Siehe https://arc42.org.</p>      Erik Steinacher \u2022 Entwickelt mit Obsidian/Git/VS Code/MKDocs"},{"location":"SAD/01_introduction_and_goals/","title":"1. Einf\u00fchrung und Ziele","text":"<p>Dieses Dokument beschreibt die wesentlichen Anforderungen und treibenden Kr\u00e4fte, die bei der Umsetzung der Softwarearchitektur und Entwicklung des Fridgely-Systems ber\u00fccksichtigt werden m\u00fcssen. </p> <p>Fridgely ist ein Smart-Fridge-System, das interaktiv und spielerisch Kinder (7\u201313 Jahre) f\u00fcr einen bewussten Umgang mit Lebensmitteln sensibilisiert und Lebensmittelverschwendung reduziert. </p> <p>Das System kombiniert Hard- und Softwarekomponenten, darunter Barcode-Scanner (\u00fcber USB angeschlossen), Dual-Displays (ein Display mit 1024x600 Aufl\u00f6sung f\u00fcr die Bedienung und ein zweites Display mit 1920x1080 Aufl\u00f6sung f\u00fcr die Lageranzeige, und l\u00e4uft auf einem Raspberry Pi unter Verwendung von Java mit Swing als UI-Framework und Spring Boot f\u00fcr Dependency Injection und Datenverwaltung. Es unterst\u00fctzt u.a. die automatische Produkterkennung durch Barcode-Scanning (Produkte werden in einer eingebetteten SQLite-Datenbank mit JPA gespeichert), interaktive Spielmodi (Einzelspieler und Mehrspieler), mehrsprachige Benutzerf\u00fchrung (Deutsch, Englisch, Franz\u00f6sisch) und eine kinderfreundliche Benutzeroberfl\u00e4che mit einem animierten Pinguin-Maskottchen, das verschiedene Gesichtsausdr\u00fccke zeigen und seinen Gesundheitszustand in sechs Stufen (EXCELLENT, GOOD, OKAY, STRUGGLING, CRITICAL und DEAD) mit entsprechenden Sprites darstellen kann.</p> <p>Dazu z\u00e4hlen insbesondere:</p> <ul> <li>Gesch\u00e4ftsziele: Sensibilisierung der jungen Zielgruppe f\u00fcr Nachhaltigkeit und Reduktion von Lebensmittelverschwendung, Unterst\u00fctzung von Bildungsmassnahmen und Demonstration innovativer, nachhaltiger Technologien.</li> <li>Wesentliche Aufgabenstellungen: Realisierung eines interaktiven, gamifizierten K\u00fchlschranks, der den Zustand von Lebensmitteln erfasst, Warnmeldungen bei un\u00f6kologischen Produkten aussendet und Rezeptvorschl\u00e4ge unterbreitet.<ul> <li>[HOCH] Barcode-basiertes Foodmanagement zur Erfassung und Inventarisierung von Produkten</li> <li>[HOCH] Gamifizierte Nutzererfahrung durch Einzelspieler- und Mehrspielermodi (wobei der Mehrspielermodus vollst\u00e4ndig implementiert ist mit einem Spieler f\u00fcr das Scannen von Produkten und einem zweiten Spieler f\u00fcr die Rezeptauswahl)</li> <li>[MITTEL] Empfehlung passender Rezepte basierend auf verf\u00fcgbaren Zutaten</li> <li>[HOCH] \u00dcberwachung des Gesundheitszustands des Pinguin-Maskottchens in Abh\u00e4ngigkeit vom Umgang mit Lebensmitteln</li> <li>[MITTEL] Mehrsprachigkeit (DE, EN, FR) f\u00fcr eine intuitive, kindgerechte Bedienung</li> <li>[NIEDRIG] Automatische Erkennung und Anpassung an verschiedene Bildschirmkonfigurationen</li> </ul> </li> <li>Qualit\u00e4tsziele f\u00fcr die Architektur: Hohe Usability, Robustheit, Wartbarkeit, Modifizierbarkeit und Attraktivit\u00e4t durch eine ansprechende, visuelle Gestaltung (inklusive Maskottchen) sowie eine klare, intuitive Interaktion.</li> <li>Relevante Stakeholder: Kinder als prim\u00e4re Nutzer, Mitarbeiter von Primeo, Lehrkr\u00e4fte und Eltern als sekund\u00e4re Nutzer, der Product Owner sowie weitere Projektbeteiligte und -beauftragte.</li> </ul>"},{"location":"SAD/01_introduction_and_goals/#aufgabenstellung","title":"Aufgabenstellung","text":"<p>Fridgely ist ein interaktiver Mock-Smart-K\u00fchlschrank, der speziell entwickelt wurde, um Kinder auf spielerische Weise f\u00fcr den nachhaltigen Umgang mit Lebensmitteln zu sensibilisieren und Lebensmittelverschwendung zu reduzieren. Das System erfasst automatisch Produkte \u00fcber Barcode-Scanning, \u00fcberwacht deren Haltbarkeit und bietet proaktive Rezeptvorschl\u00e4ge, sodass Kinder lernen, Lebensmittel effizient zu verwalten. Die fachliche Aufgabenstellung umfasst die Umsetzung einer robusten, benutzerfreundlichen und interaktiven L\u00f6sung, die mit einem begrenzten Budget (CHF 200.- f\u00fcr die K\u00fchlschrankattrappe aus Holz) realisiert werden muss.</p> <p>Der Beweggrund f\u00fcr die Entwicklung von Fridgely liegt in der Notwendigkeit, jungen Menschen ein Bewusstsein f\u00fcr Lebensmittelverschwendung und nachhaltigen Konsum zu vermitteln. Durch eine interaktive Lernumgebung, in der Hardware und Software kombiniert werden, wird ein praktischer und spielerischer Zugang zu diesen Themen erm\u00f6glicht.</p> <p>Die Architektur und das Design sind darauf ausgerichtet, eine intuitive Bedienung \u00fcber den Touch-Display und dem Barcode-Scanner zu gew\u00e4hrleisten, wobei die modulare Anbindung von Hardwarekomponenten (USB-Barcode-Scanner, Dual-Displays mit unterschiedlichen Aufl\u00f6sungen: 1024x600 und 1920x1080) zentrale Anforderungen darstellt. Die Anwendungsarchitektur folgt dem MVC-Pattern mit klarer Trennung von Model (Produkte, Rezepte, Lagerbestand, Pinguin-Zust\u00e4nde), View (Swing-basierte UI-Komponenten) und Controller (Spiellogik, Benutzerinteraktion). Der Observer-Pattern wird f\u00fcr die Kommunikation zwischen Komponenten verwendet, insbesondere f\u00fcr die Lokalisierung und Statusaktualisierungen.</p> <p>Technisch wird die Anwendung mit Spring Boot realisiert, wobei folgende Komponenten zum Einsatz kommen:</p> <ul> <li>Component-basierte Dependency Injection f\u00fcr Serviceklassen und Controller</li> <li>JPA mit Repository-Pattern f\u00fcr die Datenpersistenz (SQLite-Datenbank)</li> <li>Swing f\u00fcr die UI-Komponenten mit MVC-Pattern </li> <li>PropertyChangeSupport f\u00fcr Observer-Pattern-Implementierung</li> <li>Mehrschichtige Architektur mit Service-Layern und Repository-Interfaces</li> <li>Vollst\u00e4ndige Implementierung des Mehrspielermodus mit spezialisierten Launchern, Controllern und Views f\u00fcr die beiden Spielerrollen (MultiplayerPlayer1Controller f\u00fcr den Scanvorgang und MultiplayerPlayer2Controller f\u00fcr die Rezeptauswahl)</li> <li>Implementierung eines State-Pattern im MultiplayerGameStateModel f\u00fcr die Verwaltung der Spielphasen und Zustands\u00fcberg\u00e4nge</li> </ul>"},{"location":"SAD/01_introduction_and_goals/#qualitatsziele","title":"Qualit\u00e4tsziele","text":"<pre><code>flowchart TD\n    A[Fridgely System] --&gt;|Barcode Scanning| B[Food Management]\n    A --&gt;|Interactive Modes| C[Gamified Experience]\n    A --&gt;|Recipe Suggestions| D[Efficient Food Usage]\n    A --&gt;|Multilingual Support| E[\"Child-Friendly UI\"]\n    A --&gt;|Hardware Integration| F[\"USB Barcode Scanner, Dual Displays, Raspberry Pi\"]\n    A --&gt;|Budget Constraint| G[\"CHF 200.- Wooden Mock Fridge\"]\n\n    subgraph Goals\n        H[Reduce Food Waste]\n        I[Educate Children on Sustainability]\n        J[Demonstrate Innovative Technology]\n    end\n\n    subgraph Quality Attributes\n        K[Usability]\n        L[Robustness]\n        M[Maintainability]\n        N[Attractiveness]\n    end\n\n    B --&gt; H\n    C --&gt; I\n    D --&gt; H\n    E --&gt; I\n    F --&gt; J\n    G --&gt; J\n\n    H --&gt; K\n    I --&gt; N\n    J --&gt; L\n    J --&gt; M</code></pre> <p>Die Top-Qualit\u00e4tsanforderungen f\u00fcr die Architektur von Fridgely sind:</p> <ul> <li>Usability: Das System muss intuitiv und selbsterkl\u00e4rend bedienbar sein, um Kindern ohne ausf\u00fchrliche Erkl\u00e4rungen einen einfachen Zugang zu bieten.</li> <li>Robustheit und Zuverl\u00e4ssigkeit: Der K\u00fchlschrank soll auch bei intensiver Nutzung durch Kinder stabil arbeiten, ohne Verz\u00f6gerungen oder Systemausf\u00e4lle. Dies beinhaltet auch die automatische Erkennung und Anpassung an verschiedene Display-Konfigurationen, mit Fallback-Optionen f\u00fcr Single-Display-Setups.</li> <li>Wartbarkeit und Modifizierbarkeit: Die Architektur muss eine einfache Fehlersuche und Wartung (z.B. \u00fcber SSH-Zugriff auf den Raspberry Pi) erm\u00f6glichen sowie zuk\u00fcnftige Erweiterungen (z.B. zus\u00e4tzliche Sensoren oder Funktionalit\u00e4ten) unterst\u00fctzen.</li> <li>Attraktivit\u00e4t: Eine ansprechende, kinderfreundliche Benutzeroberfl\u00e4che mit visuellen Elementen (z. B. unserem Pinguin-Maskottchen mit verschiedenen Emotionen) f\u00f6rdert die Motivation und Interaktion.</li> </ul> <p>Die Einhaltung dieser Qualit\u00e4tsziele ist massgeblich, um die Akzeptanz und Effektivit\u00e4t des Systems bei den jungen Nutzern sowie bei den betreuenden Lehrkr\u00e4ften und Eltern sicherzustellen.</p> Qualit\u00e4tsziel Szenario / Massnahme Usability Intuitive Bedienung \u00fcber Touch-Display, klare visuelle R\u00fcckmeldungen (z. B. Maskottchen) Robustheit Stabiler Betrieb auch bei hoher Interaktionsfrequenz, zuverl\u00e4ssige Barcode-Erfassung und Echtzeitverarbeitung, automatische Erkennung und Anpassung an die verf\u00fcgbaren Displays (ein Display mit 1024x600 Aufl\u00f6sung f\u00fcr die Bedienung und ein zweites Display mit 1920x1080 Aufl\u00f6sung f\u00fcr die Lageranzeige) \u00fcber die GraphicsEnvironment und GraphicsDevice API von Java mit integrierter Fallback-Logik f\u00fcr Single-Display-Setups Wartbarkeit Einfache Debugging-M\u00f6glichkeiten und modularer Aufbau mit Spring Boot Dependency Injection, klar getrennte MVC-Architektur und Observer-Pattern (PropertyChangeSupport) f\u00fcr die Kommunikation zwischen Komponenten, um Wartungsarbeiten und zuk\u00fcnftige Erweiterungen zu erleichtern Attractiveness Ansprechendes, kindgerechtes Design mit animiertem Pinguin-Maskottchen, das verschiedene Gesichtsausdr\u00fccke zeigen und seinen Gesundheitszustand anzeigen kann (sechs definierte Zust\u00e4nde: EXCELLENT, GOOD, OKAY, STRUGGLING, CRITICAL und DEAD mit passenden Sprites wie Pinguin auf grossem Eisblock, Pinguin auf schrumpfendem Eis, schwimmender Pinguin, brennender Pinguin und verstorbener Pinguin), was Lernmotivation und nachhaltiges Verhalten visuell unterst\u00fctzt"},{"location":"SAD/01_introduction_and_goals/#stakeholder","title":"Stakeholder","text":"<p>Die folgenden Stakeholder sind f\u00fcr die Architektur und Entwicklung von Fridgely relevant:</p> Rolle Kontakt Erwartungshaltung Einfluss und Relevanz Kinder (Prim\u00e4re Nutzer) - Eine intuitive, spielerische und interaktive Bedienung, die das Lernen \u00fcber Lebensmittelmanagement unterst\u00fctzt. Hoch: Als prim\u00e4re Zielgruppe bestimmen ihre Bed\u00fcrfnisse und F\u00e4higkeiten massgeblich die Usability-Anforderungen und das Interaktionsdesign. Lehrkr\u00e4fte / Eltern (Sekund\u00e4re Nutzer) - Ein System, das den Kindern nachhaltigen Umgang mit Lebensmitteln vermittelt und dabei einfach zu bedienen ist. Mittel: Unterst\u00fctzen die Nutzung und m\u00fcssen das System verstehen, um es zu erkl\u00e4ren; beeinflussen p\u00e4dagogische Aspekte. Product Owner Elif G\u00fcrcinar Umsetzung eines innovativen, edukativen Produkts, das den \u00f6kologischen und p\u00e4dagogischen Anforderungen entspricht. Hoch: Trifft zentrale Produktentscheidungen und ist verantwortlich f\u00fcr die Erf\u00fcllung der \u00fcbergeordneten Projektziele. Primeo Energie AG (Auftraggeber) Eugen Leu Entwicklung eines robusten und ansprechenden Demonstrationsobjekts, das Nachhaltigkeit und Energieeffizienz vermittelt. Hoch: Als Finanzier des Projekts haben ihre strategischen Ziele hohen Einfluss auf die Ausrichtung und Priorisierung der Funktionalit\u00e4ten. FHNW (Projektbegleitung) Prof. Stefan Vetter Sicherstellung akademischer Standards und didaktischer Qualit\u00e4t. Mittel: Bietet fachliche Beratung und stellt Ressourcen bereit; beeinflusst methodischen Ansatz. Entwicklungsteam Team Fridgely Technisch realisierbare, wartbare und testbare Umsetzung der Anforderungen innerhalb der gegebenen Rahmenbedingungen. Hoch: Direkt verantwortlich f\u00fcr die technische Umsetzung und Qualit\u00e4t des Produkts."},{"location":"SAD/01_introduction_and_goals/#treibende-faktoren","title":"Treibende Faktoren","text":"<p>Die Entwicklung von Fridgely wird durch folgende zentrale Faktoren angetrieben:</p> <ol> <li> <p>Gesellschaftliche Relevanz: Lebensmittelverschwendung ist ein globales Problem mit erheblichen \u00f6kologischen und wirtschaftlichen Folgen. Durch fr\u00fche Bewusstseinsbildung bei Kindern kann langfristig ein nachhaltigerer Umgang mit Lebensmitteln gef\u00f6rdert werden.</p> </li> <li> <p>P\u00e4dagogischer Nutzen: Die spielerische Vermittlung wichtiger Nachhaltigkeitskonzepte durch interaktive Technologie entspricht modernen p\u00e4dagogischen Ans\u00e4tzen und f\u00f6rdert nachhaltiges Handeln durch positive Verst\u00e4rkung anstatt durch reine Wissensvermittlung.</p> </li> <li> <p>Technologische Innovation: Die Kombination von Hardware (Barcode-Scanner, Dual-Display-Setup) und Software (intelligente Rezeptvorschl\u00e4ge, Gamification) schafft ein einzigartiges Lernger\u00e4t, das sowohl technisch anspruchsvoll als auch benutzerfreundlich ist.</p> </li> <li> <p>Wirtschaftliche Faktoren: Mit einem begrenzten Budget (CHF 200.- f\u00fcr die K\u00fchlschrankattrappe) muss eine robuste, attraktive L\u00f6sung entwickelt werden, die sowohl technisch funktional als auch optisch ansprechend ist.</p> </li> </ol> <p>Die Qualit\u00e4tsziele wurden direkt aus diesen treibenden Faktoren abgeleitet, um sicherzustellen, dass das System seinen p\u00e4dagogischen Zweck erf\u00fcllt und gleichzeitig technisch robust und attraktiv f\u00fcr die junge Zielgruppe ist.</p>"},{"location":"SAD/02_architecture_constraints/","title":"2. Randbedingungen","text":"<p>Diese Randbedingungen definieren die technischen, organisatorischen und konzeptionellen Einschr\u00e4nkungen, die f\u00fcr die Umsetzung des Fridgely-Systems zu ber\u00fccksichtigen sind. Die folgenden Vorgaben gelten:</p>"},{"location":"SAD/02_architecture_constraints/#21-technische-randbedingungen","title":"2.1 Technische Randbedingungen","text":""},{"location":"SAD/02_architecture_constraints/#hardware-rahmenbedingungen","title":"Hardware-Rahmenbedingungen","text":"<p>Das System l\u00e4uft auf einem Raspberry Pi mit folgenden Spezifikationen:</p> <ul> <li>Broadcom BCM2712 2.4GHz Quad-Core 64-bit Arm Cortex-A76 CPU mit kryptografischen Erweiterungen</li> <li>512KB L2-Cache pro Kern und 2MB gemeinsamer L3-Cache</li> <li>VideoCore VII GPU (unterst\u00fctzt OpenGL ES 3.1 und Vulkan 1.2)</li> <li>Dualer 4Kp60 HDMI\u00ae-Displayausgang mit HDR-Unterst\u00fctzung</li> <li>4Kp60 HEVC-Decoder</li> <li>LPDDR4X-4267 SDRAM (2GB)</li> <li>Dual-Band 802.11ac Wi-Fi\u00ae, Bluetooth 5.0 / BLE</li> <li>microSD-Kartensteckplatz (SDR104-Modus)</li> <li>2 \u00d7 USB 3.0 Ports, 2 \u00d7 USB 2.0 Ports</li> <li>Gigabit Ethernet mit PoE+-Unterst\u00fctzung (PoE+ HAT erforderlich)</li> <li>2 \u00d7 4-lane MIPI Kamera-/Display-Schnittstellen</li> <li>PCIe 2.0 x1 Schnittstelle (separater M.2 HAT oder Adapter erforderlich)</li> <li>Stromversorgung: 5V/5A DC \u00fcber USB-C mit Power Delivery-Unterst\u00fctzung</li> <li>Raspberry Pi Standard 40-Pin Header, Echtzeituhr (RTC) mit externer Batterie und Power-Taste</li> </ul> <p></p>"},{"location":"SAD/02_architecture_constraints/#betriebssystem-und-softwareumgebung","title":"Betriebssystem und Softwareumgebung","text":"<ul> <li>Betriebssystem: Raspberry Pi OS mit Desktop (64-bit) <ul> <li>Kernel-Version: 6.6, Debian-Version: 12 (Bookworm), Release-Datum: November 19, 2024</li> <li>Image-Gr\u00f6sse: 1,179 MB</li> </ul> </li> <li>Java-Umgebung: Java Version 21 (basierend auf Maven-Konfigurationen)</li> <li>Verwendete Frameworks, Bibliotheken und Tools:<ul> <li>Spring Boot 3.4.5 als Anwendungsframework mit Dependency Injection</li> <li>Spring Data JPA f\u00fcr Datenbankzugriff </li> <li>Java Swing f\u00fcr die Benutzeroberfl\u00e4che</li> <li>JPA/Hibernate 6.6.11 f\u00fcr ORM (Object-Relational Mapping)</li> <li>SQLite 3.49.1 als eingebettete Datenbank</li> <li>Keine weiteren UI-Framework-Abh\u00e4ngigkeiten (rein Swing-basierte Implementierung)</li> <li>Keine Text-to-Speech oder Speech-to-Text Komponenten in der aktuellen Implementierung</li> <li>Testframework: JUnit 5 mit Mockito 5.17.0</li> <li>Build Tools: Maven</li> </ul> </li> </ul>"},{"location":"SAD/02_architecture_constraints/#grafische-darstellung","title":"Grafische Darstellung","text":"<p>F\u00fcr grafische Angelegenheiten wird die JavaSwing Library verwendet werden.</p>"},{"location":"SAD/02_architecture_constraints/#22-organisatorische-randbedingungen","title":"2.2 Organisatorische Randbedingungen","text":""},{"location":"SAD/02_architecture_constraints/#projektorganisation","title":"Projektorganisation","text":"<ul> <li>Entwicklungsteam: Studierendenteam der FHNW (IP12 Projekt)</li> <li>Stakeholder: FHNW &amp; Primeo</li> <li>Entwicklungsmethodik: Agile Entwicklung mit regul\u00e4ren Sprints</li> <li>Dokumentationsanforderungen: Erstellung und Pflege der technischen Dokumentation nach arc42-Standard</li> </ul>"},{"location":"SAD/02_architecture_constraints/#zeit-und-ressourcenbeschrankungen","title":"Zeit- und Ressourcenbeschr\u00e4nkungen","text":"<ul> <li>Projektlaufzeit: Beschr\u00e4nkt auf die Dauer des IP12-Moduls</li> <li>Personalressourcen: Begrenzt auf das zugewiesene Studierendenteam</li> <li>Budget: Eingegrenzt auf die f\u00fcr Lehrzwecke verf\u00fcgbaren Mittel (CHF 200)</li> </ul>"},{"location":"SAD/02_architecture_constraints/#23-konventionen","title":"2.3 Konventionen","text":""},{"location":"SAD/02_architecture_constraints/#entwicklungskonventionen","title":"Entwicklungskonventionen","text":"<ul> <li>Coderichtlinien: Java Code Conventions</li> <li>Namenskonventionen: CamelCase f\u00fcr Klassen, Methoden und Variablen</li> <li>Commit-Richtlinien: Aussagekr\u00e4ftige Commit-Nachrichten mit Bezug zu Tasks</li> <li>Versionskontrolle: Git mit GitLab</li> </ul>"},{"location":"SAD/02_architecture_constraints/#dokumentationskonventionen","title":"Dokumentationskonventionen","text":"<ul> <li>Architekturendokumentation: Nach arc42-Template</li> <li>Code-Kommentierung: JavaDoc</li> <li>Sprache: Deutsche Dokumentation, englischer Code und Kommentare</li> </ul>"},{"location":"SAD/02_architecture_constraints/#24-betriebsbedingungen","title":"2.4 Betriebsbedingungen","text":""},{"location":"SAD/02_architecture_constraints/#einsatzszenario","title":"Einsatzszenario","text":"<p>Das System ist f\u00fcr den Betrieb durch jeweils einen oder zwei Benutzer optimiert (on-premises Nutzung).</p> <p>Das Fridgely-System muss in einem stabilen, trockenen und staubfreien Umfeld betrieben werden, um eine optimale Leistung zu gew\u00e4hrleisten. Die Umgebungstemperatur sollte zwischen 10 \u00b0C und 40 \u00b0C liegen, und die relative Luftfeuchtigkeit sollte 10 % bis 90 % betragen (nicht kondensierend).</p> <p>Anzumerken ist, dass die Hardware so konzipiert wurde, dass sie den Anforderungen der Schutzart IP20 entspricht, was bedeutet, dass sie gegen Ber\u00fchrung mit festen Fremdk\u00f6rpern gr\u00f6sser als 12 mm gesch\u00fctzt ist, jedoch nicht gegen Wasser oder Staub. Daher sollte das System nicht in feuchten oder staubigen Umgebungen eingesetzt werden.</p> <ul> <li>Temperatur: 10 \u00b0C bis 40 \u00b0C</li> <li>Luftfeuchtigkeit: 10 % bis 90 % (nicht kondensierend)</li> <li>Betriebsumgebung: Stabil, trocken und staubfrei</li> <li>Schutzart: IP20 (gesch\u00fctzt gegen Ber\u00fchrung mit festen Fremdk\u00f6rpern &gt; 12 mm, nicht gegen Wasser oder Staub)</li> <li>Betriebsart: On-Premises (lokal)</li> <li>Benutzeranzahl: 1 oder 2 Benutzer gleichzeitig</li> <li>Vorgesehene m\u00f6gliche Einsatzorte: Prim\u00e4r in Bildungseinrichtungen, wie Schulen oder \u00e4hnlichen Umgebungen</li> </ul>"},{"location":"SAD/02_architecture_constraints/#zuverlassigkeit","title":"Zuverl\u00e4ssigkeit","text":"<p>Bei korrekter Konfiguration ist die Fehlerrate nahezu null, wobei Hardwarefehler nicht ausgeschlossen werden k\u00f6nnen.</p> <p>Die Zuverl\u00e4ssigkeit des Systems wird durch die Verwendung von bew\u00e4hrten Komponenten und Technologien gew\u00e4hrleistet. Die Softwarearchitektur ist so konzipiert, dass sie eine hohe Verf\u00fcgbarkeit und Stabilit\u00e4t bietet, auch bei intensiver Nutzung durch Kinder. Regelm\u00e4ssige Wartungen sind erforderlich, um die langfristige Zuverl\u00e4ssigkeit der Hardware sicherzustellen.</p> <p>Hier gilt insbesondere, dass regelm\u00e4ssige Hardware Checks stattfinden m\u00fcssen, um sicherzustellen, dass alle Komponenten ordnungsgem\u00e4ss funktionieren. Dazu geh\u00f6ren:</p> <ul> <li>\u00dcberpr\u00fcfung der Stromversorgung und sonstige Besch\u00e4digungen an Strom- sowie Datenkabeln</li> <li>\u00dcberpr\u00fcfung des Geh\u00e4uses/K\u00fchlschrankmodells auf physische Sch\u00e4den</li> <li>\u00dcberpr\u00fcfung der folgenden Sensoren:<ul> <li>Barcode-Scanner</li> <li>Touch-Display (Interaktions Display; klein)</li> <li>Display (gross)</li> <li>Lautsprecher</li> <li>Schalter</li> </ul> </li> </ul>"},{"location":"SAD/02_architecture_constraints/#testabdeckung","title":"Testabdeckung","text":""},{"location":"SAD/02_architecture_constraints/#software","title":"Software","text":"<p>Die Programmlogik wird durch JUnit Tests abgesichert. Die Testabdeckung wird durch den Einsatz von JaCoCo gemessen. Die Zielvorgabe f\u00fcr die Testabdeckung liegt bei 80 %. Die Tests werden in der CI/CD-Pipeline ausgef\u00fchrt, um sicherzustellen, dass alle neuen Funktionen und \u00c4nderungen an der Software ausreichend getestet werden.</p> <p>Aktuelle Testabdeckung nach Modulen (Stand: Oktober 2025):</p> Modul/Paket Testabdeckung Kommentar Model (ch.primeo.fridgely.model) 100% Vollst\u00e4ndige Abdeckung der Datenmodelle und Entit\u00e4ten Controller Multiplayer (ch.primeo.fridgely.controller.multiplayer) 100% Vollst\u00e4ndige Tests f\u00fcr Multiplayer-Funktionalit\u00e4t Service (ch.primeo.fridgely.service) 100% Vollst\u00e4ndige Abdeckung der Gesch\u00e4ftslogik Controller (ch.primeo.fridgely.controller) 100% Umfassende Tests aller Controller-Klassen implementiert Util (ch.primeo.fridgely.util) 100% Hilfsfunktionen vollst\u00e4ndig abgesichert Model Multiplayer (ch.primeo.fridgely.model.multiplayer) 100% Multiplayer-Datenmodelle vollst\u00e4ndig getestet Gamelaunchers (ch.primeo.fridgely.gamelaunchers) 100% Spielstartlogik vollst\u00e4ndig abgedeckt Config (ch.primeo.fridgely.config) 100% Konfigurationsklassen vollst\u00e4ndig getestet Service Localization (ch.primeo.fridgely.service.localization) 100% Lokalisierungsservices vollst\u00e4ndig abgedeckt View (ch.primeo.fridgely.view) Ausgeschlossen UI-Komponenten von Testabdeckungsmessung ausgenommen Gesamtabdeckung 100% Ziel von 80% deutlich \u00fcbertroffen <p>Die Testabdeckungsmessung erfolgt automatisch im CI/CD-Prozess bei jedem Push in den Hauptbranch. Der JaCoCo-Report wird als Teil der Pipeline generiert und ist f\u00fcr das Entwicklungsteam im GitLab-Repository verf\u00fcgbar. Die hervorragende Testabdeckung von 100% in allen Modulen gew\u00e4hrleistet eine aussergew\u00f6hnlich robuste Anwendung mit minimiertem Risiko f\u00fcr unentdeckte Fehler.</p> <p>Wenn das System neue Anforderungen der Zielgruppe erf\u00fcllen soll, k\u00f6nnen zus\u00e4tzlich zu den automatisierten Tests manuelle Tests durchgef\u00fchrt werden, um die Benutzerfreundlichkeit und Interaktivit\u00e4t des Systems zu \u00fcberpr\u00fcfen. Diese UX-Tests sollten umfassen: - Benutzerstudien und Feedback von Kindern zur Usability und Benutzerfreundlichkeit des Systems - Tests der Interaktion mit den verschiedenen Eingabeger\u00e4ten (Touch-Display, Barcode-Scanner) - \u00dcberpr\u00fcfung der visuellen und akustischen R\u00fcckmeldungen des Systems</p>"},{"location":"SAD/02_architecture_constraints/#hardware","title":"Hardware","text":"<p>Die Testabdeckung der Hardware erfolgt durch die \u00dcberpr\u00fcfung der Funktionalit\u00e4t aller Komponenten. Dazu geh\u00f6ren:</p> <ul> <li>\u00dcberpr\u00fcfung der Barcode-Scanner-Funktionalit\u00e4t</li> <li>\u00dcberpr\u00fcfung des Touch-Displays auf Reaktionsf\u00e4higkeit und Genauigkeit</li> <li>\u00dcberpr\u00fcfung des Lautsprechers auf Klangqualit\u00e4t und Lautst\u00e4rke</li> <li>\u00dcberpr\u00fcfung des Displays auf Helligkeit und Lesbarkeit</li> </ul>"},{"location":"SAD/02_architecture_constraints/#normen-und-standards","title":"Normen und Standards","text":"<p>Die Softwarequalit\u00e4t orientiert sich an den Vorgaben des ISO 25010 Standards.</p>"},{"location":"SAD/03_system_scope_and_context/","title":"3. Kontextabgrenzung","text":"<p>Das Fridgely-System ist ein eigenst\u00e4ndiges, interaktives Lernger\u00e4t, das als Mock-Smart-K\u00fchlschrank konzipiert wurde. Es interagiert mit den Nutzern (haupts\u00e4chlich Kindern) \u00fcber mehrere Eingabeger\u00e4te (Touch-Display, Barcode-Scanner) und liefert Ausgaben \u00fcber visuelle und akustische R\u00fcckmeldungen. Die externe Kommunikation beschr\u00e4nkt sich auf den Zugriff zur Wartung \u00fcber SSH. Alle weiteren Funktionen und Datenverarbeitungen erfolgen lokal auf dem System (Raspberry Pi).</p> <p>Differenziert wird zwischen:</p> <ul> <li>Fachlichen Schnittstellen: Benutzerinteraktionen und Informationsaustausch im Rahmen der Lebensmittelverwaltung, Rezeptvorschl\u00e4gen und Warnungen bei un\u00f6kologischen Produkten.</li> <li>Technischen Schnittstellen: Physikalische und logische Verbindungen, die \u00fcber USB, HDMI, GPIO, Audio und Netzwerk (f\u00fcr SSH) realisiert werden.</li> </ul> <p>Die exakte Abgrenzung des Systems ist entscheidend, um Verantwortlichkeiten, Schnittstellen und Kommunikationskan\u00e4le klar zu definieren. Dies erm\u00f6glicht einen reibungslosen Betrieb, Wartung und Erweiterung des Systems.</p>"},{"location":"SAD/03_system_scope_and_context/#fachlicher-kontext","title":"Fachlicher Kontext","text":"<p>Das Fridgely-System agiert als zentrale Schnittstelle zwischen dem Nutzer und der Verwaltung von Lebensmitteln. Folgende Kommunikationsbeziehungen bestehen:</p> Kommunikationsbeziehung Eingabe Ausgabe Benutzer (Kind) Ber\u00fchrung am Touch-Display, Barcode-Scans Visuelle Darstellung (Inventarliste, Maskottchen-Animation), systeminterne Benachrichtigungen Wartungspersonal SSH-Schnittstelle (Fernwartung und Debugging) Systemstatus und Log-Daten <p>Alle fachlichen Schnittstellen stellen sicher, dass das System den Nutzer in einer intuitiven und interaktiven Weise unterst\u00fctzt und gleichzeitig externe Wartungszugriffe erm\u00f6glicht.</p>"},{"location":"SAD/03_system_scope_and_context/#technischer-kontext","title":"Technischer Kontext","text":"<p>Die technischen Schnittstellen des Fridgely-Systems verbinden die Hardwarekomponenten und erm\u00f6glichen die fachliche Kommunikation. Wichtige technische Aspekte sind:</p> <p>Raspberry Pi Hardware:</p> <ul> <li>Verbindungsports: USB (f\u00fcr Barcode-Scanner, Lautsprecher), HDMI/Touchscreen-Anschluss, GPIO (f\u00fcr physische Schalter)</li> <li>Netzwerkzugang: Gigabit Ethernet/802.11ac Wi-Fi f\u00fcr SSH-Zugriff und mobile Benachrichtigungen</li> </ul> <p>Audio/Video:</p> <ul> <li>Audioausgang (Lautsprecher) \u00fcber USB</li> <li>Touch-Display \u00fcber HDMI (mit integriertem Touchscreen-Controller)</li> <li>Display (gross) \u00fcber HDMI</li> <li>Multi-Screen-Unterst\u00fctzung f\u00fcr Haupt-UI und Scanned-Items-Ansicht</li> </ul> <p>Externe Kommunikation:</p> <ul> <li>Fernwartung \u00fcber SSH-Zugang auf den Raspberry Pi</li> </ul>"},{"location":"SAD/03_system_scope_and_context/#schnittstellen-spezifikationen","title":"Schnittstellen-Spezifikationen","text":"Schnittstelle Protokoll/Format Datenaustausch Sicherheit Barcode-Scanner USB HID (Human Interface Device) Eindimensionale und zweidimensionale Barcodes im EAN-13, QR-Code, und weiteren Formaten Keine spezielle Verschl\u00fcsselung, physischer Zugriff notwendig Touch-Display HDMI f\u00fcr Video, USB f\u00fcr Touch-Eingaben Pixel-Daten (1920x1080), Touch-Events (x/y-Koordinaten) Keine spezielle Verschl\u00fcsselung, physischer Zugriff notwendig SSH-Zugang SSH v2 \u00fcber TCP/IP Kommandozeilen-Befehle, Datei\u00fcbertragung (SCP) \u00d6ffentlicher Schl\u00fcssel (RSA/ED25519), keine Passwort-Authentifizierung Datenbank JPA/Hibernate \u00fcber SQLite Entity-Objekte \u2194 Relationale Daten Lokale Datei, kein Netzwerkzugriff <p>Zur Veranschaulichung der technischen Zusammenh\u00e4nge wird ein Deployment-Diagramm (Technical-Context-View Diagramm) bereitgestellt:</p> <p>Hardware Architecture (Fridgely System)</p> <pre><code>graph TB\n  RPI[Raspberry Pi 5]\n\n  RPI --&gt;|Micro-HDMI| TD[Touchscreen Display]\n  RPI --&gt;|Micro-HDMI| LD[Grosses Display / K\u00fchlschrankansicht]\n  RPI --&gt;|USB| BS[Barcode-Scanner]\n  RPI --&gt;|USB| SPK[Lautsprecher]\n\n  WLAN[Wi-Fi / Ethernet] &lt;--&gt; RPI\n  ADMIN[Wartungspersonal] --&gt;|SSH| WLAN\n\n  %% User interactions from bottom\n  USER[Benutzer / Kind]\n   TD &lt;--&gt; USER\n   BS &lt;--&gt; USER\n</code></pre> <p>Software Architecture (Fridgely Anwendung)</p> <pre><code>graph TB\n  JAVA[Java VM]\n  SPRING[Spring Boot Framework]\n  APP[Fridgely Anwendung]\n  CTRL[Controller]\n  VIEW[Views]\n  MODEL[Models]\n  SERVICE[Services]\n  REPO[Repositories]\n  UTIL[Utilities]\n  GAME[Game Launchers]\n  DB[(H2/SQLite Datenbank)]\n\n  JAVA --&gt; SPRING\n  SPRING --&gt; APP\n  APP --&gt; CTRL\n  APP --&gt; VIEW\n  APP --&gt; MODEL\n  APP --&gt; SERVICE\n  SERVICE --&gt; REPO\n  APP --&gt; UTIL\n  APP --&gt; GAME\n  REPO --&gt; DB</code></pre> <p>F\u00fcr Wartungsarbeiten oder System\u00e4nderungen wird ein SSH-Zugang auf den Raspberry Pi eingerichtet.</p>"},{"location":"SAD/03_system_scope_and_context/#mapping-fachliche-auf-technische-schnittstellen","title":"Mapping fachliche auf technische Schnittstellen","text":"Priorit\u00e4t Fachliche Schnittstelle Technischer Kanal / Schnittstelle Datenfluss Fehlerbehandlung 1 Touch-Display Interaktion HDMI/Touchscreen-Anschluss am Raspberry Pi UI-Elemente \u2192 Touch-Events \u2192 Controller-Aktionen \u2192 Modell-Updates \u2192 UI-Refresh Timeout bei fehlenden Touch-Events, auto-reconnect bei Verbindungsverlust 2 Barcode-Scanner Eingabe USB-Anschluss (Barcode-Scanner Modul) Barcode \u2192 USB HID \u2192 Parser \u2192 Produktdatenbank-Abfrage \u2192 UI-Aktualisierung Fehlermeldung bei unbekanntem Barcode, Recovery-Mechanismus bei fehlerhaftem Scan 3 Mehrere Bildschirme f\u00fcr verschiedene Ansichten Dual HDMI-Ausgang des Raspberry Pi Haupt-UI auf Touch-Display, Scanned-Items auf grossem Display Automatische Erkennung bei Display-Wechsel, prim\u00e4re UI immer auf Touch-Display 4 Wartung und Debugging SSH-Zugang \u00fcber Ethernet/Wi-Fi Befehle \u2192 System \u2192 Logs/Responses zur\u00fcck an Admin Rate-Limiting gegen Brute-Force, schl\u00fcsselbasierte Authentifizierung <p>Datenformate: Spring Boot verwaltet die interne Kommunikation zwischen Komponenten. F\u00fcr die Datenpersistenz werden JPA-Entities verwendet, die \u00fcber Repositories in die Datenbank geschrieben werden. Die wichtigsten Entity-Typen umfassen:</p> <ul> <li><code>Product</code>: Repr\u00e4sentiert ein Lebensmittelprodukt mit Attributen wie Name, Barcode, N\u00e4hrwerte, CO2-Fussabdruck</li> <li><code>FridgeStock</code>: Repr\u00e4sentiert den aktuellen Bestand im K\u00fchlschrank mit Referenzen zu Produkten</li> <li><code>Recipe</code>: Beschreibt ein Rezept mit Zutaten (Referenzen zu Produkten) und Zubereitungsschritten</li> <li><code>GameState</code>: Speichert den Zustand der verschiedenen Lernspiel-Modi</li> </ul> <p>Externe Systeme: Externe Kommunikation ist prim\u00e4r auf SSH f\u00fcr Wartungszwecke beschr\u00e4nkt. Das System wurde als eigenst\u00e4ndige L\u00f6sung konzipiert, die ohne Online-Zugang funktioniert.</p>"},{"location":"SAD/03_system_scope_and_context/#benotigte-mittel-fur-anderungen-und-weiterentwicklungen-des-systems","title":"Ben\u00f6tigte Mittel f\u00fcr \u00c4nderungen und Weiterentwicklungen des Systems","text":"<p>Im Sinne einer langfristigen Wartbarkeit und Erweiterbarkeit wurden f\u00fcr das Fridgely-System ausschliesslich allgemein zug\u00e4ngliche Werkzeuge und Komponenten verwendet.</p>"},{"location":"SAD/03_system_scope_and_context/#software","title":"Software","text":"<p>Die grundlegenden Software-Tools f\u00fcr Entwicklung und Anpassungen sind:</p> <ul> <li>IntelliJ IDEA als prim\u00e4re Entwicklungsumgebung</li> <li>Git zur Versionskontrolle und Zusammenarbeit</li> <li>Java als Programmiersprache</li> <li>Maven f\u00fcr Build-Management und Dependency-Verwaltung</li> </ul> <p>Alle Konfigurationsdateien und Parameter wurden in externen Dateien abgelegt, um eine schnelle Anpassung ohne tiefgehende Code-\u00c4nderungen zu erm\u00f6glichen. Das System ist bewusst ohne Abh\u00e4ngigkeiten zu Drittplattformen gestaltet.</p>"},{"location":"SAD/03_system_scope_and_context/#hardware","title":"Hardware","text":"<p>Die grundlegenden Hardware-Komponenten des Systems sind:</p> <ul> <li>Raspberry Pi 5 als zentrale Recheneinheit</li> <li>Barcode-Scanner zur Produkterkennung</li> <li>Touchscreen-Display f\u00fcr die Benutzerinteraktion</li> <li>Lautsprecher f\u00fcr Audioausgaben</li> <li>Physische Schalter f\u00fcr die Steuerung</li> </ul> <p>Zus\u00e4tzlich wurden alle Hardware-Komponenten modular gestaltet, um eine schnelle Anpassung zu erm\u00f6glichen, ohne tiefgehende \u00c4nderungen an der Hardware vornehmen zu m\u00fcssen. Das System ist bewusst ohne Abh\u00e4ngigkeiten zu Drittplattformen gestaltet, um die Unabh\u00e4ngigkeit und Langlebigkeit des Produkts sicherzustellen.</p>"},{"location":"SAD/03_system_scope_and_context/#hardware-dokumentation","title":"Hardware-Dokumentation","text":"<p>F\u00fcr die Wartung und Weiterentwicklung des Systems stehen folgende technische Dokumente zur Verf\u00fcgung:</p> \ud83d\udcc4 Barcode-Scanner Anleitung <p>Bedienungsanleitung f\u00fcr den MCR12 Barcode-Scanner des Fridgely-Systems.</p> Herunterladen \ud83d\udcc4 Produkt-Karten <p>Produkt-Karten f\u00fcr das Fridgely-System.</p> Herunterladen"},{"location":"SAD/03_system_scope_and_context/#fridgely-holzbau","title":"Fridgely Holzbau","text":"<p>Das Fridgely-System wurde unter Einsatz verschiedener Maschinen aus der Holzwerkstatt der FHNW entwickelt, um eine einfache Wartung und Weiterentwicklung zu gew\u00e4hrleisten. Die Holzkonstruktion wurde in mehreren Schritten geplant, zugeschnitten und zusammengebaut. Dabei wurde besonders auf Stabilit\u00e4t, sichere Kabelf\u00fchrung und Zug\u00e4nglichkeit f\u00fcr Wartung und Einbau von Komponenten geachtet. Deshalb haben wir eine komplett entfernbare R\u00fcckwand eingebaut und 19mm dickes MDF verwendet. Das Gewicht f\u00e4llt damit etwas schwerer aus, aber sorgt zus\u00e4tzlich f\u00fcr die n\u00f6tige Standfestigkeit. Die Verbindungen zwischen den tragenden Platten haben wir mit Lamellos verleimt, was f\u00fcr zus\u00e4tzliche Stabilit\u00e4t sorgt.</p> <p>F\u00fcr den Aufbau sowie sp\u00e4tere Anpassungen kamen folgende grundlegende Werkzeuge und Materialien zum Einsatz:</p> <p>Werkzeuge</p> <ul> <li>Oberfr\u00e4se (Festool)</li> <li>Tauchs\u00e4ge (Festool)</li> <li>Schleifmaschine (Festool)</li> <li>Zimmermann-Hammer</li> <li>Kreuz-Schraubenzieher (PH2)</li> <li>Stechbeutel</li> <li>Akkubohrmaschine mit Bohraufsatz (2.5)</li> <li>Lamellomaschine</li> </ul> <p>Material</p> <ul> <li>MDF (19mm)</li> <li>MDF (12mm)</li> <li>MDF beschichtet (6mm)</li> <li>Holzleim</li> <li>Lamello</li> </ul>"},{"location":"SAD/04_solution_strategy/","title":"4. L\u00f6sungsstrategie","text":"<p>Die L\u00f6sungsstrategie f\u00fcr Fridgely basiert auf einer modularen, komponentenbasierten Architektur, die speziell f\u00fcr ein interaktives Lernger\u00e4t (Mock-Smart-K\u00fchlschrank) entwickelt wurde. Die zentralen Entscheidungen orientieren sich an den funktionalen Anforderungen, Qualit\u00e4tszielen und den technischen sowie organisatorischen Randbedingungen.</p>"},{"location":"SAD/04_solution_strategy/#technologieentscheidungen","title":"Technologieentscheidungen","text":"Komponente Technologie / Version Beschreibung Programmiersprache Java 21 Hauptsprache f\u00fcr die gesamte Anwendung Framework Spring Boot 3.1.x Application Framework mit Dependency Injection UI Java Swing Benutzeroberfl\u00e4che (Desktop UI) ORM Hibernate/JPA mit SQLite-Dialekt Objekt-Relationales Mapping Datenbank SQLite Eingebettete, lokale Datenbank Tests JUnit 5 Framework f\u00fcr automatisierte Tests Build / Deployment Maven Build-Management, Abh\u00e4ngigkeiten, Deployment"},{"location":"SAD/04_solution_strategy/#entscheidungskriterien","title":"Entscheidungskriterien","text":"<p>Bei der Auswahl der Technologien und Architekturmuster waren folgende Kriterien ausschlaggebend:</p> <ul> <li>Zielgruppe und Benutzerfreundlichkeit: Die Anforderungen der Zielgruppe (Kinder 7-13 Jahre) mit Fokus auf intuitive Benutzeroberfl\u00e4che und kindgerechte Interaktion</li> <li>Hardware-Beschr\u00e4nkungen: Optimierung f\u00fcr die Ausf\u00fchrung auf einem Raspberry Pi 5 mit begrenzten Ressourcen</li> <li>Wartbarkeit und Erweiterbarkeit: Strukturierung f\u00fcr einfache Erweiterungen und Anpassungen durch zuk\u00fcnftige Entwicklerteams</li> <li>Offline-Betrieb: Notwendigkeit eines autarken Betriebs ohne permanente Internetverbindung</li> <li>Entwicklungseffizienz: Nutzung etablierter Patterns und Frameworks zur Beschleunigung der Entwicklung</li> </ul>"},{"location":"SAD/04_solution_strategy/#architekturmuster-und-systemzerlegung","title":"Architekturmuster und Systemzerlegung","text":"<ul> <li>Spring Boot Architektur: Einsatz des Spring Boot Frameworks f\u00fcr eine einfache Konfiguration, Dependency Injection und Anwendungsmanagement.</li> <li>MVC Pattern: Strikte Trennung von Modellen (Entity-Klassen), Views (Swing UI) und Controllern (Spring Components) f\u00fcr verbesserte Wartbarkeit und Testbarkeit.</li> <li>Repository Pattern: Implementierung des Repository-Patterns mit Spring Data JPA f\u00fcr einen einheitlichen und abstrahierten Datenzugriff. Jedes Repository ist als Interface (z.B. <code>ProductRepository</code>) und entsprechende JPA-Implementierung (z.B. <code>ProductJpaRepository</code>) umgesetzt.</li> <li>Layered Architecture: Eine klassische Schichtenarchitektur mit:<ul> <li>Pr\u00e4sentationsschicht (Swing UI-Komponenten)</li> <li>Anwendungsschicht (Controller-Klassen und Services)</li> <li>Dom\u00e4nenschicht (Model-Klassen)</li> <li>Datenzugriffsschicht (Repository-Interfaces und -Implementierungen)</li> </ul> </li> <li>Observer Pattern: F\u00fcr Mehrsprachigkeitsunterst\u00fctzung (<code>AppLocalizationService</code> mit <code>LocalizationObserver</code>-Implementierungen) und UI-Update-Mechanismen \u00fcber PropertyChangeSupport/PropertyChangeListener</li> <li>Singleton Pattern: F\u00fcr zentral verwaltete Services (<code>ImageLoader</code>, <code>AppLocalizationService</code>) zur Ressourcenoptimierung</li> <li>Factory Pattern: F\u00fcr die Erstellung komplexer Objekte (z.B. die Game-Launcher-Komponenten wie <code>MultiplayerGameLauncher</code>, die f\u00fcr die Initialisierung und das Starten von Spielmodi verantwortlich sind)</li> <li>PropertyChangeListener Pattern: F\u00fcr den Datenaustausch zwischen Modellen und Views (z.B. <code>FridgeStockModel</code> mit <code>PropertyChangeSupport</code>)</li> <li>Hardware-Integration: Barcode-Scanner-Anbindung \u00fcber standardisierte Schnittstellen und Dual-Display-Management f\u00fcr optimale Benutzerf\u00fchrung</li> </ul> <pre><code>graph TD\n    %% Upper Application Layer\n    subgraph Anwendungsschicht - Services\n        IL[\"ImageLoader\"]\n        LS[\"AppLocalizationService\"]\n    end\n\n    %% Presentation Layer\n    subgraph Pr\u00e4sentationsschicht\n        UI[\"Swing UI-Komponenten\"]\n        UI_Fridge[\"ScannedItemsView\"]\n        UI_Dialogs[\"DialogBox\"]\n        UI_Custom[\"Custom Components (LanguageSwitchButton, etc.)\"]\n    end\n\n    %% Lower Application Layer - Controllers\n    subgraph Anwendungsschicht - Controller\n        MC[\"MultiplayerGameController\"]\n        GC[\"ChooseGameModeController\"]\n        MP1C[\"MultiplayerPlayer1Controller\"]\n        MP2C[\"MultiplayerPlayer2Controller\"]\n    end\n\n    %% Domain Layer\n    subgraph Dom\u00e4nenschicht\n        PM[\"Product Model\"]\n        RM[\"Recipe Model\"]\n        FRM[\"FridgeStockModel\"]\n        MGS[\"MultiplayerGameStateModel\"]\n    end\n\n    %% Data Access Layer\n    subgraph Datenzugriffsschicht\n        PR[\"ProductRepository\"]\n        RR[\"RecipeRepository\"]\n        FSR[\"FridgeStockRepository\"]\n        DB[(SQLite DB)]\n    end\n\n    %% Legend\n    subgraph Legende\n        S[\"Singleton Pattern\"]\n        O[\"Observer Pattern\"]\n        R[\"Repository Pattern\"]\n    end\n\n    IL --&gt; UI\n    IL --&gt; UI_Custom\n    LS --&gt; UI\n    LS --&gt; UI_Dialogs\n    LS --&gt; UI_Custom\n    UI --&gt; MC\n    UI --&gt; GC\n    UI_Fridge --&gt; MC\n\n    %% Controllers -&gt; Domain\n    MC --&gt; PM\n    MC --&gt; RM\n    MC --&gt; MGS\n    GC --&gt; MGS\n    MP1C --&gt; FRM\n    MP2C --&gt; FRM\n\n    %% Domain -&gt; Repositories\n    PM --&gt; PR\n    RM --&gt; RR\n    FRM --&gt; FSR\n\n    %% Repositories -&gt; DB\n    PR --&gt; DB\n    RR --&gt; DB\n    FSR --&gt; DB\n    classDef singleton fill:#950095,stroke:#333,stroke-width:2px;\n    classDef observer fill:#009595,stroke:#333,stroke-width:2px;\n    classDef repository fill:#959500,stroke:#333,stroke-width:2px;\n\n    class IL singleton;\n    class LS observer;\n    class PR,RR,FSR repository;\n    class S singleton;\n    class O observer;\n    class R repository;</code></pre>"},{"location":"SAD/04_solution_strategy/#erreichung-der-qualitatsanforderungen","title":"Erreichung der Qualit\u00e4tsanforderungen","text":"<ul> <li>Usability: Eine intuitive, kindgerechte Benutzeroberfl\u00e4che wird durch Swing und das ImageLoader-System realisiert, das optimierte grafische Komponenten vorab l\u00e4dt, um eine fl\u00fcssige Darstellung zu gew\u00e4hrleisten.</li> <li>Robustheit und Wartbarkeit: Der modulare Aufbau mit Spring Boot's Dependency Injection, das Repository-Pattern und die Verwendung standardisierter Schnittstellen erm\u00f6glichen eine einfache Wartung und Erweiterbarkeit. Die einheitliche Fehlerbehandlung erfolgt \u00fcber eine zentrale DialogBox-Klasse, die benutzerfreundliche Fehlermeldungen pr\u00e4sentiert.</li> <li>Datenpersistenz: Einsatz von Hibernate/JPA mit SQLite f\u00fcr eine zuverl\u00e4ssige und performante lokale Datenspeicherung bei gleichzeitig geringem Ressourcenverbrauch.</li> <li>Mehrsprachigkeit: Implementierung eines Observer-basierten Lokalisierungssystems (<code>AppLocalizationService</code>), das dynamisches Umschalten zwischen Sprachen ohne Neustart erm\u00f6glicht.</li> <li>Performance: Optimierung f\u00fcr den Betrieb auf einem Raspberry Pi 5 mit den vorgegebenen Hardware-Ressourcen, unter anderem durch Vorladung von Bildern mit dem <code>ImageLoader</code> und effiziente JPA-Repository-Implementierungen.</li> <li>Dual-Display-Konzept: Implementierung der <code>ScannedItemsView</code> mit <code>PropertyChangeListener</code>-Pattern f\u00fcr die nahtlose Koordination zwischen Hauptdisplay und K\u00fchlschrankansicht. Das System erkennt automatisch verf\u00fcgbare Displays beim Start und konfiguriert die beiden Ansichten f\u00fcr die spezifischen Bildschirmgr\u00f6ssen (1024x600 f\u00fcr die Hauptanwendung und 1920x1080 f\u00fcr die K\u00fchlschrankansicht).</li> <li>Hardware-Integration: Anbindung von Barcode-Scannern \u00fcber eine abstrakte Schnittstelle, die eine einfache Integration erm\u00f6glicht und die Austauschbarkeit der Hardware gew\u00e4hrleistet.</li> </ul>"},{"location":"SAD/04_solution_strategy/#ausrichtung-an-geschaftszielen","title":"Ausrichtung an Gesch\u00e4ftszielen","text":"<p>Die L\u00f6sungsstrategie von Fridgely unterst\u00fctzt folgende \u00fcbergeordnete Gesch\u00e4fts- und Bildungsziele:</p> <ul> <li>Edukativer Mehrwert: Die spielerische Vermittlung von Wissen \u00fcber gesunde Ern\u00e4hrung und nachhaltige Lebensmittel wird durch die intuitive Bedienung und das interaktive Spielkonzept unterst\u00fctzt.</li> <li>Nachhaltigkeit: Durch Verwendung quelloffener Technologien und Standardkomponenten wird eine langfristige Wartbarkeit und Erweiterbarkeit gew\u00e4hrleistet.</li> </ul>"},{"location":"SAD/04_solution_strategy/#organisatorische-entscheidungen","title":"Organisatorische Entscheidungen","text":"<ul> <li>Entwicklungsprozess: Agiler Entwicklungsansatz mit kurzen Feedback-Zyklen und kontinuierlicher Integration (CI/CD) \u00fcber GitLab-Pipeline.</li> <li>Deployment-Strategie: Automatisierte Bereitstellung auf dem Zielsystem (Raspberry Pi) \u00fcber SSH mit spezifischen Start- und Restart-Skripten.</li> <li>Tooling: Einsatz moderner Entwicklungswerkzeuge wie Maven f\u00fcr Build-Management, GitLab f\u00fcr Versionskontrolle und JUnit f\u00fcr Tests.</li> <li>Rollenverteilung: Klare Definition der Verantwortlichkeiten im Team (Projektmanager, Requirements Engineer, UX, Software Architekt, Developer, Testmanager) f\u00fcr einen reibungslosen Projektablauf.</li> <li>Projektdokumentation: Nutzung des arc42-Templates f\u00fcr eine strukturierte und umfassende Architekturdokumentation.</li> </ul>"},{"location":"SAD/04_solution_strategy/#qualitatssicherungsmassnahmen","title":"Qualit\u00e4tssicherungsmassnahmen","text":"Qualit\u00e4tsziel Szenario L\u00f6sungsansatz Link zu Details Usability Kindgerechte, intuitive Bedienung Swing UI mit vorgeladenen Bildern \u00fcber ImageLoader und einfache Navigation ADR 1 Robustheit Stabiler Betrieb bei intensiver Nutzung Spring Boot mit klarer Fehlerbehandlung und Dependency Injection f\u00fcr lose Kopplung ADR 8 Wartbarkeit Einfache Erweiterung und Fehlerbehebung Repository-Pattern und MVC-Architektur f\u00fcr modulare Komponenten ADR 2, ADR 3 Datenpersistenz Zuverl\u00e4ssige lokale Datenspeicherung SQLite mit JPA/Hibernate f\u00fcr eine einfache Datenpersistenz ADR 5 Mehrsprachigkeit Dynamische Sprachumschaltung Observer-Pattern mit zentralem AppLocalizationService ADR 4 Dual-Monitor K\u00fchlschrankansicht auf separatem Display PropertyChangeListener-Pattern mit ScannedItemsView ADR 6, ADR 9 Fehlerbehandlung Einheitliche Fehlerbehandlung DialogBox-Klasse f\u00fcr benutzerfreundliche Fehlermeldungen ADR 7 Testabdeckung Umfassende automatisierte Tests JUnit-Tests f\u00fcr Repository-Klassen und Gesch\u00e4ftslogik ADR 3 Hardware-Integration Barcode-Scanner f\u00fcr Produkterfassung Hardware-abstrakte Implementierung f\u00fcr einfache Handhabung und Austauschbarkeit ADR 10 <p>Die Technologieentscheidungen und Architekturmuster wurden sorgf\u00e4ltig auf Basis der Projektziele, der Zielgruppe (Kinder 7-13 Jahre) und den Hardware-Randbedingungen (Raspberry Pi 5) ausgew\u00e4hlt. Der Einsatz bew\u00e4hrter Frameworks wie Spring Boot in Kombination mit einer klaren Architektur erm\u00f6glicht eine robuste und wartbare Implementierung, w\u00e4hrend die Optimierung f\u00fcr die spezifischen Hardware-Gegebenheiten die Performance sicherstellt.</p>"},{"location":"SAD/05_building_block_view/","title":"5. Bausteinsicht","text":"<p>Die Bausteinsicht zeigt die statische Zerlegung des Systems in Bausteine (Module, Komponenten, Subsysteme, Klassen, Schnittstellen, Pakete, Bibliotheken, Frameworks, Schichten, Partitionen, Tiers, Funktionen, Makros, Operationen, Datenstrukturen, ...) sowie deren Abh\u00e4ngigkeiten (Beziehungen, Assoziationen, ...).</p>"},{"location":"SAD/05_building_block_view/#gesamtsystem","title":"Gesamtsystem","text":"<p>\u00dcbersicht der Architektur (Whiteboard-Style)</p> <pre><code>graph TD\n    %% Layers and Components\n    subgraph Pr\u00e4sentationsschicht[\"Pr\u00e4sentationsschicht (Views)\"]\n        V[\"Views\"] -.-&gt; |implementiert| PCL[\"PropertyChangeListener\"]\n        V -.-&gt; |implementiert| LO[\"LocalizationObserver\"]\n        V -.-&gt; |nutzt| UIC[\"UI-Komponenten\"]\n    end\n\n    subgraph Anwendungsschicht[\"Anwendungsschicht (Controller)\"]\n        C[\"Controller\"] -.-&gt; |implementiert| BC[\"BaseController\"]\n        C -- \"aktualisiert\" --&gt; V\n        C -- \"verarbeitet Eingaben von\" --&gt; V\n    end\n\n    subgraph Dom\u00e4nenschicht[\"Dom\u00e4nenschicht (Models)\"]\n        M[\"Models\"] -.-&gt; |nutzt| PCS[\"PropertyChangeSupport\"]\n        M -- \"stellt Daten bereit\" --&gt; C\n    end\n\n    subgraph Datenschicht[\"Datenschicht (Repositories)\"]\n        R[\"Repositories\"] \n        DB[(SQLite DB)]\n        R &lt;--&gt; DB\n        M &lt;--&gt; R\n    end\n\n    subgraph Querschnittskomponenten[\"Querschnittskomponenten\"]\n        I[\"ImageLoader\"] -- \"stellt Ressourcen bereit\" --&gt; V\n        L[\"AppLocalizationService\"] -- \"\u00fcbersetzt UI\" --&gt; V\n        CFG[\"Configuration\"] -- \"konfiguriert\" --&gt; C\n    end\n\n    %% Styling\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    class Pr\u00e4sentationsschicht,Anwendungsschicht,Dom\u00e4nenschicht,Datenschicht,Querschnittskomponenten layerStyle;\n    class V,C,M,R,I,L,CFG,UIC componentStyle;\n    class PCL,LO,BC,PCS interfaceStyle;\n    class DB dbStyle;</code></pre> <p>\u00dcbersichtsdiagramm des Fridgely-Systems</p> <p></p> <pre><code>graph TD\n    %% Layers\n    subgraph Pr\u00e4sentationsschicht \n        Views[\"Views&lt;br&gt;UI-Komponenten\"]\n        ScannedItemsView[\"ScannedItemsView&lt;br&gt;2nd Monitor\"]\n    end\n\n    subgraph Anwendungsschicht\n        Controllers[\"Controllers&lt;br&gt;Steuerungslogik\"]\n    end\n\n    subgraph Dom\u00e4nenschicht\n        Models[\"Models&lt;br&gt;Entities &amp; Gesch\u00e4ftslogik\"]\n    end\n\n    subgraph Datenschicht\n        Repositories[\"Repositories&lt;br&gt;Datenzugriff\"]\n        DB[(SQLite DB)]\n    end\n\n    subgraph Querschnittskomponenten\n        Utils[\"Utils&lt;br&gt;Gemeinsame Funktionen\"]\n        Config[\"Config&lt;br&gt;Konfiguration\"]\n        Localization[\"Localization&lt;br&gt;Mehrsprachigkeit\"]\n    end\n\n    %% Connections\n    Views &lt;--&gt; Controllers\n    ScannedItemsView &lt;--&gt; Controllers\n    Controllers &lt;--&gt; Models\n    Models &lt;--&gt; Repositories\n    Repositories &lt;--&gt; DB\n\n    Utils --&gt; Views\n    Utils --&gt; Controllers\n    Utils --&gt; Models\n    Localization --&gt; Views\n    Config --&gt; Controllers\n\n    %% Styling\n    classDef viewStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n    classDef controllerStyle fill:#1e3a59,stroke:#6fb1fc,stroke-width:1px;\n    classDef modelStyle fill:#252d3a,stroke:#9fa8da,stroke-width:1px;\n    classDef repoStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef utilsStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef configStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef localizationStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n\n    class Pr\u00e4sentationsschicht,Anwendungsschicht,Dom\u00e4nenschicht,Datenschicht,Querschnittskomponenten layerStyle;\n    class Views,ScannedItemsView viewStyle;\n    class Controllers controllerStyle;\n    class Models modelStyle;\n    class Repositories repoStyle;\n    class Utils utilsStyle;\n    class Config configStyle;\n    class Localization localizationStyle;\n    class DB dbStyle;</code></pre> <p>Begr\u00fcndung: Die hier dargestellte Zerlegung folgt dem klassischen MVC-Pattern (Model-View-Controller) mit einer klaren Trennung von Datenhaltung (Repositories), Gesch\u00e4ftslogik (Controller und Models) und Benutzeroberfl\u00e4che (Views). Diese Struktur unterst\u00fctzt die Hauptanforderungen an das System - insbesondere Wartbarkeit durch klare Kapselung, Robustheit durch klare Verantwortlichkeiten sowie Erweiterbarkeit durch die modulare Struktur.</p> <p>Hauptkomponente:</p> Name Verantwortung Fridgely Die Hauptklasse der Anwendung, die den Spring-Anwendungskontext initialisiert, Bildschirme erkennt und die Anwendung startet. Verantwortlich f\u00fcr die Konfiguration der Umgebung und den Start des ausgew\u00e4hlten Spielmodus. <p>Enthaltene Bausteine:</p> Name Verantwortung Pr\u00e4sentationsschicht (Views) Enth\u00e4lt alle UI-Komponenten zur Darstellung der Benutzeroberfl\u00e4che und Interaktion mit dem Benutzer. Verantwortlich f\u00fcr die Anzeige von K\u00fchlschrankinhalten, Spieloberfl\u00e4chen und Ergebnisansichten. Anwendungsschicht (Controller) Steuert den Programmablauf, vermittelt zwischen Views und Models und implementiert die Spiellogik sowie Barcode-Verarbeitung. Dom\u00e4nenschicht (Models) Enth\u00e4lt die Kernentit\u00e4ten und Gesch\u00e4ftslogik des Systems wie Produkte, Rezepte und Spielsitzungen. Datenschicht (Repositories) Verantwortlich f\u00fcr den Datenzugriff und die Datenpersistenz mit SQLite-Datenbank. Querschnittskomponenten (Utils, Config, Localization) Stellt \u00fcbergreifende Funktionalit\u00e4ten bereit, darunter Lokalisierung, UI-Komponenten und Hilfsklassen. <p>Wichtige Schnittstellen:</p> Schnittstelle Beschreibung BaseController Interface f\u00fcr alle Controller mit einheitlichen Lifecycle-Methoden PropertyChangeListener Java-Standard-Interface f\u00fcr den Observer-Pattern zur Benachrichtigung \u00fcber \u00c4nderungen in Models LocalizationObserver Interface f\u00fcr UI-Komponenten zur Mehrsprachigkeitsunterst\u00fctzung FridgeStockRepository Zentrale Schnittstelle zum Verwalten des K\u00fchlschrankinhalts in der Datenbank AppLocalizationService Erm\u00f6glicht die mehrsprachige Darstellung der Benutzeroberfl\u00e4che (EN, DE, FR)"},{"location":"SAD/05_building_block_view/#prasentationsschicht-views","title":"Pr\u00e4sentationsschicht (Views)","text":"<p>Zweck/Verantwortung: Verantwortlich f\u00fcr die Darstellung der Benutzeroberfl\u00e4che und Interaktion mit den Benutzern (haupts\u00e4chlich Kindern). Bietet eine intuitive, visuell ansprechende Oberfl\u00e4che f\u00fcr die Spielmodi und K\u00fchlschrankverwaltung.</p> <p>Schnittstellen:</p> <ul> <li>Stellt Oberfl\u00e4chenkomponenten f\u00fcr die Controller zur Verf\u00fcgung</li> <li>Reagiert auf Benutzeraktionen wie Touch, Tastendr\u00fccke und Barcode-Scans</li> <li>Visualisiert Daten aus den Model-Klassen</li> <li>Implementiert PropertyChangeListener und LocalizationObserver</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Unterst\u00fctzt mehrsprachige Darstellung (Deutsch, Englisch, Franz\u00f6sisch)</li> <li>Responsive Gestaltung f\u00fcr Touch-Bedienung optimiert</li> <li>Kindgerechtes, farbenfrohes Design mit klaren visuellen R\u00fcckmeldungen</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/view/\n</code></pre> <p>Hauptkomponenten:</p> <ul> <li><code>BaseView</code>: Abstrakte Basisklasse f\u00fcr alle Views mit JFrame-Management</li> <li><code>ScannedItemsView</code>: Zeigt K\u00fchlschrankinhalt auf zweitem Monitor an</li> <li><code>MultiplayerPlayer1View</code>: UI f\u00fcr Spieler 1 im Mehrspielermodus zum Scannen von Produkten</li> <li><code>MultiplayerPlayer2View</code>: UI f\u00fcr Spieler 2 im Mehrspielermodus zur Rezeptauswahl</li> <li><code>UnifiedRecipePanel</code>: Wiederverwendbare Komponente zur Anzeige von Rezepten</li> <li><code>LanguageSwitchButton</code>: UI-Komponente zum Umschalten zwischen den verf\u00fcgbaren Sprachen</li> <li><code>DialogBox</code>: Hilfsfunktionen f\u00fcr die Anzeige von Benachrichtigungen und Dialogfenstern</li> </ul>"},{"location":"SAD/05_building_block_view/#anwendungsschicht-controller","title":"Anwendungsschicht (Controller)","text":"<p>Zweck/Verantwortung: Steuert den Programmablauf und die Spiellogik, koordiniert die Interaktion zwischen Views und Models und verwaltet den Zustand der Anwendung.</p> <p>Schnittstellen:</p> <ul> <li>Nimmt Benutzereingaben aus den Views entgegen</li> <li>Aktualisiert Datenmodelle und l\u00f6st UI-Updates aus</li> <li>Steuert den Spielfluss im Einzel- und Mehrspielermodus</li> <li>Implementiert BaseController f\u00fcr einheitliche Lifecycle-Methoden</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Klare Trennung von Darstellung und Gesch\u00e4ftslogik</li> <li>Robuste Fehlerbehandlung bei Benutzereingaben</li> <li>Unterst\u00fctzung verschiedener Spielszenarien</li> <li>Dependency Injection \u00fcber Spring-Komponenten</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/controller/\n</code></pre> <p>Hauptkomponenten:</p> <ul> <li><code>ChooseGameModeController</code>: Steuert die Spielmodusauswahl</li> <li><code>MultiplayerGameController</code>: Hauptcontroller f\u00fcr den Mehrspielermodus</li> <li><code>MultiplayerPlayer1Controller</code>: Verwaltet das Scannen von Produkten durch Spieler 1</li> <li><code>MultiplayerPlayer2Controller</code>: Verwaltet die Rezeptauswahl durch Spieler 2</li> <li><code>MultiplayerGameLauncher</code>: Initialisiert und startet den Mehrspielermodus, verbindet Controller und Views</li> </ul>"},{"location":"SAD/05_building_block_view/#domanenschicht-models","title":"Dom\u00e4nenschicht (Models)","text":"<p>Zweck/Verantwortung: Enth\u00e4lt die Kernentit\u00e4ten und Gesch\u00e4ftslogik des Systems, repr\u00e4sentiert die Datenstrukturen und Gesch\u00e4ftsregeln.</p> <p>Schnittstellen:</p> <ul> <li>Stellt Datenstrukturen f\u00fcr Controller und Views bereit</li> <li>Kapselt Gesch\u00e4ftslogik f\u00fcr Produkte, Rezepte und Spielsitzungen</li> <li>Bindet an Repositories zur Datenpersistenz</li> <li>Verwendet PropertyChangeSupport f\u00fcr Observer-Pattern</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Klare Datenkapselung mit Getter/Setter-Methoden</li> <li>Validierung von Gesch\u00e4ftsregeln innerhalb der Modelle</li> <li>Unabh\u00e4ngigkeit von UI-Komponenten f\u00fcr bessere Testbarkeit</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/model/\n</code></pre> <p>Hauptkomponenten:</p> <ul> <li><code>Product</code>: Repr\u00e4sentiert ein Lebensmittelprodukt mit Eigenschaften wie Bio und Lokalit\u00e4t</li> <li><code>Recipe</code>: Stellt ein Rezept mit Zutaten und mehrsprachigen Beschreibungen dar</li> <li><code>FridgeStock</code>: Entity-Klasse zur Persistierung des K\u00fchlschrankinhalts</li> <li><code>FridgeStockModel</code>: Modellklasse zur Verwaltung des K\u00fchlschrankinhalts mit PropertyChangeSupport</li> <li><code>MultiplayerGameStateModel</code>: Verwaltet den Zustand einer Mehrspieler-Spielsitzung</li> <li><code>PenguinModel</code>: Verwaltet den Zustand des Pinguin-Charakters</li> </ul>"},{"location":"SAD/05_building_block_view/#datenschicht-repositories","title":"Datenschicht (Repositories)","text":"<p>Zweck/Verantwortung: Abstrahiert den Datenzugriff und die Datenpersistenz, stellt eine einheitliche Schnittstelle f\u00fcr den Zugriff auf die SQLite-Datenbank bereit.</p> <p>Schnittstellen:</p> <ul> <li>CRUD-Operationen f\u00fcr Entit\u00e4ten wie Produkte, K\u00fchlschrankinhalt und Rezepte</li> <li>SQL-Abfragen zur Datenmanipulation und -abfrage</li> <li>Fehlerbehandlung bei Datenbankoperationen</li> <li>Spring Data JPA und QueryDSL f\u00fcr typsicheren Datenzugriff</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Kapselung aller SQL-Statements und Datenbankoperationen</li> <li>Effiziente Datenbankabfragen f\u00fcr reaktionsschnelle Anwendung</li> <li>Zentrale Fehlerbehandlung bei Datenbankzugriffen</li> <li>Transaktionsunterst\u00fctzung</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/service/\n</code></pre> <p>Hauptkomponenten:</p> <ul> <li><code>FridgeStockRepository</code>: Verwaltet den K\u00fchlschrankinhalt (Hinzuf\u00fcgen, Entfernen, Abfragen)</li> <li><code>FridgeStockJpaRepository</code>: JPA-Interface f\u00fcr grundlegende CRUD-Operationen</li> <li><code>ProductRepository</code>: Stellt Produkte und deren Eigenschaften bereit</li> <li><code>RecipeRepository</code>: Verwaltet Rezepte und deren Zuordnung zu Zutaten</li> </ul>"},{"location":"SAD/05_building_block_view/#querschnittskomponenten-utils","title":"Querschnittskomponenten (Utils)","text":"<p>Zweck/Verantwortung: </p> <p>Bietet \u00fcbergreifende Funktionalit\u00e4ten, die von verschiedenen Schichten des Systems verwendet werden.</p> <p>Schnittstellen:</p> <ul> <li>Hilfsfunktionen f\u00fcr UI-Komponenten</li> <li>Mehrsprachigkeitsunterst\u00fctzung</li> <li>Bild- und Ressourcenverwaltung</li> <li>Ereignisbehandlung und Dialogfunktionen</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Wiederverwendbarkeit in verschiedenen Anwendungsteilen</li> <li>Konsistentes Erscheinungsbild durch gemeinsame Komponenten</li> <li>Zentrale Konfigurierbarkeit von Anwendungsparametern</li> <li>Singleton-Pattern f\u00fcr zentrale Services</li> </ul> <p>Ablageort/Datei(en):</p> <p><pre><code>src/main/java/ch/primeo/fridgely/util/\n</code></pre> <pre><code>src/main/java/ch/primeo/fridgely/config/\n</code></pre> <pre><code>src/main/java/ch/primeo/fridgely/service/localization/\n</code></pre></p> <p>Hauptkomponenten:</p> <ul> <li><code>ImageLoader</code>: L\u00e4dt und verwaltet Bild-Ressourcen (Singleton)</li> <li><code>AppLocalizationService</code>: Verwaltet die mehrsprachige Unterst\u00fctzung der Anwendung (Singleton)</li> <li><code>Constants</code>: Enth\u00e4lt anwendungsweite Konstanten</li> <li><code>GameConfig</code>: Konfigurationseinstellungen f\u00fcr das Spiel</li> <li><code>LocalizationObserver</code>: Interface f\u00fcr lokalisierte UI-Komponenten</li> </ul> <p>Paketstruktur des Fridgely-Systems</p> <pre><code>flowchart TB\n  %% top\u2010level \u201cpackage\u201d\n  subgraph ch.primeo.fridgely\n    direction TB\n\n    %% view\u2010Package\n    subgraph view\n      direction TB\n      BV[BaseView]\n      SI[ScannedItemsView]\n      MP1V[MultiplayerPlayer1View]\n      MP2V[MultiplayerPlayer2View]\n      URP[UnifiedRecipePanel]\n    end\n\n    %% controller\u2010Package\n    subgraph controller\n      direction TB\n      BC[BaseController]\n      CGMC[ChooseGameModeController]\n      subgraph multiplayer\n        direction TB\n        MGC[MultiplayerGameController]\n        MP1C[MultiplayerPlayer1Controller]\n        MP2C[MultiplayerPlayer2Controller]\n      end\n    end\n\n    %% model\u2010Package\n    subgraph model\n      direction TB\n      P[Product]\n      R[Recipe]\n      FSM[FridgeStockModel]\n      subgraph multiplayer\n        direction TB\n        MGSM[MultiplayerGameStateModel]\n        PM[PenguinModel]\n      end\n    end\n\n    %% service\u2010Package\n    subgraph service\n      direction TB\n      FSR[FridgeStockRepository]\n      PR[ProductRepository]\n      RR[RecipeRepository]\n      subgraph localization\n        direction TB\n        ALS[AppLocalizationService]\n        LO[LocalizationObserver]\n      end\n    end\n\n    %% util\u2010Package\n    subgraph util\n      direction TB\n      IL[ImageLoader]\n      C0[Constants]\n    end\n\n    %% config\u2010Package\n    subgraph config\n      GameConfig[GameConfig]\n    end\n  end\n\n  %% \u2500\u2500 Relationships \u2500\u2500\n  %% Inheritance (arrows with open heads)\n  BV --&gt; SI\n  BV --&gt; MP1V\n  BV --&gt; MP2V\n\n  BC --&gt; CGMC\n  BC --&gt; MGC\n\n  %% Composition (solid arrows)\n  MGC --&gt; MP1C\n  MGC --&gt; MP2C\n\n  %% Associations (labelled dashed arrows)\n  MGC -- verwaltet --&gt; MGSM\n  MGC -- aktualisiert --&gt; PM\n  MP1C -- aktualisiert --&gt; FSM\n  MP2C -- w\u00e4hlt\u202faus --&gt; R</code></pre> <p>Begr\u00fcndung: Die Paketstruktur spiegelt die modulare Architektur des Fridgely-Systems wider, die auf dem MVC-Pattern basiert. Jedes Paket entspricht einer Schicht oder einem Modul des Systems und enth\u00e4lt alle relevanten Klassen und Schnittstellen. Dies f\u00f6rdert die Wartbarkeit und Verst\u00e4ndlichkeit des Codes, da verwandte Komponenten gruppiert und klar voneinander getrennt sind. Die Verwendung von Sub-Namensr\u00e4umen f\u00fcr spezifische Funktionen oder Rollen (z.B. <code>multiplayer</code> f\u00fcr Mehrspieler-spezifische Klassen) hilft zus\u00e4tzlich, die Verantwortlichkeiten zu kapseln und die \u00dcbersichtlichkeit zu erh\u00f6hen.</p>"},{"location":"SAD/05_building_block_view/#ebene-2","title":"Ebene 2","text":"<p>In dieser Ebene wird die detaillierte innere Struktur der Hauptbausteine dargestellt.</p>"},{"location":"SAD/05_building_block_view/#detaillierte-struktur-der-controller-schicht","title":"Detaillierte Struktur der Controller-Schicht","text":"<pre><code>graph TD\n    %% Controllers Layer\n    subgraph Anwendungsschicht - Controller\n        CGMC[\"ChooseGameModeController&lt;br&gt;(Spielmodusauswahl)\"]\n        MGC[\"MultiplayerGameController&lt;br&gt;(Hauptcontroller)\"]\n        MP1C[\"MultiplayerPlayer1Controller&lt;br&gt;(Spieler 1 Scannen)\"]\n        MP2C[\"MultiplayerPlayer2Controller&lt;br&gt;(Spieler 2 Rezeptauswahl)\"]\n    end\n\n    %% Views Layer\n    subgraph Pr\u00e4sentationsschicht\n        CGMV[\"ChooseGameModeView\"]\n        SIV[\"ScannedItemsView&lt;br&gt;(Zweiter Monitor)\"]\n        MP1V[\"MultiplayerPlayer1View\"]\n        MP2V[\"MultiplayerPlayer2View\"]\n        MGV[\"MultiplayerGameView\"]\n    end\n\n    %% Models Layer  \n    subgraph Dom\u00e4nenschicht\n        PM[\"Product\"]\n        RM[\"RecipeModel\"]\n        FSM[\"FridgeStockModel\"]\n        MGSM[\"MultiplayerGameStateModel\"]\n        PEM[\"PenguinModel\"]\n    end\n\n    %% Services Layer\n    subgraph Dienste\n        ALS[\"AppLocalizationService\"]\n        IL[\"ImageLoader\"]\n    end\n\n    %% Data Layer\n    subgraph Datenschicht\n        PR[\"ProductRepository\"]\n        RR[\"RecipeRepository\"]\n        FSR[\"FridgeStockRepository\"]\n    end\n\n    %% Connections between controller and views\n    CGMC --&gt; CGMV\n    MGC --&gt; SIV\n    MGC --&gt; MGV\n    MP1C --&gt; MP1V\n    MP2C --&gt; MP2V\n\n    %% Connections between controllers\n    MGC --&gt; MP1C\n    MGC --&gt; MP2C\n\n    %% Connections from controllers to models\n    MP1C --&gt; FSM\n    MP1C --&gt; MGSM\n    MP1C --&gt; PEM\n    MP2C --&gt; FSM\n    MP2C --&gt; MGSM\n    MP2C --&gt; PEM\n    MP2C --&gt; RM\n    MGC --&gt; FSM\n    MGC --&gt; MGSM\n    MGC --&gt; PEM\n    MGC --&gt; RM\n\n    %% Connections to repositories\n    MP1C --&gt; PR\n    MGC --&gt; PR\n    MGC --&gt; RR\n    FSM --&gt; FSR\n\n    %% Services\n    ALS --&gt; CGMV\n    ALS --&gt; MP1V\n    ALS --&gt; MP2V\n    ALS --&gt; SIV\n    ALS --&gt; MGV\n    IL --&gt; CGMV\n    IL --&gt; MP1V\n    IL --&gt; MP2V\n    IL --&gt; SIV\n    IL --&gt; MGV\n\n    %% Styling\n    classDef controllerStyle fill:#1e3a59,stroke:#6fb1fc,stroke-width:1px;\n    classDef viewStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n    classDef modelStyle fill:#252d3a,stroke:#9fa8da,stroke-width:1px;\n    classDef serviceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef repoStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    class CGMC,MGC,MP1C,MP2C controllerStyle;\n    class CGMV,SIV,MP1V,MP2V,MGV viewStyle;\n    class PM,RM,FSM,MGSM,PEM modelStyle;\n    class ALS,IL serviceStyle;\n    class PR,RR,FSR repoStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#hauptinteraktionsfluss-im-mehrspielermodus","title":"Hauptinteraktionsfluss im Mehrspielermodus","text":"<p>Das folgende Diagramm zeigt die wichtigsten Interaktionen zwischen den Komponenten im Mehrspielermodus:</p> <pre><code>sequenceDiagram\n    participant MP1V as MultiplayerPlayer1View\n    participant MP1C as MultiplayerPlayer1Controller\n    participant MGC as MultiplayerGameController\n    participant MP2C as MultiplayerPlayer2Controller\n    participant MP2V as MultiplayerPlayer2View\n    participant FSM as FridgeStockModel\n    participant MGSM as MultiplayerGameStateModel\n    participant PEM as PenguinModel\n    participant RM as RecipeModel\n    participant RR as RecipeRepository\n\n    MP1V-&gt;&gt;MP1C: Produkt scannen\n    MP1C-&gt;&gt;FSM: addProduct(product)\n    FSM-&gt;&gt;FSM: firePropertyChange(\"products\")\n    FSM--&gt;&gt;MP1C: propertyChange(evt)\n    MP1C-&gt;&gt;MGC: notifyProductScanned(product)\n    MGC-&gt;&gt;MGSM: updateScannedProducts(product)\n    MGSM-&gt;&gt;MGSM: firePropertyChange(\"gameState\")\n    MGSM--&gt;&gt;MGC: propertyChange(evt)\n    MGC-&gt;&gt;MP2C: updateAvailableRecipes()\n    MP2C-&gt;&gt;RM: findMatchingRecipes(products)\n    RM-&gt;&gt;RR: findByIngredients(products)\n    RR--&gt;&gt;RM: recipes\n    RM--&gt;&gt;MP2C: matchingRecipes\n    MP2C-&gt;&gt;MP2V: updateRecipeDisplay(recipes)\n    MP2V-&gt;&gt;MP2C: recipeSelected(recipe)\n    MP2C-&gt;&gt;MGC: notifyRecipeSelected(recipe)\n    MGC-&gt;&gt;MGSM: setSelectedRecipe(recipe)\n    MGC-&gt;&gt;PEM: updateState(PenguinState.HAPPY)\n    PEM-&gt;&gt;PEM: firePropertyChange(\"penguinState\")</code></pre>"},{"location":"SAD/05_building_block_view/#multiplayergamecontroller","title":"MultiplayerGameController","text":"<p>Zweck/Verantwortung: Zentraler Controller, der den Mehrspielermodus steuert, die Kommunikation zwischen Spieler 1 und Spieler 2 koordiniert und den Spielzustand verwaltet.</p> <p>Schnittstellen:</p> <ul> <li>Stellt Zugriff auf die Modelle f\u00fcr die Views bereit</li> <li>Koordiniert die Spiellogik und den Ablauf des Mehrspielermodus</li> <li>Verwaltet die Spieler-Controller</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Zentrale Steuerung des Spielablaufs</li> <li>Klare Trennung der Verantwortlichkeiten zwischen den Spieler-Controllern</li> <li>Robuste Fehlerbehandlung bei Benutzereingaben</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/controller/multiplayer/MultiplayerGameController.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>MultiplayerPlayer1Controller</code>: Verwaltet das Scannen von Produkten durch Spieler 1</li> <li><code>MultiplayerPlayer2Controller</code>: Verwaltet die Rezeptauswahl durch Spieler 2</li> </ul>"},{"location":"SAD/05_building_block_view/#fridgestockrepository","title":"FridgeStockRepository","text":"<p>Zweck/Verantwortung: Repository f\u00fcr die Verwaltung des K\u00fchlschrankinhalts, stellt CRUD-Operationen f\u00fcr die Speicherung und Abfrage von Produkten im K\u00fchlschrank bereit.</p> <p>Schnittstellen:</p> <ul> <li>Bietet Methoden zum Hinzuf\u00fcgen, Entfernen und Abfragen von Produkten im K\u00fchlschrank</li> <li>Nutzt JPA f\u00fcr Datenbankabfragen</li> <li>Verwendet Spring Data f\u00fcr grundlegende CRUD-Operationen</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Effiziente Datenbankzugriffe f\u00fcr schnelle Antwortzeiten</li> <li>Abstrahierung der Datenbankoperationen</li> <li>Transaktionale Sicherheit bei \u00c4nderungen</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/service/FridgeStockRepository.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>FridgeStockJpaRepository</code>: JPA-Interface f\u00fcr grundlegende CRUD-Operationen</li> </ul>"},{"location":"SAD/05_building_block_view/#ebene-3","title":"Ebene 3","text":""},{"location":"SAD/05_building_block_view/#applocalizationservice","title":"AppLocalizationService","text":"<p>Zweck/Verantwortung: Verwaltet die mehrsprachige Unterst\u00fctzung der Anwendung, erm\u00f6glicht das Umschalten zwischen Sprachen und benachrichtigt UI-Komponenten \u00fcber Sprach\u00e4nderungen.</p> <p>Schnittstellen:</p> <ul> <li>Bietet Methoden zum Abrufen lokalisierter Texte</li> <li>Erm\u00f6glicht das Umschalten zwischen Sprachen</li> <li>Observer-Pattern zur Benachrichtigung von UI-Komponenten</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Unterst\u00fctzung f\u00fcr drei Sprachen (Deutsch, Englisch, Franz\u00f6sisch)</li> <li>Dynamische Aktualisierung der UI ohne Neustart</li> <li>Singleton-Design f\u00fcr globalen Zugriff</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/service/localization/AppLocalizationService.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>LocalizationObserver</code>: Interface f\u00fcr UI-Komponenten, die auf Sprach\u00e4nderungen reagieren</li> <li>Ressourcen-Bundles f\u00fcr die verschiedenen Sprachen</li> </ul> <pre><code>graph TD\n    %% Main service\n    ALS[\"AppLocalizationService&lt;br&gt;Singleton\"]\n\n    %% Resource bundles\n    RB_DE[\"languages_de.properties\"]\n    RB_EN[\"languages_en.properties\"]\n    RB_FR[\"languages_fr.properties\"]\n\n    %% Observers\n    LOI[\"LocalizationObserver&lt;br&gt;Interface\"]\n    subgraph UIC[\"UI-Komponenten\"]\n        MP1V[\"MultiplayerPlayer1View\"]\n        MP2V[\"MultiplayerPlayer2View\"]\n        SIV[\"ScannedItemsView\"]\n        CGMV[\"ChooseGameModeView\"]\n        MGV[\"MultiplayerGameView\"]\n    end\n\n    %% Connections\n    ALS --&gt; RB_DE\n    ALS --&gt; RB_EN\n    ALS --&gt; RB_FR\n    ALS -- \"Benachrichtigt\" --&gt; LOI\n    LOI -- \"Implementiert von\" --&gt; UIC\n\n    %% Styling\n    classDef serviceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef resourceStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef interfaceStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef implStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n\n    class ALS serviceStyle;\n    class RB_DE,RB_EN,RB_FR resourceStyle;\n    class LOI interfaceStyle;\n    class UIC,MP1V,MP2V,SIV,CGMV,MGV implStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#fridgestockmodel","title":"FridgeStockModel","text":"<pre><code>classDiagram\n    class FridgeStockModel {\n        -PropertyChangeSupport pcs\n        -List~Product~ products\n        +addProduct(product: Product) void\n        +removeProduct(product: Product) void\n        +containsProduct(barcode: String) boolean\n        +getProducts() List~Product~\n        +addPropertyChangeListener(listener: PropertyChangeListener) void\n        +removePropertyChangeListener(listener: PropertyChangeListener) void\n    }\n\n    class FridgeStockRepository {\n        +save(product: Product) void\n        +delete(product: Product) void\n        +findAll() List~Product~\n        +findByBarcode(barcode: String) Optional~Product~\n    }\n\n    class Product {\n        -String barcode\n        -String name\n        -boolean isOrganic\n        -boolean isLocal\n    }\n\n    FridgeStockModel --&gt; PropertyChangeSupport : uses\n    FridgeStockModel --&gt; \"0..*\" Product : contains\n    FridgeStockModel --&gt; FridgeStockRepository : uses</code></pre> <p>Zweck/Verantwortung: Verwaltet den aktuellen Inhalt des virtuellen K\u00fchlschranks, erm\u00f6glicht das Hinzuf\u00fcgen und Entfernen von Produkten und informiert UI-Komponenten \u00fcber \u00c4nderungen.</p> <p>Schnittstellen:</p> <ul> <li>PropertyChangeSupport f\u00fcr Observer-Pattern-Benachrichtigungen</li> <li>CRUD-Operationen f\u00fcr Produkte</li> <li>Integration mit dem FridgeStockRepository f\u00fcr Datenpersistenz</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Effiziente Verwaltung der Produktliste</li> <li>Ereignisbasierte Aktualisierung der UI</li> <li>Datenkonsistenz durch Repository-Validierung</li> </ul> <p>Ablageort/Datei(en):</p> <pre><code>src/main/java/ch/primeo/fridgely/model/FridgeStockModel.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>PropertyChangeSupport</code>: Teil des Java Beans Standards f\u00fcr den Observer-Pattern</li> <li><code>Product</code>: Produktentit\u00e4ten, die im K\u00fchlschrank gespeichert werden</li> </ul> <pre><code>graph TD\n    %% Main class\n    FSM[\"FridgeStockModel\"]\n\n    %% Related classes\n    PCS[\"PropertyChangeSupport\"]\n    PROD[\"Product\"]\n    FS[\"FridgeStock\"]\n    FSR[\"FridgeStockRepository\"]\n\n    %% Connections\n    FSM --&gt; PCS\n    FSM --&gt; PROD\n    FSM --&gt; FS\n    FSM --&gt; FSR\n\n    %% Observers\n    subgraph OBS[\"Observer\"]\n        MP1C[\"MultiplayerPlayer1Controller\"]\n        MP2C[\"MultiplayerPlayer2Controller\"]\n        MGC[\"MultiplayerGameController\"]\n    end\n\n    PCS -- \"Benachrichtigt\" --&gt; OBS\n\n    %% Styling\n    classDef modelStyle fill:#252d3a,stroke:#9fa8da,stroke-width:1px;\n    classDef supportStyle fill:#3f3f3f,stroke:#d3d3d3,stroke-width:1px;\n    classDef repoStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef controllerStyle fill:#1e3a59,stroke:#6fb1fc,stroke-width:1px;\n\n    class FSM modelStyle;\n    class PCS,PROD,FS supportStyle;\n    class FSR repoStyle;\n    class OBS,MP1C,MP2C,MGC controllerStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#recipemodel","title":"RecipeModel","text":"<p>Zweck/Verantwortung: Modell f\u00fcr die Verwaltung von Rezepten im Mehrspielermodus, bietet Zugriff auf verf\u00fcgbare Rezepte und deren Zutaten sowie Berechnungen zur Rezeptempfehlung basierend auf vorhandenen Produkten.</p> <p>Schnittstellen:</p> <ul> <li>Methoden zum Abrufen von Rezepten und deren Details</li> <li>Berechnung der besten Rezeptvorschl\u00e4ge basierend auf dem K\u00fchlschrankinhalt</li> <li>Bereitstellung mehrsprachiger Rezeptbeschreibungen</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Effiziente Algorithmen f\u00fcr Rezeptempfehlungen</li> <li>Caching von Rezeptdaten f\u00fcr schnellen Zugriff</li> <li>Unterst\u00fctzung mehrsprachiger Anzeige von Rezeptdetails</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/model/RecipeModel.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>Recipe</code>: Entit\u00e4t, die ein Rezept repr\u00e4sentiert</li> <li><code>RecipeIngredient</code>: Entit\u00e4t, die die Zutat eines Rezepts repr\u00e4sentiert</li> <li><code>RecipeRepository</code>: Repository f\u00fcr den Datenbankzugriff auf Rezepte</li> </ul> <pre><code>graph TD\n    %% Main class\n    RM[\"RecipeModel\"]\n\n    %% Related classes\n    R[\"Recipe\"]\n    RI[\"RecipeIngredient\"]\n    RR[\"RecipeRepository\"]\n    PROD[\"Product\"]\n    FSM[\"FridgeStockModel\"]\n    ALS[\"AppLocalizationService\"]\n\n    %% Connections\n    RM --&gt; R\n    RM --&gt; RR\n    RM --&gt; FSM\n    R --&gt; RI\n    RI --&gt; PROD\n    R --&gt; ALS\n\n    %% Styling\n    classDef modelStyle fill:#252d3a,stroke:#9fa8da,stroke-width:1px;\n    classDef entityStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n    classDef repoStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef serviceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n\n    class RM,FSM modelStyle;\n    class R,RI,PROD entityStyle;\n    class RR repoStyle;\n    class ALS serviceStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#multiplayergamestatemodel","title":"MultiplayerGameStateModel","text":"<p>Zweck/Verantwortung: Zentrales Modell f\u00fcr den Spielzustand im Mehrspielermodus, verwaltet den Status des Spiels, die Aktionen der Spieler und den Fortschritt.</p> <p>Schnittstellen:</p> <ul> <li>PropertyChangeSupport f\u00fcr Benachrichtigungen \u00fcber Status\u00e4nderungen</li> <li>Methoden zur Aktualisierung des Spielzustands</li> <li>Tracking der Spieleraktivit\u00e4ten und des Fortschritts</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Zuverl\u00e4ssige Zustandsverfolgung ohne Inkonsistenzen</li> <li>Echtzeitaktualisierung aller beteiligten Komponenten</li> <li>Robuste Fehlerbehandlung f\u00fcr unerwartete Spielerinteraktionen</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/model/multiplayer/MultiplayerGameStateModel.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>PropertyChangeSupport</code>: F\u00fcr Observer-Pattern-Implementierung</li> <li><code>PenguinModel</code>: Verwaltet den Zustand des Pinguin-Charakters</li> <li>Spielstatusattribute (z.B. scannedProducts, selectedRecipe)</li> </ul> <pre><code>graph TD\n    %% Main class\n    MGSM[\"MultiplayerGameStateModel\"]\n\n    %% Related classes\n    PCS[\"PropertyChangeSupport\"]\n    PM[\"PenguinModel\"]\n    Recipe[\"Recipe\"]\n    Products[\"List&lt;Product&gt;\"]\n\n    %% Connections\n    MGSM --&gt; PCS\n    MGSM --&gt; PM\n    MGSM --&gt; Recipe\n    MGSM --&gt; Products\n\n    %% Observers\n    subgraph OBS[\"Observer\"]\n        MGC[\"MultiplayerGameController\"]\n        MP1C[\"MultiplayerPlayer1Controller\"]\n        MP2C[\"MultiplayerPlayer2Controller\"]\n    end\n\n    PCS -- \"Benachrichtigt\" --&gt; OBS\n\n    %% Styling\n    classDef modelStyle fill:#252d3a,stroke:#9fa8da,stroke-width:1px;\n    classDef supportStyle fill:#3f3f3f,stroke:#d3d3d3,stroke-width:1px;\n    classDef controllerStyle fill:#1e3a59,stroke:#6fb1fc,stroke-width:1px;\n\n    class MGSM,PM modelStyle;\n    class PCS,Recipe,Products supportStyle;\n    class OBS,MGC,MP1C,MP2C controllerStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#baseview-basecontroller","title":"BaseView &amp; BaseController","text":"<p>Zweck/Verantwortung: Basis-Komponenten, die grundlegende Funktionalit\u00e4ten f\u00fcr alle Views und Controller bereitstellen, um Konsistenz und Wiederverwendbarkeit zu gew\u00e4hrleisten.</p> <p>Schnittstellen:</p> <ul> <li>Lifecycle-Methoden f\u00fcr die Initialisierung und Zerst\u00f6rung von Views und Controllern</li> <li>Allgemeine UI-Management-Funktionen (BaseView)</li> <li>Gemeinsame Controller-Logik (BaseController)</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Einheitliche Implementation von \u00fcbergreifenden Funktionalit\u00e4ten</li> <li>Reduzierung von redundantem Code</li> <li>Konsistentes Verhalten in allen Views und Controllern</li> </ul> <p>Ablageort/Datei(en): </p> <p><pre><code>src/main/java/ch/primeo/fridgely/view/BaseView.java\n</code></pre> <pre><code>src/main/java/ch/primeo/fridgely/controller/BaseController.java\n</code></pre></p>"},{"location":"SAD/05_building_block_view/#querschnitts-komponenten","title":"Querschnitts-Komponenten","text":"<p>Die Querschnitts-Komponenten des Fridgely-Systems bieten grundlegende Dienste, die von verschiedenen Teilen der Anwendung genutzt werden. Diese Komponenten folgen gr\u00f6sstenteils dem Singleton-Pattern, um eine zentrale Verwaltung und Wiederverwendbarkeit zu gew\u00e4hrleisten.</p>"},{"location":"SAD/05_building_block_view/#imageloader","title":"ImageLoader","text":"<p>Zweck/Verantwortung: Zentrale Komponente zum Laden und Verwalten von Bildressourcen f\u00fcr die UI, implementiert als Singleton f\u00fcr einheitlichen Zugriff auf Bilddateien.</p> <p>Schnittstellen:</p> <ul> <li>Methoden zum Laden von Bildern aus verschiedenen Quellen</li> <li>Bild-Caching f\u00fcr verbesserte Performance</li> <li>Hilfsmethoden f\u00fcr Bildmanipulation (z.B. Skalierung)</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Effizientes Laden und Zwischenspeichern von Bildressourcen</li> <li>Zentrale Fehlerverwaltung beim Laden von Bildern</li> <li>Thread-Sicherheit f\u00fcr den parallelen Zugriff</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/util/ImageLoader.java\n</code></pre> <pre><code>graph TD\n    %% Main class\n    IL[\"ImageLoader&lt;br&gt;(Singleton)\"]\n\n    %% Related classes\n    IC[\"Image Cache&lt;br&gt;Map&lt;String, Image&gt;\"]\n    REF[\"Resource Files&lt;br&gt;/resources/images/\"]\n\n    %% Users\n    subgraph VIEWS[\"Views\"]\n        MGV[\"MultiplayerGameView\"]\n        MP1V[\"MultiplayerPlayer1View\"]\n        MP2V[\"MultiplayerPlayer2View\"]\n        SIV[\"ScannedItemsView\"]\n        CGMV[\"ChooseGameModeView\"]\n    end\n\n    %% Connections\n    IL --&gt; IC\n    IL --&gt; REF\n    VIEWS --&gt; IL\n\n    %% Styling\n    classDef singletonStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef resourceStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef viewStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n\n    class IL singletonStyle;\n    class IC,REF resourceStyle;\n    class VIEWS,MGV,MP1V,MP2V,SIV,CGMV viewStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#constants","title":"Constants","text":"<p>Zweck/Verantwortung: Zentrale Klasse f\u00fcr anwendungsweite Konstanten, die in verschiedenen Teilen des Systems verwendet werden.</p> <p>Schnittstellen:</p> <ul> <li>Definiert statische Konstanten f\u00fcr UI-Einstellungen, Datenbankzugriff, etc.</li> <li>Gruppiert zusammengeh\u00f6rige Konstanten in inneren Klassen/Interfaces</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Zentralisierte Konfigurationswerte f\u00fcr einfache Wartung</li> <li>Typsicherheit durch starke Typisierung der Konstanten</li> <li>Vermeidung von Magic Numbers im Quellcode</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/Constants.java\n</code></pre>"},{"location":"SAD/05_building_block_view/#zusammenfassung-der-bausteinsicht","title":"Zusammenfassung der Bausteinsicht","text":"<p>Die Bausteinsicht des Fridgely-Systems zeigt eine klare Trennung der Verantwortlichkeiten nach dem MVC-Pattern:</p> <ol> <li> <p>Pr\u00e4sentationsschicht (Views): K\u00fcmmert sich um die kindgerechte Darstellung der Benutzeroberfl\u00e4che, mit spezialisierten Views f\u00fcr verschiedene Spielmodi und Spielerrollen.</p> </li> <li> <p>Anwendungsschicht (Controller): Steuert den Programmablauf und die Spiellogik, orchestriert die Interaktion zwischen Benutzern und der Anwendung.</p> </li> <li> <p>Dom\u00e4nenschicht (Models): Repr\u00e4sentiert die Kerndaten und Gesch\u00e4ftslogik des Systems, darunter Produkte, Rezepte und Spielzust\u00e4nde.</p> </li> <li> <p>Datenschicht (Repositories): Abstrahiert den Datenbankzugriff und stellt persistente Daten f\u00fcr die Anwendung bereit.</p> </li> <li> <p>Querschnittskomponenten: Bieten \u00fcbergreifende Funktionalit\u00e4ten wie Mehrsprachigkeit und Bildverwaltung f\u00fcr alle Schichten.</p> </li> </ol> <p>Diese Architektur erm\u00f6glicht eine hohe Wartbarkeit und Erweiterbarkeit des Systems. Durch die klare Trennung der Komponenten k\u00f6nnen einzelne Teile unabh\u00e4ngig voneinander entwickelt, getestet und angepasst werden. Die verwendeten Design-Patterns (Observer, Singleton, Repository) tragen zur Robustheit und Flexibilit\u00e4t des Systems bei.</p> <pre><code>graph TD\n    subgraph Anwendungsschicht - Controller\n        CGMC[\"ChooseGameModeController\"]\n        MGC[\"MultiplayerGameController\"]\n        MP1C[\"MultiplayerPlayer1Controller\"]\n        MP2C[\"MultiplayerPlayer2Controller\"]\n    end\n\n    subgraph Pr\u00e4sentationsschicht\n        CGMV[\"ChooseGameModeView\"]\n        SIV[\"ScannedItemsView&lt;br&gt;(Zweiter Monitor)\"]\n        MP1V[\"MultiplayerPlayer1View\"]\n        MP2V[\"MultiplayerPlayer2View\"]\n        URP[\"UnifiedRecipePanel\"]\n    end\n\n    subgraph Dom\u00e4nenschicht\n        PM[\"Product\"]\n        RM[\"RecipeModel\"]\n        FSM[\"FridgeStockModel\"]\n        MGSM[\"MultiplayerGameStateModel\"]\n        PEM[\"PenguinModel\"]\n    end\n\n    subgraph Dienste\n        ALS[\"AppLocalizationService\"]\n        IL[\"ImageLoader\"]\n    end\n\n    subgraph Datenschicht\n        PR[\"ProductRepository\"]\n        RR[\"RecipeRepository\"]\n        FSR[\"FridgeStockRepository\"]\n    end\n\n    %% Connections between controller and views\n    CGMC --&gt; CGMV\n    MGC --&gt; SIV\n    MGC --&gt; MP1V\n    MGC --&gt; MP2V\n    MGC --&gt; URP\n\n    %% Connections between controllers\n    MGC --&gt; MP1C\n    MGC --&gt; MP2C\n\n    %% Connections from controllers to models\n    MP1C --&gt; FSM\n    MP1C --&gt; MGSM\n    MP1C --&gt; PEM\n    MP2C --&gt; FSM\n    MP2C --&gt; MGSM\n    MP2C --&gt; PEM\n    MP2C --&gt; RM\n    MGC --&gt; FSM\n    MGC --&gt; MGSM\n    MGC --&gt; PEM\n    MGC --&gt; RM\n\n    %% Connections to repositories\n    MP1C --&gt; PR\n    MGC --&gt; PR\n    MGC --&gt; RR\n\n    %% Services\n    ALS --&gt; CGMV\n    ALS --&gt; MP1V\n    ALS --&gt; MP2V\n    ALS --&gt; SIV\n    IL --&gt; CGMV\n    IL --&gt; MP1V\n    IL --&gt; MP2V\n    IL --&gt; SIV\n    IL --&gt; URP\n\n    %% Styling\n\n    classDef serviceStyle fill:#930049,stroke:#ff0080,stroke-width:1px;\n    classDef repoStyle fill:#0f5132,stroke:#4b8f71,stroke-width:1px;\n    classDef controllerStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef modelStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef viewStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n\n    class CGMC,MGC,MP1C,MP2C controllerStyle;\n    class CGMV,SIV,MP1V,MP2V,URP viewStyle;\n    class PM,RM,FSM,MGSM,PEM modelStyle;\n    class ALS,IL serviceStyle;\n    class PR,RR,FSR repoStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#multiplayergamecontroller_1","title":"MultiplayerGameController","text":"<p>Zweck/Verantwortung: Zentraler Controller, der den Mehrspielermodus steuert, die Kommunikation zwischen Spieler 1 und Spieler 2 koordiniert und den Spielzustand verwaltet.</p> <p>Schnittstellen:</p> <ul> <li>Stellt Zugriff auf die Modelle f\u00fcr die Views bereit</li> <li>Koordiniert die Spiellogik und den Ablauf des Mehrspielermodus</li> <li>Verwaltet die Spieler-Controller</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Zentrale Steuerung des Spielablaufs</li> <li>Klare Trennung der Verantwortlichkeiten zwischen den Spieler-Controllern</li> <li>Robuste Fehlerbehandlung bei Benutzereingaben</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/controller/multiplayer/MultiplayerGameController.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>MultiplayerPlayer1Controller</code>: Verwaltet das Scannen von Produkten durch Spieler 1</li> <li><code>MultiplayerPlayer2Controller</code>: Verwaltet die Rezeptauswahl durch Spieler 2</li> </ul>"},{"location":"SAD/05_building_block_view/#fridgestockrepository_1","title":"FridgeStockRepository","text":"<p>Zweck/Verantwortung: Repository f\u00fcr die Verwaltung des K\u00fchlschrankinhalts, stellt CRUD-Operationen f\u00fcr die Speicherung und Abfrage von Produkten im K\u00fchlschrank bereit.</p> <p>Schnittstellen:</p> <ul> <li>Bietet Methoden zum Hinzuf\u00fcgen, Entfernen und Abfragen von Produkten im K\u00fchlschrank</li> <li>Nutzt QueryDSL f\u00fcr typsichere Datenbankabfragen</li> <li>Verwendet Spring Data JPA f\u00fcr grundlegende CRUD-Operationen</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Effiziente Datenbankzugriffe f\u00fcr schnelle Antwortzeiten</li> <li>Abstrahierung der Datenbankoperationen</li> <li>Transaktionale Sicherheit bei \u00c4nderungen</li> </ul> <p>Ablageort/Datei(en): <pre><code>src/main/java/ch/primeo/fridgely/service/FridgeStockRepository.java\n</code></pre></p> <p>Enthaltene Bausteine:</p> <ul> <li><code>FridgeStockJpaRepository</code>: JPA-Interface f\u00fcr grundlegende CRUD-Operationen</li> <li><code>QFridgeStock</code>: QueryDSL-generierte Klasse f\u00fcr typsichere Abfragen</li> </ul> <pre><code>flowchart TB\n  %% Pr\u00e4sentations\u2011Schicht\n  subgraph Pr\u00e4sentationsschicht\n    direction TB\n    BV[BaseView]\n    MP1V[MultiplayerPlayer1View]\n    MP2V[MultiplayerPlayer2View]\n  end\n\n  %% Anwendungs\u2011Schicht\n  subgraph Anwendungsschicht\n    direction TB\n    MGC[MultiplayerGameController]\n    MP1C[MultiplayerPlayer1Controller]\n    MP2C[MultiplayerPlayer2Controller]\n  end\n\n  %% Dom\u00e4nen\u2011Schicht\n  subgraph Dom\u00e4nenschicht\n    direction TB\n    FSM[FridgeStockModel]\n    RM[RecipeModel]\n    MGSM[MultiplayerGameStateModel]\n    PM[PenguinModel]\n  end\n\n  %% Daten\u2011Schicht\n  subgraph Datenschicht\n    direction TB\n    FSR[FridgeStockRepository]\n    RR[RecipeRepository]\n  end\n\n  %% Datenbank\n  DB[(SQLite DB)]\n\n  %% Interfaces als kleine Kreise mit Beschriftung\n  UI_CTRL((\"UI\u2011Controller&lt;br/&gt;Schnittstelle\"))\n  CTRL_MODEL((\"Controller\u2011Model&lt;br/&gt;Schnittstelle\"))\n  MODEL_REPO((\"Model\u2011Repository&lt;br/&gt;Schnittstelle\"))\n  REPO_DB((\"Repository\u2011DB&lt;br/&gt;Schnittstelle\"))\n\n  %% \u2500\u2500 unsichtbare Kanten zum Stapeln \u2500\u2500\n  BV --&gt; controller\n  controller --&gt; model\n  model --&gt; service\n\n  %% \u2500\u2500 Haupt\u2011Verbindungen \u2500\u2500\n  BV --&gt; UI_CTRL\n  UI_CTRL --&gt; MGC\n  MGC --&gt; CTRL_MODEL\n  CTRL_MODEL --&gt; FSM\n  FSM --&gt; MODEL_REPO\n  MODEL_REPO --&gt; FSR\n  FSR --&gt; REPO_DB\n  REPO_DB --&gt; DB\n\n  %% \u2500\u2500 Komposition MultiplayerGameController \u2192 PlayerControllers \u2500\u2500\n  MGC --&gt; MP1C\n  MGC --&gt; MP2C\n\n  %% \u2500\u2500 Spezifische Komponenten\u2011Verbindungen \u2500\u2500\n    MP1V -- PropertyChangeListener --&gt; MP1C\n    MP2V -- PropertyChangeListener --&gt; MP2C\n  MP1C -- Datenaustausch --&gt; FSM\n  MP2C -- Rezeptauswahl --&gt; RM \n  FSM  -- CRUD\u2011Operationen --&gt; FSR\n  RM   -- Abfragen --&gt; RR\n\n  %% \u2500\u2500 zus\u00e4tzliche Beziehungen des Controllers \u2500\u2500\n  MGC -- verwaltet --&gt; MGSM\n  MGC -- aktualisiert --&gt; PM</code></pre>"},{"location":"SAD/05_building_block_view/#enthaltene-bausteine","title":"Enthaltene Bausteine:","text":"<ul> <li>Pr\u00e4sentationsschicht:</li> <li><code>BaseView</code>: Abstrakte Basisklasse f\u00fcr alle Views mit JFrame-Management</li> <li><code>ChooseGameModeView</code>: Startbildschirm zur Auswahl des Spielmodus</li> <li><code>ScannedItemsView</code>: Zeigt K\u00fchlschrankinhalt auf zweitem Monitor an</li> <li><code>MultiplayerGameView</code>: Hauptansicht f\u00fcr den Mehrspielermodus, integriert die Spieleransichten</li> <li><code>MultiplayerPlayer1View</code>: UI f\u00fcr Spieler 1 im Mehrspielermodus zum Scannen von Produkten</li> <li><code>MultiplayerPlayer2View</code>: UI f\u00fcr Spieler 2 im Mehrspielermodus zur Rezeptauswahl</li> <li><code>PenguinReactionOverlay</code>: Zeigt Reaktionen des Pinguin-Charakters an</li> <li><code>UnifiedRecipePanel</code>: Wiederverwendbare Komponente zur Anzeige von Rezepten</li> <li><code>LanguageSwitchButton</code>: UI-Komponente zum Umschalten zwischen den verf\u00fcgbaren Sprachen</li> <li> <p><code>DialogBox</code>: Hilfsfunktionen f\u00fcr die Anzeige von Benachrichtigungen und Dialogfenstern</p> </li> <li> <p>Anwendungsschicht:</p> </li> <li><code>ChooseGameModeController</code>: Steuert die Spielmodusauswahl</li> <li><code>MultiplayerGameController</code>: Hauptcontroller f\u00fcr den Mehrspielermodus</li> <li><code>MultiplayerPlayer1Controller</code>: Verwaltet das Scannen von Produkten durch Spieler 1</li> <li><code>MultiplayerPlayer2Controller</code>: Verwaltet die Rezeptauswahl durch Spieler 2</li> <li> <p><code>MultiplayerGameLauncher</code>: Initialisiert und startet den Mehrspielermodus, verbindet Controller und Views</p> </li> <li> <p>Dom\u00e4nenschicht:</p> </li> <li><code>Product</code>: Repr\u00e4sentiert ein Lebensmittelprodukt mit Eigenschaften wie Bio und Lokalit\u00e4t</li> <li><code>Recipe</code>: Stellt ein Rezept mit Zutaten und mehrsprachigen Beschreibungen dar</li> <li><code>RecipeIngredient</code>: Entity-Klasse f\u00fcr die Zuordnung von Zutaten zu Rezepten</li> <li><code>FridgeStock</code>: Entity-Klasse zur Persistierung des K\u00fchlschrankinhalts</li> <li><code>FridgeStockModel</code>: Modellklasse zur Verwaltung des K\u00fchlschrankinhalts mit PropertyChangeSupport</li> <li><code>MultiplayerGameStateModel</code>: Verwaltet den Zustand einer Mehrspieler-Spielsitzung</li> <li><code>PenguinModel</code>: Verwaltet den Zustand des Pinguin-Charakters</li> <li><code>PenguinFacialExpression</code>: Enumeration f\u00fcr Gesichtsausdr\u00fccke des Pinguins</li> <li><code>PenguinHPState</code>: Enumeration f\u00fcr Gesundheitszust\u00e4nde des Pinguins</li> <li> <p><code>GameMode</code>: Enumeration f\u00fcr die verschiedenen Spielmodi</p> </li> <li> <p>Datenschicht:</p> </li> <li><code>FridgeStockRepository</code>: Verwaltet den K\u00fchlschrankinhalt (Hinzuf\u00fcgen, Entfernen, Abfragen)</li> <li><code>FridgeStockJpaRepository</code>: JPA-Interface f\u00fcr grundlegende CRUD-Operationen</li> <li><code>ProductRepository</code>: Stellt Produkte und deren Eigenschaften bereit</li> <li> <p><code>RecipeRepository</code>: Verwaltet Rezepte und deren Zuordnung zu Zutaten</p> </li> <li> <p>Querschnittskomponenten:</p> </li> <li><code>ImageLoader</code>: L\u00e4dt und verwaltet Bild-Ressourcen (Singleton)</li> <li><code>AppLocalizationService</code>: Verwaltet die mehrsprachige Unterst\u00fctzung der Anwendung (Singleton)</li> <li><code>Constants</code>: Enth\u00e4lt anwendungsweite Konstanten</li> <li><code>AppConfig</code>: Konfiguriert Spring-Anwendungskontext und Komponenten-Scanning</li> <li><code>DataLoader</code>: L\u00e4dt initiale Daten in die Datenbank beim Anwendungsstart</li> <li><code>GameConfig</code>: Konfigurationseinstellungen f\u00fcr das Spiel</li> <li><code>LocalizationObserver</code>: Interface f\u00fcr lokalisierte UI-Komponenten</li> </ul> <p>Die Bausteinsicht zeigt die modulare Architektur des Fridgely-Systems, das auf dem MVC-Pattern basiert. Jedes Modul ist f\u00fcr spezifische Funktionen verantwortlich und kommuniziert \u00fcber klar definierte Schnittstellen. Dies erm\u00f6glicht eine einfache Wartbarkeit, Testbarkeit und Erweiterbarkeit des Systems.</p> <pre><code>graph LR\n    %% Cross-cutting components\n    subgraph Querschnittskomponenten\n        ALS[AppLocalizationService]\n        IL[ImageLoader]\n        C[Constants]\n        GC[GameConfig]\n        LO[LocalizationObserver]\n    end\n\n    %% Main app layers\n    subgraph PS[Pr\u00e4sentationsschicht]\n        BV[BaseView]\n        subgraph Views\n            MP1V[MultiplayerPlayer1View]\n            MP2V[MultiplayerPlayer2View]\n            SIV[ScannedItemsView]\n        end\n    end\n\n    subgraph AS[Anwendungsschicht]\n        BC[BaseController]\n        subgraph Controllers\n            MGC[MultiplayerGameController]\n            MP1C[MultiplayerPlayer1Controller]\n            MP2C[MultiplayerPlayer2Controller]\n        end\n    end\n\n    subgraph DS[Dom\u00e4nenschicht]\n        Models\n    end\n\n    %% Connections\n    ALS --&gt; LO\n    LO -.-&gt; BV\n    BV --&gt; Views\n\n    IL --&gt; PS\n\n    C --&gt; PS\n    C --&gt; AS\n    C --&gt; DS\n\n    GC --&gt; Controllers\n\n    %% Styling\n    classDef compStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef viewStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n    classDef ctrlStyle fill:#1e3a59,stroke:#6fb1fc,stroke-width:1px;\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n\n    class ALS,IL,C,GC,LO compStyle;\n    class PS,BV,MP1V,MP2V,SIV,Views viewStyle;\n    class AS,BC,MGC,MP1C,MP2C,Controllers ctrlStyle;\n    class PS,AS,DS layerStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#imageloader_1","title":"ImageLoader","text":"<p>Zweck/Verantwortung: L\u00e4dt und verwaltet Bild-Ressourcen f\u00fcr die Anwendung, stellt sicher, dass Bilder in der richtigen Gr\u00f6sse und Aufl\u00f6sung vorliegen und optimiert die Ladezeiten durch Caching.</p> <p>Schnittstellen:</p> <ul> <li>Bietet Methoden zum Laden von Bildern aus Ressourcen oder Dateien</li> <li>Unterst\u00fctzt verschiedene Bildformate und -gr\u00f6ssen</li> <li>Implementiert Lazy Loading und Caching f\u00fcr optimierte Ladezeiten</li> </ul> <p>Qualit\u00e4ts-/Leistungsmerkmale:</p> <ul> <li>Schnelle Ladezeiten durch Caching und optimierte Bildgr\u00f6ssen</li> <li>Unterst\u00fctzung f\u00fcr verschiedene Bildformate (JPEG, PNG, GIF)</li> <li>Einfache Integration in die Views zur dynamischen Anzeige von Bildern</li> </ul> <p>Ablageort/Datei(en): </p> <pre><code>src/main/java/ch/primeo/fridgely/util/ImageLoader.java\n</code></pre> <p>Enthaltene Bausteine:</p> <ul> <li><code>ImageLoader</code>: Hauptklasse zum Laden und Verwalten von Bildern mit integriertem Caching \u00fcber ConcurrentMap</li> <li>Interne Bildbearbeitungsmethoden f\u00fcr Skalierung und Format-Konvertierung</li> </ul> <pre><code>graph TD\n    %% ImageLoader components\n    subgraph ImageLoader\n        IL[ImageLoader]\n        IC[ImageCache]\n        IU[ImageUtil]\n    end\n\n    %% Connections\n    IL --&gt; IC\n    IL --&gt; IU\n\n    %% Styling\n    classDef loaderStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n\n    class ImageLoader,ImageCache,ImageUtil loaderStyle;</code></pre>"},{"location":"SAD/05_building_block_view/#enthaltene-bausteine_1","title":"Enthaltene Bausteine:","text":"<ul> <li>ImageLoader:</li> <li><code>ImageLoader</code>: Hauptklasse zum Laden und Verwalten von Bildern mit integriertem Caching \u00fcber ConcurrentMap</li> <li>Interne Bildbearbeitungsmethoden f\u00fcr Skalierung und Format-Konvertierung</li> </ul> <p>Die Querschnittskomponenten des Fridgely-Systems bieten wichtige unterst\u00fctzende Funktionen, die von mehreren Bausteinen der Anwendung genutzt werden. Dazu geh\u00f6ren die mehrsprachige Unterst\u00fctzung durch <code>AppLocalizationService</code>, das Laden und Caching von Bildern durch <code>ImageLoader</code> sowie zentrale Konfigurations- und Konstantenverwaltung. Diese Komponenten sind entscheidend f\u00fcr die Einhaltung der Qualit\u00e4tsmerkmale wie Wartbarkeit, Erweiterbarkeit und Leistung der Anwendung.</p>"},{"location":"SAD/05_building_block_view/#zusammenfassung-und-bewertung","title":"Zusammenfassung und Bewertung","text":"<ol> <li> <p>Modularer Aufbau: Die Anwendung ist in klar abgegrenzte Komponenten mit definierten Verantwortlichkeiten unterteilt, was die Wartbarkeit und Erweiterbarkeit f\u00f6rdert.</p> </li> <li> <p>Observer-Pattern: Durchg\u00e4ngige Verwendung des Observer-Patterns (PropertyChangeSupport/PropertyChangeListener) f\u00fcr die ereignisbasierte Aktualisierung der UI-Komponenten.</p> </li> <li> <p>Mehrsprachigkeit: Durchg\u00e4ngige Unterst\u00fctzung von Mehrsprachigkeit durch den AppLocalizationService und das LocalizationObserver-Interface.</p> </li> <li> <p>Klare Schichtenarchitektur: Die Trennung in Pr\u00e4sentations-, Anwendungs-, Dom\u00e4nen- und Datenschicht erm\u00f6glicht eine klare Zuordnung von Verantwortlichkeiten.</p> </li> <li> <p>Spring Framework: Nutzung von Spring f\u00fcr Dependency Injection und Konfigurationsmanagement, was die Testbarkeit und Modularit\u00e4t verbessert.</p> </li> </ol>"},{"location":"SAD/06_runtime_view/","title":"Laufzeitsicht","text":""},{"location":"SAD/06_runtime_view/#6-laufzeitsicht","title":"6. Laufzeitsicht","text":""},{"location":"SAD/06_runtime_view/#einfuhrung-zur-laufzeitsicht","title":"Einf\u00fchrung zur Laufzeitsicht","text":"<p>Die Laufzeitsicht erkl\u00e4rt konkrete Abl\u00e4ufe und Beziehungen zwischen Bausteinen des Fridgely-Systems in Form von Szenarien. Diese Szenarien veranschaulichen, wie die verschiedenen Komponenten miteinander interagieren, um bestimmte Funktionen zu erf\u00fcllen. Insbesondere betrachten wir Szenarien aus den folgenden Bereichen:</p> <ul> <li>Wichtige Abl\u00e4ufe und Kernfunktionen: Wie f\u00fchren die Bausteine der Architektur die wichtigsten Abl\u00e4ufe durch? </li> <li>Interaktionen an kritischen Schnittstellen: Wie arbeiten die Systembausteine mit Benutzern und externen Systemen zusammen?</li> <li>Betrieb und Administration: Inbetriebnahme, Start, Stop und Wartungsprozesse.</li> <li>Fehler- und Ausnahmeszenarien: Wie reagiert das System bei Fehlersituationen?</li> </ul> <p>Bei der Auswahl der Szenarien haben wir uns auf diejenigen konzentriert, die besonders architekturrelevant sind und das Zusammenspiel der Hauptkomponenten am besten veranschaulichen. F\u00fcr jedes Szenario beschreiben wir ausf\u00fchrlich die Abl\u00e4ufe, Besonderheiten und Herausforderungen, um ein umfassendes Verst\u00e4ndnis des Systems zu erm\u00f6glichen.</p>"},{"location":"SAD/06_runtime_view/#laufzeitsicht-sequenzdiagramme","title":"Laufzeitsicht - Sequenzdiagramme","text":"\ud83d\ude80 Main-Controller <p>Sequenzdiagramm des Main-Controllers im Fridgely-System.</p> Herunterladen \u2696\ufe0f Choose GameMode Controller <p>Sequenzdiagramm des Choose GameMode Controllers im Fridgely-System.</p> Herunterladen \ud83d\udc65 Multiplayer GameLauncher <p>Sequenzdiagramm des Multiplayer GameLaunchers im Fridgely-System.</p> Herunterladen"},{"location":"SAD/06_runtime_view/#laufzeitsicht-szenarien","title":"Laufzeitsicht - Szenarien","text":""},{"location":"SAD/06_runtime_view/#szenario-1-auswahl-des-spielmodus","title":"Szenario 1: Auswahl des Spielmodus","text":"<p>Dieses Szenario beschreibt den Ablauf der Auswahl eines Spielmodus (Einzelspieler oder Mehrspieler) durch den Benutzer und die anschliessende Initialisierung des Spiels. Es handelt sich um einen der Haupteinstiegspunkte in die Anwendung.</p>"},{"location":"SAD/06_runtime_view/#spielstart-diagramm","title":"Spielstart Diagramm","text":"<pre><code>sequenceDiagram\nactor User\nUser -&gt;&gt; Fridgely : main\nactivate Fridgely\nFridgely -&gt;&gt; Fridgely : detectScreens\nactivate Fridgely\nFridgely -&gt;&gt; GraphicsEnvironment : getLocalGraphicsEnvironment\nactivate GraphicsEnvironment\nGraphicsEnvironment --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsEnvironment\nFridgely -&gt;&gt; GraphicsEnvironment : getScreenDevices\nactivate GraphicsEnvironment\nGraphicsEnvironment --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsEnvironment\nloop screens\nFridgely -&gt;&gt; GraphicsDevice : getDefaultConfiguration\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsDevice\nFridgely -&gt;&gt; GraphicsConfiguration : getBounds\nactivate GraphicsConfiguration\nGraphicsConfiguration --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsConfiguration\nalt bounds.width == 600 &amp;&amp; bounds.height == 1024\nFridgely -&gt;&gt; Logger : info\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nFridgely -&gt;&gt; GraphicsDevice : getIDstring\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsDevice\nelse \nalt bounds.width == 1080 &amp;&amp; bounds.height == 1920\nFridgely -&gt;&gt; Logger : info\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nFridgely -&gt;&gt; GraphicsDevice : getIDstring\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsDevice\nend\nend\nend\nalt mainAppScreen == null\nFridgely -&gt;&gt; GraphicsEnvironment : getDefaultScreenDevice\nactivate GraphicsEnvironment\nGraphicsEnvironment --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsEnvironment\nFridgely -&gt;&gt; Logger : warning\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nFridgely -&gt;&gt; GraphicsDevice : getIDstring\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsDevice\nend\nalt scannedItemsScreen == null\nalt screens.length &gt; 1\nloop screens\nalt screen != mainAppScreen\nFridgely -&gt;&gt; Logger : warning\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nFridgely -&gt;&gt; GraphicsDevice : getIDstring\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; Fridgely : #32; \ndeactivate GraphicsDevice\nend\nend\nend\nalt scannedItemsScreen == null\nFridgely -&gt;&gt; Logger : warning\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nend\nend\nFridgely -&gt;&gt; Logger : severe\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nFridgely -&gt;&gt; Throwable : getMessage\nactivate Throwable\nThrowable --&gt;&gt; Fridgely : #32; \ndeactivate Throwable\nFridgely --&gt;&gt; Fridgely : #32; \ndeactivate Fridgely\nFridgely -&gt;&gt; SpringApplicationBuilder : new\nactivate SpringApplicationBuilder\nSpringApplicationBuilder --&gt;&gt; Fridgely : #32; \ndeactivate SpringApplicationBuilder\nFridgely -&gt;&gt; SpringApplicationBuilder : headless\nactivate SpringApplicationBuilder\nSpringApplicationBuilder --&gt;&gt; Fridgely : #32; \ndeactivate SpringApplicationBuilder\nFridgely -&gt;&gt; SpringApplicationBuilder : run\nactivate SpringApplicationBuilder\nSpringApplicationBuilder --&gt;&gt; Fridgely : #32; \ndeactivate SpringApplicationBuilder\nFridgely -&gt;&gt; BeanFactory : getBean\nactivate BeanFactory\nBeanFactory --&gt;&gt; Fridgely : #32; \ndeactivate BeanFactory\nFridgely -&gt;&gt; ImageLoader : preloadAllImages\nactivate ImageLoader\nImageLoader -&gt;&gt; PenguinFacialExpression : getSprite\nactivate PenguinFacialExpression\nalt this\nelse HAPPY\nelse NEUTRAL\nelse ALERT\nelse CRITICAL\nelse ANGRY\nelse DISAPPOINTED\nnote right of PenguinFacialExpression : Empty\nend\nPenguinFacialExpression --&gt;&gt; ImageLoader : #32; \ndeactivate PenguinFacialExpression\nImageLoader -&gt;&gt; PenguinFacialExpression : getSprite\nactivate PenguinFacialExpression\nalt this\nelse HAPPY\nelse NEUTRAL\nelse ALERT\nelse CRITICAL\nelse ANGRY\nelse DISAPPOINTED\nnote right of PenguinFacialExpression : Empty\nend\nPenguinFacialExpression --&gt;&gt; ImageLoader : #32; \ndeactivate PenguinFacialExpression\nImageLoader -&gt;&gt; PenguinFacialExpression : getSprite\nactivate PenguinFacialExpression\nalt this\nelse HAPPY\nelse NEUTRAL\nelse ALERT\nelse CRITICAL\nelse ANGRY\nelse DISAPPOINTED\nnote right of PenguinFacialExpression : Empty\nend\nPenguinFacialExpression --&gt;&gt; ImageLoader : #32; \ndeactivate PenguinFacialExpression\nImageLoader -&gt;&gt; PenguinFacialExpression : getSprite\nactivate PenguinFacialExpression\nalt this\nelse HAPPY\nelse NEUTRAL\nelse ALERT\nelse CRITICAL\nelse ANGRY\nelse DISAPPOINTED\nnote right of PenguinFacialExpression : Empty\nend\nPenguinFacialExpression --&gt;&gt; ImageLoader : #32; \ndeactivate PenguinFacialExpression\nImageLoader -&gt;&gt; PenguinFacialExpression : getSprite\nactivate PenguinFacialExpression\nalt this\nelse HAPPY\nelse NEUTRAL\nelse ALERT\nelse CRITICAL\nelse ANGRY\nelse DISAPPOINTED\nnote right of PenguinFacialExpression : Empty\nend\nPenguinFacialExpression --&gt;&gt; ImageLoader : #32; \ndeactivate PenguinFacialExpression\nImageLoader -&gt;&gt; ImageLoader : preloadScaledImages\nactivate ImageLoader\nloop imagePaths\nImageLoader -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ResourceLoader : getResource\nactivate ResourceLoader\nResourceLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ResourceLoader\nImageLoader -&gt;&gt; InputStreamSource : getInputStream\nactivate InputStreamSource\nInputStreamSource --&gt;&gt; ImageLoader : #32; \ndeactivate InputStreamSource\nImageLoader -&gt;&gt; InputStream : readAllBytes\nactivate InputStream\nInputStream --&gt;&gt; ImageLoader : #32; \ndeactivate InputStream\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; PrintStream : println\nactivate PrintStream\nPrintStream --&gt;&gt; ImageLoader : #32; \ndeactivate PrintStream\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader -&gt;&gt; ImageIcon : getImage\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; Image : getScaledInstance\nactivate Image\nImage --&gt;&gt; ImageLoader : #32; \ndeactivate Image\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader -&gt;&gt; PathMatchingResourcePatternResolver : new\nactivate PathMatchingResourcePatternResolver\nPathMatchingResourcePatternResolver --&gt;&gt; ImageLoader : #32; \ndeactivate PathMatchingResourcePatternResolver\nImageLoader -&gt;&gt; PathMatchingResourcePatternResolver : getResources\nactivate PathMatchingResourcePatternResolver\nPathMatchingResourcePatternResolver --&gt;&gt; ImageLoader : #32; \ndeactivate PathMatchingResourcePatternResolver\nImageLoader -&gt;&gt; Arrays : stream\nactivate Arrays\nArrays --&gt;&gt; ImageLoader : #32; \ndeactivate Arrays\nImageLoader -&gt;&gt; Stream : map\nactivate Stream\nStream -&gt;&gt; ImageLoader : resource -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; Resource : getFilename\nactivate Resource\nResource --&gt;&gt; ImageLoader : #32; \ndeactivate Resource\nImageLoader --&gt;&gt; Stream : #32; \ndeactivate ImageLoader\nStream --&gt;&gt; ImageLoader : #32; \ndeactivate Stream\nImageLoader -&gt;&gt; Stream : toArray\nactivate Stream\nStream --&gt;&gt; ImageLoader : #32; \ndeactivate Stream\nImageLoader -&gt;&gt; ImageLoader : preloadScaledImages\nactivate ImageLoader\nloop imagePaths\nImageLoader -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ResourceLoader : getResource\nactivate ResourceLoader\nResourceLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ResourceLoader\nImageLoader -&gt;&gt; InputStreamSource : getInputStream\nactivate InputStreamSource\nInputStreamSource --&gt;&gt; ImageLoader : #32; \ndeactivate InputStreamSource\nImageLoader -&gt;&gt; InputStream : readAllBytes\nactivate InputStream\nInputStream --&gt;&gt; ImageLoader : #32; \ndeactivate InputStream\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; PrintStream : println\nactivate PrintStream\nPrintStream --&gt;&gt; ImageLoader : #32; \ndeactivate PrintStream\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader -&gt;&gt; ImageIcon : getImage\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; Image : getScaledInstance\nactivate Image\nImage --&gt;&gt; ImageLoader : #32; \ndeactivate Image\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : preloadImages\nactivate ImageLoader\nloop imagePaths\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ResourceLoader : getResource\nactivate ResourceLoader\nResourceLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ResourceLoader\nImageLoader -&gt;&gt; InputStreamSource : getInputStream\nactivate InputStreamSource\nInputStreamSource --&gt;&gt; ImageLoader : #32; \ndeactivate InputStreamSource\nImageLoader -&gt;&gt; InputStream : readAllBytes\nactivate InputStream\nInputStream --&gt;&gt; ImageLoader : #32; \ndeactivate InputStream\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; PrintStream : println\nactivate PrintStream\nPrintStream --&gt;&gt; ImageLoader : #32; \ndeactivate PrintStream\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; Fridgely : #32; \ndeactivate ImageLoader\nFridgely -&gt;&gt; Logger : severe\nactivate Logger\nLogger --&gt;&gt; Fridgely : #32; \ndeactivate Logger\nFridgely -&gt;&gt; Throwable : getMessage\nactivate Throwable\nThrowable --&gt;&gt; Fridgely : #32; \ndeactivate Throwable\nFridgely -&gt;&gt; System : exit\nactivate System\nSystem --&gt;&gt; Fridgely : #32; \ndeactivate System\nFridgely -&gt;&gt; BeanFactory : getBean\nactivate BeanFactory\nBeanFactory --&gt;&gt; Fridgely : #32; \ndeactivate BeanFactory\ndeactivate Fridgely</code></pre>"},{"location":"SAD/06_runtime_view/#beschreibung","title":"Beschreibung","text":"<ol> <li> <p>Der Benutzer startet die Anwendung:</p> <ul> <li>Die <code>Main</code>-Klasse initialisiert das Fridgely-System.</li> <li>Das System erkennt die verf\u00fcgbaren Bildschirme und konfiguriert die Anzeige entsprechend.</li> <li>Der <code>ChooseGameModeController</code> wird instanziiert.</li> </ul> </li> <li> <p>Die Startoberfl\u00e4che wird vorbereitet:</p> <ul> <li>Der Controller erstellt eine neue <code>ChooseGameModeView</code>.</li> <li>Die View wird mit Bildern und Text f\u00fcr die Spielmodusauswahl initialisiert.</li> <li>Das Hauptfenster wird dem Benutzer angezeigt.</li> </ul> </li> <li> <p>Der Benutzer navigiert in der Oberfl\u00e4che:</p> <ul> <li>Zwei Hauptoptionen werden angeboten: \"Einzelspieler\" und \"Mehrspieler\".</li> <li>Jede Option ist mit intuitiven Bildern und Tooltips versehen.</li> <li>Der Mauszeiger \u00e4ndert sich beim \u00dcberfahren der klickbaren Elemente.</li> </ul> </li> <li> <p>Der Benutzer w\u00e4hlt einen Spielmodus aus:</p> <ul> <li>Durch Klicken auf eines der Symbole wird die Methode <code>selectGameMode(GameMode mode)</code> aufgerufen.</li> <li>Der Controller verarbeitet die Auswahl und bestimmt den weiteren Ablauf.</li> </ul> </li> <li> <p>Ein Tutorial wird angezeigt:</p> <ul> <li>Abh\u00e4ngig vom gew\u00e4hlten Spielmodus wird ein spezifisches Tutorial geladen.</li> <li>Das Tutorial erkl\u00e4rt die Spielregeln und Interaktionsm\u00f6glichkeiten.</li> <li>Der Benutzer navigiert durch die Tutorial-Schritte mit \"Weiter\"-Buttons.</li> </ul> </li> <li> <p>Der entsprechende Spielmodus wird gestartet:</p> <ul> <li>F\u00fcr den Einzelspielermodus: Die Methode <code>startSinglePlayerGame()</code> wird aufgerufen, welche aktuell als Platzhalter implementiert ist (TODO).</li> <li>F\u00fcr den Mehrspielermodus: Die Methode <code>startMultiplayerGame()</code> wird aufgerufen.</li> <li>F\u00fcr den Mehrspielermodus \u00fcbernimmt der <code>MultiplayerGameLauncher</code> die Initialisierung. Ein <code>SinglePlayerGameLauncher</code> ist in der aktuellen Implementierung noch nicht vorhanden.</li> </ul> </li> </ol>"},{"location":"SAD/06_runtime_view/#besonderheiten","title":"Besonderheiten","text":"<ul> <li>Die Benutzeroberfl\u00e4che ist kindgerecht gestaltet mit grossen, farbigen Symbolen.</li> <li>Die Tooltips bieten zus\u00e4tzliche Erkl\u00e4rungen ohne den Bildschirm zu \u00fcberladen.</li> <li>Die Lokalisierung erfolgt \u00fcber den <code>AppLocalizationService</code>, der dynamische Sprach\u00e4nderungen unterst\u00fctzt.</li> <li>Das Tutorial kann \u00fcbersprungen werden, wenn der Benutzer bereits mit dem Spiel vertraut ist.</li> <li>Alle UI-Komponenten passen sich automatisch an die verf\u00fcgbaren Bildschirme an.</li> </ul>"},{"location":"SAD/06_runtime_view/#diagramm","title":"Diagramm","text":"<p>Das folgende Sequenzdiagramm zeigt den Ablauf der Spielmodusauswahl und die anschliessende Initialisierung des Mehrspielermodus:</p> <pre><code>sequenceDiagram\nactor User\nUser -&gt;&gt; ChooseGameModeController : new\nactivate ChooseGameModeController\nChooseGameModeController -&gt;&gt; ChooseGameModeView : new\nactivate ChooseGameModeView\nalt !Fridgely.isSingleDisplay\nChooseGameModeView -&gt;&gt; GraphicsDevice : setFullScreenWindow\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; ChooseGameModeView : #32; \ndeactivate GraphicsDevice\nelse \nChooseGameModeView -&gt;&gt; GraphicsDevice : getDefaultConfiguration\nactivate GraphicsDevice\nGraphicsDevice --&gt;&gt; ChooseGameModeView : #32; \ndeactivate GraphicsDevice\nChooseGameModeView -&gt;&gt; GraphicsConfiguration : getBounds\nactivate GraphicsConfiguration\nGraphicsConfiguration --&gt;&gt; ChooseGameModeView : #32; \ndeactivate GraphicsConfiguration\nChooseGameModeView -&gt;&gt; Window : setBounds\nactivate Window\nWindow --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Window\nChooseGameModeView -&gt;&gt; Frame : setUndecorated\nactivate Frame\nFrame --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Frame\nend\nChooseGameModeView -&gt;&gt; ChooseGameModeView : initializeComponents\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JPanel : new\nactivate JPanel\nJPanel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JPanel\nChooseGameModeView -&gt;&gt; JLabel : new\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; JPanel : new\nactivate JPanel\nJPanel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JPanel\nChooseGameModeView -&gt;&gt; JPanel : new\nactivate JPanel\nJPanel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JPanel\nChooseGameModeView -&gt;&gt; ChooseGameModeView : createImageLabel\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JLabel : new\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; JComponent : setAlignmentX\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ResourceLoader : getResource\nactivate ResourceLoader\nResourceLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ResourceLoader\nImageLoader -&gt;&gt; InputStreamSource : getInputStream\nactivate InputStreamSource\nInputStreamSource --&gt;&gt; ImageLoader : #32; \ndeactivate InputStreamSource\nImageLoader -&gt;&gt; InputStream : readAllBytes\nactivate InputStream\nInputStream --&gt;&gt; ImageLoader : #32; \ndeactivate InputStream\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; PrintStream : println\nactivate PrintStream\nPrintStream --&gt;&gt; ImageLoader : #32; \ndeactivate PrintStream\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader -&gt;&gt; ImageIcon : getImage\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; Image : getScaledInstance\nactivate Image\nImage --&gt;&gt; ImageLoader : #32; \ndeactivate Image\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ImageLoader\nalt scaledIcon != null\nChooseGameModeView -&gt;&gt; JLabel : setIcon\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nelse \nChooseGameModeView -&gt;&gt; JLabel : setText\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nend\nChooseGameModeView --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JLabel : new\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; JPanel : new\nactivate JPanel\nJPanel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JPanel\nChooseGameModeView -&gt;&gt; ChooseGameModeView : createImageLabel\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JLabel : new\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; JComponent : setAlignmentX\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ConcurrentMap : computeIfAbsent\nactivate ConcurrentMap\nConcurrentMap -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ResourceLoader : getResource\nactivate ResourceLoader\nResourceLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ResourceLoader\nImageLoader -&gt;&gt; InputStreamSource : getInputStream\nactivate InputStreamSource\nInputStreamSource --&gt;&gt; ImageLoader : #32; \ndeactivate InputStreamSource\nImageLoader -&gt;&gt; InputStream : readAllBytes\nactivate InputStream\nInputStream --&gt;&gt; ImageLoader : #32; \ndeactivate InputStream\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; PrintStream : println\nactivate PrintStream\nPrintStream --&gt;&gt; ImageLoader : #32; \ndeactivate PrintStream\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader -&gt;&gt; ImageIcon : getImage\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader -&gt;&gt; Image : getScaledInstance\nactivate Image\nImage --&gt;&gt; ImageLoader : #32; \ndeactivate Image\nImageLoader -&gt;&gt; ImageIcon : new\nactivate ImageIcon\nImageIcon --&gt;&gt; ImageLoader : #32; \ndeactivate ImageIcon\nImageLoader --&gt;&gt; ConcurrentMap : #32; \ndeactivate ImageLoader\nConcurrentMap --&gt;&gt; ImageLoader : #32; \ndeactivate ConcurrentMap\nImageLoader --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ImageLoader\nalt scaledIcon != null\nChooseGameModeView -&gt;&gt; JLabel : setIcon\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nelse \nChooseGameModeView -&gt;&gt; JLabel : setText\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nend\nChooseGameModeView --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JLabel : new\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; ChooseGameModeView : setupLayout\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; BorderLayout : new\nactivate BorderLayout\nBorderLayout --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BorderLayout\nChooseGameModeView -&gt;&gt; Container : setLayout\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; JComponent : setBackground\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; BorderLayout : new\nactivate BorderLayout\nBorderLayout --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BorderLayout\nChooseGameModeView -&gt;&gt; JPanel : new\nactivate JPanel\nJPanel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JPanel\nChooseGameModeView -&gt;&gt; JComponent : setBackground\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; BorderFactory : createEmptyBorder\nactivate BorderFactory\nBorderFactory --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BorderFactory\nChooseGameModeView -&gt;&gt; JComponent : setBorder\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; JLabel : setHorizontalAlignment\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; Component : getFont\nactivate Component\nComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Component\nChooseGameModeView -&gt;&gt; Font : getName\nactivate Font\nFont --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Font\nChooseGameModeView -&gt;&gt; Font : new\nactivate Font\nFont --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Font\nChooseGameModeView -&gt;&gt; JComponent : setFont\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; BoxLayout : new\nactivate BoxLayout\nBoxLayout --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BoxLayout\nChooseGameModeView -&gt;&gt; Container : setLayout\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; JComponent : setBackground\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; \"Box\" : createHorizontalGlue\nactivate \"Box\"\n\"Box\" --&gt;&gt; ChooseGameModeView : #32; \ndeactivate \"Box\"\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; ChooseGameModeView : setupGameModePanel\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JComponent : setBackground\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; BorderFactory : createEmptyBorder\nactivate BorderFactory\nBorderFactory --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BorderFactory\nChooseGameModeView -&gt;&gt; JComponent : setBorder\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; BoxLayout : new\nactivate BoxLayout\nBoxLayout --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BoxLayout\nChooseGameModeView -&gt;&gt; Container : setLayout\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; JComponent : setAlignmentX\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; Dimension : new\nactivate Dimension\nDimension --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Dimension\nChooseGameModeView -&gt;&gt; \"Box\" : createRigidArea\nactivate \"Box\"\n\"Box\" --&gt;&gt; ChooseGameModeView : #32; \ndeactivate \"Box\"\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; JComponent : setAlignmentX\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; JLabel : setHorizontalAlignment\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; ChooseGameModeView : setupGameModePanel\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JComponent : setBackground\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; BorderFactory : createEmptyBorder\nactivate BorderFactory\nBorderFactory --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BorderFactory\nChooseGameModeView -&gt;&gt; JComponent : setBorder\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; BoxLayout : new\nactivate BoxLayout\nBoxLayout --&gt;&gt; ChooseGameModeView : #32; \ndeactivate BoxLayout\nChooseGameModeView -&gt;&gt; Container : setLayout\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; JComponent : setAlignmentX\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; Dimension : new\nactivate Dimension\nDimension --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Dimension\nChooseGameModeView -&gt;&gt; \"Box\" : createRigidArea\nactivate \"Box\"\n\"Box\" --&gt;&gt; ChooseGameModeView : #32; \ndeactivate \"Box\"\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; JComponent : setAlignmentX\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; JLabel : setHorizontalAlignment\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; Dimension : new\nactivate Dimension\nDimension --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Dimension\nChooseGameModeView -&gt;&gt; \"Box\" : createRigidArea\nactivate \"Box\"\n\"Box\" --&gt;&gt; ChooseGameModeView : #32; \ndeactivate \"Box\"\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; \"Box\" : createHorizontalGlue\nactivate \"Box\"\n\"Box\" --&gt;&gt; ChooseGameModeView : #32; \ndeactivate \"Box\"\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; GridBagLayout : new\nactivate GridBagLayout\nGridBagLayout --&gt;&gt; ChooseGameModeView : #32; \ndeactivate GridBagLayout\nChooseGameModeView -&gt;&gt; JPanel : new\nactivate JPanel\nJPanel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JPanel\nChooseGameModeView -&gt;&gt; JComponent : setBackground\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView -&gt;&gt; Container : add\nactivate Container\nContainer --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Container\nChooseGameModeView --&gt;&gt; ChooseGameModeView : #32; \ndeactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; JFrame : setContentPane\nactivate JFrame\nJFrame --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JFrame\nChooseGameModeView --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeView\nChooseGameModeController -&gt;&gt; ChooseGameModeView : getFrame\nactivate ChooseGameModeView\nChooseGameModeView --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeView\nChooseGameModeController -&gt;&gt; WindowAdapter : new\nactivate WindowAdapter\nWindowAdapter --&gt;&gt; ChooseGameModeController : #32; \ndeactivate WindowAdapter\nChooseGameModeController -&gt;&gt; Window : addWindowListener\nactivate Window\nWindow --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Window\nChooseGameModeController -&gt;&gt; ChooseGameModeView : getSinglePlayerImageLabel\nactivate ChooseGameModeView\nChooseGameModeView --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeView\nChooseGameModeController -&gt;&gt; ChooseGameModeController : setupClickableBehavior\nactivate ChooseGameModeController\nChooseGameModeController -&gt;&gt; Cursor : new\nactivate Cursor\nCursor --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Cursor\nChooseGameModeController -&gt;&gt; Component : setCursor\nactivate Component\nComponent --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Component\nChooseGameModeController -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeController : #32; \ndeactivate AppLocalizationService\nChooseGameModeController -&gt;&gt; JComponent : setToolTipText\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeController : #32; \ndeactivate JComponent\nChooseGameModeController -&gt;&gt; MouseAdapter : new\nactivate MouseAdapter\nMouseAdapter --&gt;&gt; ChooseGameModeController : #32; \ndeactivate MouseAdapter\nChooseGameModeController -&gt;&gt; Component : addMouseListener\nactivate Component\nComponent --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Component\nChooseGameModeController --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeController\nChooseGameModeController -&gt;&gt; ChooseGameModeView : getMultiplayerImageLabel\nactivate ChooseGameModeView\nChooseGameModeView --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeView\nChooseGameModeController -&gt;&gt; ChooseGameModeController : setupClickableBehavior\nactivate ChooseGameModeController\nChooseGameModeController -&gt;&gt; Cursor : new\nactivate Cursor\nCursor --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Cursor\nChooseGameModeController -&gt;&gt; Component : setCursor\nactivate Component\nComponent --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Component\nChooseGameModeController -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeController : #32; \ndeactivate AppLocalizationService\nChooseGameModeController -&gt;&gt; JComponent : setToolTipText\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeController : #32; \ndeactivate JComponent\nChooseGameModeController -&gt;&gt; MouseAdapter : new\nactivate MouseAdapter\nMouseAdapter --&gt;&gt; ChooseGameModeController : #32; \ndeactivate MouseAdapter\nChooseGameModeController -&gt;&gt; Component : addMouseListener\nactivate Component\nComponent --&gt;&gt; ChooseGameModeController : #32; \ndeactivate Component\nChooseGameModeController --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeController\nChooseGameModeController -&gt;&gt; AppLocalizationService : subscribe\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; CopyOnWriteArrayList : add\nactivate CopyOnWriteArrayList\nCopyOnWriteArrayList --&gt;&gt; AppLocalizationService : #32; \ndeactivate CopyOnWriteArrayList\nAppLocalizationService --&gt;&gt; ChooseGameModeController : #32; \ndeactivate AppLocalizationService\nChooseGameModeController -&gt;&gt; ChooseGameModeView : onLocaleChanged\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AppLocalizationService\nChooseGameModeView -&gt;&gt; JLabel : setText\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AppLocalizationService\nChooseGameModeView -&gt;&gt; JLabel : setText\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AppLocalizationService\nChooseGameModeView -&gt;&gt; JLabel : setText\nactivate JLabel\nJLabel --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JLabel\nChooseGameModeView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AppLocalizationService\nChooseGameModeView -&gt;&gt; JComponent : setToolTipText\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AppLocalizationService\nChooseGameModeView -&gt;&gt; JComponent : setToolTipText\nactivate JComponent\nJComponent --&gt;&gt; ChooseGameModeView : #32; \ndeactivate JComponent\nChooseGameModeView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService -&gt;&gt; ResourceBundle : getString\nactivate ResourceBundle\nResourceBundle --&gt;&gt; AppLocalizationService : #32; \ndeactivate ResourceBundle\nAppLocalizationService --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AppLocalizationService\nChooseGameModeView -&gt;&gt; AbstractButton : setText\nactivate AbstractButton\nAbstractButton --&gt;&gt; ChooseGameModeView : #32; \ndeactivate AbstractButton\nChooseGameModeView --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeView\nChooseGameModeController -&gt;&gt; ChooseGameModeView : setVisible\nactivate ChooseGameModeView\nChooseGameModeView -&gt;&gt; Window : setVisible\nactivate Window\nWindow --&gt;&gt; ChooseGameModeView : #32; \ndeactivate Window\nChooseGameModeView --&gt;&gt; ChooseGameModeController : #32; \ndeactivate ChooseGameModeView\ndeactivate ChooseGameModeController</code></pre> <pre><code>sequenceDiagram\n    actor User as Benutzer\n    participant Main as Fridgely Main\n    participant CGMC as ChooseGameModeController\n    participant CGMV as ChooseGameModeView\n    participant Tutorial as TutorialDialog\n    participant MPGL as MultiplayerGameLauncher\n\n    User-&gt;&gt;Main: Startet Anwendung\n    Main-&gt;&gt;Main: Erkennt Bildschirme\n    Main-&gt;&gt;CGMC: Erstellt Controller\n    CGMC-&gt;&gt;CGMV: Erstellt View\n    CGMV--&gt;&gt;User: Zeigt Spielmodusauswahl\n    User-&gt;&gt;CGMV: W\u00e4hlt Spielmodus\n    CGMV-&gt;&gt;CGMC: selectGameMode()\n    CGMC-&gt;&gt;Tutorial: Zeigt Tutorial\n    Tutorial--&gt;&gt;User: Erkl\u00e4rt Spielregeln\n    User-&gt;&gt;Tutorial: Best\u00e4tigt Abschluss\n\n    alt Einzelspielermodus\n        CGMC-&gt;&gt;CGMC: startSinglePlayerGame()\n    else Mehrspielermodus\n        CGMC-&gt;&gt;MPGL: startMultiplayerGame()\n        MPGL-&gt;&gt;MPGL: launchGame()\n        MPGL--&gt;&gt;User: Startet Mehrspielermodus\n    end</code></pre>"},{"location":"SAD/06_runtime_view/#szenario-2-einzelspieler-modus-geplant","title":"Szenario 2: Einzelspieler-Modus (Geplant)","text":"<p>Dieser Abschnitt beschreibt den zuk\u00fcnftig geplanten Einzelspielermodus. Der Einzelspielermodus befindet sich derzeit in der Konzept- und Planungsphase und ist in der aktuellen Implementierung nicht vollst\u00e4ndig umgesetzt.</p>"},{"location":"SAD/06_runtime_view/#geplante-features","title":"Geplante Features","text":"<ul> <li>Bildschirminteraktion mit einem einzelnen Spieler</li> <li>Barcode-Scannen von Produkten</li> <li>Rezeptvorschl\u00e4ge basierend auf gescannten Produkten</li> <li>Punkte- und Fortschrittssystem</li> <li>Anpassbarer Schwierigkeitsgrad</li> </ul>"},{"location":"SAD/06_runtime_view/#aktueller-status","title":"Aktueller Status","text":"<p>Die Benutzeroberfl\u00e4che erm\u00f6glicht bereits die Auswahl des Einzelspielermodus und die Anzeige eines entsprechenden Tutorials. Die eigentliche Spielimplementierung ist als TODO markiert und wird in zuk\u00fcnftigen Versionen umgesetzt. Die Methode <code>startSinglePlayerGame()</code> in der <code>ChooseGameModeController</code>-Klasse dient momentan als Platzhalter f\u00fcr die geplante Funktionalit\u00e4t.</p> <p>Im Gegensatz zum Mehrspielermodus fehlt momentan noch ein <code>SinglePlayerGameLauncher</code>, und die Klassen f\u00fcr den Controller (<code>SinglePlayerGameController</code>) und das Modell (<code>SinglePlayerGameStateModel</code>) sind ebenfalls noch nicht implementiert.</p>"},{"location":"SAD/06_runtime_view/#szenario-3-interaktion-im-mehrspielermodus","title":"Szenario 3: Interaktion im Mehrspielermodus","text":"<p>Dieses Szenario beschreibt die Hauptinteraktionsabl\u00e4ufe w\u00e4hrend eines Mehrspielerspiels, bei dem ein Spieler Produkte scannt und der andere Rezepte ausw\u00e4hlt.</p>"},{"location":"SAD/06_runtime_view/#beschreibung_1","title":"Beschreibung","text":"<ol> <li>Das Spiel befindet sich im initialisierten Zustand mit Spieler 1 (Scanner) und Spieler 2 (Rezeptauswahl).</li> <li>Spieler 1 scannt ein Produkt:<ul> <li>Der Barcode-Scanner erfasst den Barcode eines Produkts.</li> <li>Der <code>MultiplayerPlayer1Controller</code> empf\u00e4ngt das Scan-Ereignis und verarbeitet es.</li> <li>Der Controller sucht nach dem Produkt in der Datenbank \u00fcber das <code>ProductRepository</code>.</li> <li>Bei erfolgreicher Identifikation wird das Produkt dem <code>FridgeStockModel</code> hinzugef\u00fcgt.</li> <li>Das Modell benachrichtigt \u00fcber <code>PropertyChangeSupport</code> alle Beobachter (Observer).</li> <li>Die <code>ScannedItemsView</code> wird aktualisiert, um das neue Produkt anzuzeigen.</li> <li>Der <code>MultiplayerGameStateModel</code> wird aktualisiert und l\u00f6st Zustands\u00e4nderungen aus.</li> <li>Der <code>PenguinModel</code> reagiert auf die \u00c4nderung und animiert den Pinguin entsprechend.</li> </ul> </li> <li>Spieler 2 sieht die gescannten Produkte:<ul> <li>Die <code>MultiplayerPlayer2View</code> zeigt eine aktualisierte Liste verf\u00fcgbarer Rezepte basierend auf den gescannten Produkten.</li> <li>Das <code>RecipeModel</code> berechnet die Eignung verschiedener Rezepte basierend auf den vorhandenen Produkten.</li> <li>Die Rezepte werden nach ihrer Eignung sortiert und angezeigt.</li> </ul> </li> <li>Spieler 2 w\u00e4hlt ein Rezept aus:<ul> <li>Der Benutzer klickt auf ein Rezept in der Liste.</li> <li>Der <code>MultiplayerPlayer2Controller</code> verarbeitet die Auswahl und aktualisiert den <code>MultiplayerGameStateModel</code>.</li> <li>Alle beobachtenden Views werden \u00fcber die \u00c4nderung informiert und aktualisieren ihre Anzeige.</li> <li>Der <code>PenguinModel</code> animiert den Pinguin, um Fortschritt anzuzeigen.</li> </ul> </li> <li>Der <code>MultiplayerGameController</code> \u00fcberpr\u00fcft, ob die Spielbedingungen erf\u00fcllt sind:<ul> <li>Wenn gen\u00fcgend passende Produkte f\u00fcr das ausgew\u00e4hlte Rezept gescannt wurden, wird das Spiel als erfolgreich markiert.</li> <li>Andernfalls wird Spieler 1 aufgefordert, weitere passende Produkte zu scannen.</li> </ul> </li> <li>Wenn das Spiel erfolgreich abgeschlossen wurde:<ul> <li>Eine Erfolgsanimation wird angezeigt.</li> <li>Statistiken werden gespeichert.</li> <li>Eine Option zum Neustart oder zur R\u00fcckkehr zum Hauptmen\u00fc wird angeboten.</li> </ul> </li> </ol>"},{"location":"SAD/06_runtime_view/#besonderheiten_1","title":"Besonderheiten","text":"<ul> <li>Die Kommunikation zwischen den beiden Spielern erfolgt ausschliesslich \u00fcber die Modelle und den zentralen <code>MultiplayerGameController</code>.</li> <li>Der Spielfortschritt wird durch den animierten Pinguin visualisiert, der sich entsprechend dem Spielzustand bewegt.</li> <li>Die <code>ScannedItemsView</code> dient als Schnittstelle zwischen beiden Spielern und zeigt in Echtzeit die gescannten Produkte.</li> <li>Die Rezeptauswahl basiert auf einem Algorithmus, der die Eignung der Rezepte basierend auf den gescannten Produkten berechnet.</li> <li>Die Interaktion ist vollst\u00e4ndig ereignisgesteuert, was eine lose Kopplung zwischen den Komponenten erm\u00f6glicht.</li> </ul>"},{"location":"SAD/06_runtime_view/#diagramm_1","title":"Diagramm","text":"<p>Das folgende Sequenzdiagramm zeigt den detaillierten Ablauf des Spielstarts im Mehrspielermodus:</p> <pre><code>sequenceDiagram\nactor User\nUser -&gt;&gt; MultiplayerGameLauncher : launchGame\nactivate MultiplayerGameLauncher\nMultiplayerGameLauncher -&gt;&gt; MultiplayerGameLauncher : () -&amp;gt;\nactivate MultiplayerGameLauncher\nMultiplayerGameLauncher -&gt;&gt; MultiplayerGameController : new\nactivate MultiplayerGameController\nMultiplayerGameController -&gt;&gt; MultiplayerGameStateModel : new\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel -&gt;&gt; MultiplayerGameStateModel : new\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerGameStateModel : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerGameController -&gt;&gt; PenguinModel : new\nactivate PenguinModel\nPenguinModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate PenguinModel\nMultiplayerGameController -&gt;&gt; FridgeStockModel : new\nactivate FridgeStockModel\nFridgeStockModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate FridgeStockModel\nMultiplayerGameController -&gt;&gt; RecipeModel : new\nactivate RecipeModel\nRecipeModel -&gt;&gt; RecipeModel : loadAvailableRecipes\nactivate RecipeModel\nalt recipeDTOs != null &amp;&amp; !recipeDTOs.isEmpty()\nloop recipeDTOs\nRecipeModel -&gt;&gt; RecipeRepository : findById\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nend\nend\nloop allRecipes\nRecipeModel -&gt;&gt; RecipeModel : allRecipes::add\nactivate RecipeModel\nalt recipe == null || products == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nloop products\nalt ingredientBarcodes.contains(product.getBarcode())\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nalt getMatchingIngredientsCount(recipe, availableProducts) &gt; 0\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; Recipe : new\nactivate Recipe\nRecipe --&gt;&gt; RecipeModel : #32; \ndeactivate Recipe\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nRecipeModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate RecipeModel\nMultiplayerGameController -&gt;&gt; MultiplayerPlayer1Controller : new\nactivate MultiplayerPlayer1Controller\nMultiplayerPlayer1Controller --&gt;&gt; MultiplayerGameController : #32; \ndeactivate MultiplayerPlayer1Controller\nMultiplayerGameController -&gt;&gt; MultiplayerPlayer2Controller : new\nactivate MultiplayerPlayer2Controller\nMultiplayerPlayer2Controller --&gt;&gt; MultiplayerGameController : #32; \ndeactivate MultiplayerPlayer2Controller\nMultiplayerGameController --&gt;&gt; MultiplayerGameLauncher : #32; \ndeactivate MultiplayerGameController\nMultiplayerGameLauncher -&gt;&gt; MultiplayerGameView : new\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : initializeComponents\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerPlayer1View : new\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : initializeComponents\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : setupLayout\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : registerListeners\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerGameStateModel : addPropertyChangeListener\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerPlayer1View -&gt;&gt; FridgeStockModel : addPropertyChangeListener\nactivate FridgeStockModel\nFridgeStockModel -&gt;&gt; MultiplayerPlayer1View : e -&amp;gt;\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : finishTurn\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1Controller : finishTurn\nactivate MultiplayerPlayer1Controller\nalt gameStateModel.getCurrentPlayer() != MultiplayerGameStateModel.Player.PLAYER1\nnote right of MultiplayerPlayer1Controller : Empty\nend\nalt fridgeStockModel.getProductCount() &lt; GameConfig.MIN_PRODUCTS_PER_ROUND\nnote right of MultiplayerPlayer1Controller : Empty\nend\nMultiplayerPlayer1Controller -&gt;&gt; RecipeModel : loadAvailableRecipes\nactivate RecipeModel\nalt recipeDTOs != null &amp;&amp; !recipeDTOs.isEmpty()\nloop recipeDTOs\nRecipeModel -&gt;&gt; RecipeRepository : findById\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nend\nend\nloop allRecipes\nRecipeModel -&gt;&gt; RecipeModel : allRecipes::add\nactivate RecipeModel\nalt recipe == null || products == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nloop products\nalt ingredientBarcodes.contains(product.getBarcode())\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nalt getMatchingIngredientsCount(recipe, availableProducts) &gt; 0\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; Recipe : new\nactivate Recipe\nRecipe --&gt;&gt; RecipeModel : #32; \ndeactivate Recipe\nRecipeModel --&gt;&gt; MultiplayerPlayer1Controller : #32; \ndeactivate RecipeModel\nMultiplayerPlayer1Controller -&gt;&gt; MultiplayerGameStateModel : nextPlayer\nactivate MultiplayerGameStateModel\nalt currentPlayer == Player.PLAYER1\nelse \nMultiplayerGameStateModel -&gt;&gt; MultiplayerGameStateModel : advanceRound\nactivate MultiplayerGameStateModel\nalt currentRound &gt; totalRounds\nnote right of MultiplayerGameStateModel : Empty\nend\nMultiplayerGameStateModel --&gt;&gt; MultiplayerGameStateModel : #32; \ndeactivate MultiplayerGameStateModel\nend\nMultiplayerGameStateModel --&gt;&gt; MultiplayerPlayer1Controller : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerPlayer1Controller --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1Controller\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : updateComponentStates\nactivate MultiplayerPlayer1View\nalt scanPromptLabel.isVisible()\nalt scanPromptTimer == null\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : e -&amp;gt;\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nelse \nalt !scanPromptTimer.isRunning()\nnote right of MultiplayerPlayer1View : Empty\nend\nnote right of MultiplayerPlayer1View : Empty\nend\nelse \nalt scanPromptTimer != null &amp;&amp; scanPromptTimer.isRunning()\nnote right of MultiplayerPlayer1View : Empty\nend\nnote right of MultiplayerPlayer1View : Empty\nend\nalt currentCount &lt; GameConfig.MIN_PRODUCTS_PER_ROUND\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nend\nalt isGameOver\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nelse \nalt isPlayer1Turn\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nend\nend\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; FridgeStockModel : #32; \ndeactivate MultiplayerPlayer1View\nFridgeStockModel --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate FridgeStockModel\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : subscribe\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : onLocaleChanged\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : updateComponentStates\nactivate MultiplayerPlayer1View\nalt scanPromptLabel.isVisible()\nalt scanPromptTimer == null\nMultiplayerPlayer1View -&gt;&gt; MultiplayerPlayer1View : e -&amp;gt;\nactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nelse \nalt !scanPromptTimer.isRunning()\nnote right of MultiplayerPlayer1View : Empty\nend\nnote right of MultiplayerPlayer1View : Empty\nend\nelse \nalt scanPromptTimer != null &amp;&amp; scanPromptTimer.isRunning()\nnote right of MultiplayerPlayer1View : Empty\nend\nnote right of MultiplayerPlayer1View : Empty\nend\nalt currentCount &lt; GameConfig.MIN_PRODUCTS_PER_ROUND\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nend\nalt isGameOver\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nelse \nalt isPlayer1Turn\nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer1View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate AppLocalizationService\nend\nend\nMultiplayerPlayer1View --&gt;&gt; MultiplayerPlayer1View : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerPlayer1View --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerPlayer1View\nMultiplayerGameView -&gt;&gt; MultiplayerPlayer2View : new\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : initializeComponents\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; UnifiedRecipePanel : new\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : e -&amp;gt;\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : checkVisibleRecipes\nactivate UnifiedRecipePanel\nloop components\nalt !(comp instanceof JPanel panel) || panel.getClientProperty(\"recipe\") == null\nnote right of UnifiedRecipePanel : Empty\nend\nalt isVisible &amp;&amp; !loadedRecipeCards.containsKey(recipe)\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createRecipeCard\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createIngredientsPanel\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate RecipeModel\nloop fridgeProducts\nnote right of UnifiedRecipePanel : Empty\nend\nUnifiedRecipePanel -&gt;&gt; RecipeModel : getMatchingIngredientsCount\nactivate RecipeModel\nalt recipe == null || products == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nloop products\nalt ingredientBarcodes.contains(product.getBarcode())\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate RecipeModel\nloop ingredientBarcodes\nalt productMap.containsKey(barcode)\nelse \nUnifiedRecipePanel -&gt;&gt; ProductRepository : getProductByBarcode\nactivate ProductRepository\nalt barcode == null\nnote right of ProductRepository : Empty\nend\nProductRepository --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate ProductRepository\nalt product == null\nUnifiedRecipePanel -&gt;&gt; Product : new\nactivate Product\nProduct --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate Product\nend\nend\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createIngredientItemPanel\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : getProductImageIcon\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate ImageLoader\nalt icon == null\nUnifiedRecipePanel -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate ImageLoader\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nalt isAvailable\nelse \nnote right of UnifiedRecipePanel : Empty\nend\nalt isAvailable\nelse \nnote right of UnifiedRecipePanel : Empty\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nalt index &gt;= 0 &amp;&amp; index &lt; components.length\nalt recipe.equals(selectedRecipe)\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : highlightSelectedCard\nactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nend\nend\nend\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate UnifiedRecipePanel\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : setupLayout\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : registerListeners\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerGameStateModel : addPropertyChangeListener\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerPlayer2View -&gt;&gt; RecipeModel : addPropertyChangeListener\nactivate RecipeModel\nRecipeModel -&gt;&gt; MultiplayerPlayer2View : this::selectRecipe\nactivate MultiplayerPlayer2View\nalt recipe != null\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2Controller : selectRecipe\nactivate MultiplayerPlayer2Controller\nalt gameStateModel.getCurrentPlayer() != MultiplayerGameStateModel.Player.PLAYER2\nnote right of MultiplayerPlayer2Controller : Empty\nend\nMultiplayerPlayer2Controller -&gt;&gt; RecipeModel : selectRecipe\nactivate RecipeModel\nRecipeModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate RecipeModel\nMultiplayerPlayer2Controller --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2Controller\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : updateComponentStates\nactivate MultiplayerPlayer2View\nalt isGameOver\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nalt isPlayer2Turn\nalt hasSelectedRecipe\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nend\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nend\nMultiplayerPlayer2View --&gt;&gt; RecipeModel : #32; \ndeactivate MultiplayerPlayer2View\nRecipeModel -&gt;&gt; MultiplayerPlayer2View : e -&amp;gt;\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : finishTurn\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2Controller : finishTurn\nactivate MultiplayerPlayer2Controller\nalt gameStateModel.getCurrentPlayer() != MultiplayerGameStateModel.Player.PLAYER2\nnote right of MultiplayerPlayer2Controller : Empty\nend\nalt recipe == null\nnote right of MultiplayerPlayer2Controller : Empty\nend\nMultiplayerPlayer2Controller -&gt;&gt; RecipeModel : getMatchingIngredientsCount\nactivate RecipeModel\nalt recipe == null || products == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nloop products\nalt ingredientBarcodes.contains(product.getBarcode())\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate RecipeModel\nMultiplayerPlayer2Controller -&gt;&gt; RecipeModel : getTotalIngredientsCount\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nRecipeModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate RecipeModel\nMultiplayerPlayer2Controller -&gt;&gt; MultiplayerPlayer2Controller : calculateRecipeScore\nactivate MultiplayerPlayer2Controller\nalt matchingIngredients == totalIngredients\nnote right of MultiplayerPlayer2Controller : Empty\nend\nMultiplayerPlayer2Controller --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate MultiplayerPlayer2Controller\nMultiplayerPlayer2Controller -&gt;&gt; MultiplayerGameStateModel : addPlayer2Score\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerPlayer2Controller -&gt;&gt; MultiplayerPlayer2Controller : updatePenguinHPForRecipe\nactivate MultiplayerPlayer2Controller\nalt matchRatio &gt;= 0.5\nMultiplayerPlayer2Controller -&gt;&gt; PenguinModel : modifyHP\nactivate PenguinModel\nalt oldHP != hp\nnote right of PenguinModel : Empty\nend\nPenguinModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate PenguinModel\nelse \nMultiplayerPlayer2Controller -&gt;&gt; PenguinModel : modifyHP\nactivate PenguinModel\nalt oldHP != hp\nnote right of PenguinModel : Empty\nend\nPenguinModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate PenguinModel\nend\nMultiplayerPlayer2Controller --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate MultiplayerPlayer2Controller\nMultiplayerPlayer2Controller -&gt;&gt; MultiplayerGameStateModel : nextPlayer\nactivate MultiplayerGameStateModel\nalt currentPlayer == Player.PLAYER1\nelse \nMultiplayerGameStateModel -&gt;&gt; MultiplayerGameStateModel : advanceRound\nactivate MultiplayerGameStateModel\nalt currentRound &gt; totalRounds\nnote right of MultiplayerGameStateModel : Empty\nend\nMultiplayerGameStateModel --&gt;&gt; MultiplayerGameStateModel : #32; \ndeactivate MultiplayerGameStateModel\nend\nMultiplayerGameStateModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate MultiplayerGameStateModel\nalt !gameStateModel.isGameOver()\nMultiplayerPlayer2Controller -&gt;&gt; RecipeModel : selectRecipe\nactivate RecipeModel\nRecipeModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate RecipeModel\nMultiplayerPlayer2Controller -&gt;&gt; FridgeStockModel : clear\nactivate FridgeStockModel\nalt products.isEmpty()\nnote right of FridgeStockModel : Empty\nend\nFridgeStockModel --&gt;&gt; MultiplayerPlayer2Controller : #32; \ndeactivate FridgeStockModel\nend\nMultiplayerPlayer2Controller --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2Controller\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : updateComponentStates\nactivate MultiplayerPlayer2View\nalt isGameOver\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nalt isPlayer2Turn\nalt hasSelectedRecipe\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nend\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View --&gt;&gt; RecipeModel : #32; \ndeactivate MultiplayerPlayer2View\nRecipeModel --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate RecipeModel\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : subscribe\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : onLocaleChanged\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : updateComponentStates\nactivate MultiplayerPlayer2View\nalt isGameOver\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nalt isPlayer2Turn\nalt hasSelectedRecipe\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nend\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : updateRecipeList\nactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; UnifiedRecipePanel : updateRecipeList\nactivate UnifiedRecipePanel\nloop allRecipes\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createRecipePlaceholder\nactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : this::checkVisibleRecipes\nactivate UnifiedRecipePanel\nloop components\nalt !(comp instanceof JPanel panel) || panel.getClientProperty(\"recipe\") == null\nnote right of UnifiedRecipePanel : Empty\nend\nalt isVisible &amp;&amp; !loadedRecipeCards.containsKey(recipe)\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createRecipeCard\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createIngredientsPanel\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate RecipeModel\nloop fridgeProducts\nnote right of UnifiedRecipePanel : Empty\nend\nUnifiedRecipePanel -&gt;&gt; RecipeModel : getMatchingIngredientsCount\nactivate RecipeModel\nalt recipe == null || products == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeModel : getRecipeIngredientBarcodes\nactivate RecipeModel\nalt recipe == null\nnote right of RecipeModel : Empty\nend\nRecipeModel -&gt;&gt; RecipeRepository : getRecipeIngredientBarcodes\nactivate RecipeRepository\nRecipeRepository --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeRepository\nRecipeModel --&gt;&gt; RecipeModel : #32; \ndeactivate RecipeModel\nloop products\nalt ingredientBarcodes.contains(product.getBarcode())\nnote right of RecipeModel : Empty\nend\nnote right of RecipeModel : Empty\nend\nRecipeModel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate RecipeModel\nloop ingredientBarcodes\nalt productMap.containsKey(barcode)\nelse \nUnifiedRecipePanel -&gt;&gt; ProductRepository : getProductByBarcode\nactivate ProductRepository\nalt barcode == null\nnote right of ProductRepository : Empty\nend\nProductRepository --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate ProductRepository\nalt product == null\nUnifiedRecipePanel -&gt;&gt; Product : new\nactivate Product\nProduct --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate Product\nend\nend\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : createIngredientItemPanel\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : getProductImageIcon\nactivate UnifiedRecipePanel\nUnifiedRecipePanel -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate ImageLoader\nalt icon == null\nUnifiedRecipePanel -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate ImageLoader\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nalt isAvailable\nelse \nnote right of UnifiedRecipePanel : Empty\nend\nalt isAvailable\nelse \nnote right of UnifiedRecipePanel : Empty\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nalt index &gt;= 0 &amp;&amp; index &lt; components.length\nalt recipe.equals(selectedRecipe)\nUnifiedRecipePanel -&gt;&gt; UnifiedRecipePanel : highlightSelectedCard\nactivate UnifiedRecipePanel\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nend\nend\nend\nend\nUnifiedRecipePanel --&gt;&gt; UnifiedRecipePanel : #32; \ndeactivate UnifiedRecipePanel\nend\nUnifiedRecipePanel --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate UnifiedRecipePanel\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View -&gt;&gt; MultiplayerPlayer2View : updateComponentStates\nactivate MultiplayerPlayer2View\nalt isGameOver\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nalt isPlayer2Turn\nalt hasSelectedRecipe\nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nelse \nMultiplayerPlayer2View -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate AppLocalizationService\nend\nend\nMultiplayerPlayer2View --&gt;&gt; MultiplayerPlayer2View : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerPlayer2View --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerPlayer2View\nMultiplayerGameView -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; MultiplayerGameView : #32; \ndeactivate ImageLoader\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : setupLayout\nactivate MultiplayerGameView\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : registerListeners\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameStateModel : addPropertyChangeListener\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerGameView -&gt;&gt; PenguinModel : addPropertyChangeListener\nactivate PenguinModel\nPenguinModel -&gt;&gt; MultiplayerGameView : e -&amp;gt;\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : startNewGame\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nalt confirm == JOptionPane.YES_OPTION\nMultiplayerGameView -&gt;&gt; MultiplayerGameController : startNewGame\nactivate MultiplayerGameController\nMultiplayerGameController -&gt;&gt; MultiplayerGameStateModel : resetGame\nactivate MultiplayerGameStateModel\nMultiplayerGameStateModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate MultiplayerGameStateModel\nMultiplayerGameController -&gt;&gt; PenguinModel : resetHP\nactivate PenguinModel\nalt oldHP != hp\nnote right of PenguinModel : Empty\nend\nPenguinModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate PenguinModel\nMultiplayerGameController -&gt;&gt; FridgeStockModel : clear\nactivate FridgeStockModel\nalt products.isEmpty()\nnote right of FridgeStockModel : Empty\nend\nFridgeStockModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate FridgeStockModel\nMultiplayerGameController -&gt;&gt; RecipeModel : selectRecipe\nactivate RecipeModel\nRecipeModel --&gt;&gt; MultiplayerGameController : #32; \ndeactivate RecipeModel\nMultiplayerGameController --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameController\nend\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView --&gt;&gt; PenguinModel : #32; \ndeactivate MultiplayerGameView\nPenguinModel -&gt;&gt; MultiplayerGameView : e -&amp;gt;\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : exitGame\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nalt confirm == JOptionPane.YES_OPTION\nalt window instanceof JFrame\nnote right of MultiplayerGameView : Empty\nend\nnote right of MultiplayerGameView : Empty\nend\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView --&gt;&gt; PenguinModel : #32; \ndeactivate MultiplayerGameView\nPenguinModel --&gt;&gt; MultiplayerGameView : #32; \ndeactivate PenguinModel\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : updateGameInfo\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; MultiplayerGameView : #32; \ndeactivate ImageLoader\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nalt gameState.isGameOver()\nalt winner == MultiplayerGameStateModel.Player.PLAYER1\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nelse \nalt winner == MultiplayerGameStateModel.Player.PLAYER2\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nend\nend\nend\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : onLocaleChanged\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : updateGameInfo\nactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; MultiplayerGameView : #32; \ndeactivate ImageLoader\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nalt gameState.isGameOver()\nalt winner == MultiplayerGameStateModel.Player.PLAYER1\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nelse \nalt winner == MultiplayerGameStateModel.Player.PLAYER2\nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nelse \nMultiplayerGameView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nend\nend\nend\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; MultiplayerGameView : showCurrentPlayerView\nactivate MultiplayerGameView\nalt currentPlayer == MultiplayerGameStateModel.Player.PLAYER1\nelse \nnote right of MultiplayerGameView : Empty\nend\nMultiplayerGameView --&gt;&gt; MultiplayerGameView : #32; \ndeactivate MultiplayerGameView\nMultiplayerGameView -&gt;&gt; AppLocalizationService : subscribe\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; MultiplayerGameView : #32; \ndeactivate AppLocalizationService\nMultiplayerGameView --&gt;&gt; MultiplayerGameLauncher : #32; \ndeactivate MultiplayerGameView\nalt !Fridgely.isSingleDisplay\nelse \nloop new JFrame[]{gameFrame, scannedItemsFrame}\nnote right of MultiplayerGameLauncher : Empty\nend\nnote right of MultiplayerGameLauncher : Empty\nend\nMultiplayerGameLauncher -&gt;&gt; ScannedItemsView : new\nactivate ScannedItemsView\nScannedItemsView -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ScannedItemsView : #32; \ndeactivate ImageLoader\nScannedItemsView -&gt;&gt; ScannedItemsView : initializeComponents\nactivate ScannedItemsView\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nScannedItemsView -&gt;&gt; ScannedItemsView : setupLayout\nactivate ScannedItemsView\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nScannedItemsView -&gt;&gt; ScannedItemsView : registerListeners\nactivate ScannedItemsView\nScannedItemsView -&gt;&gt; FridgeStockModel : addPropertyChangeListener\nactivate FridgeStockModel\nFridgeStockModel --&gt;&gt; ScannedItemsView : #32; \ndeactivate FridgeStockModel\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nScannedItemsView -&gt;&gt; AppLocalizationService : subscribe\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; ScannedItemsView : #32; \ndeactivate AppLocalizationService\nScannedItemsView -&gt;&gt; ScannedItemsView : onLocaleChanged\nactivate ScannedItemsView\nScannedItemsView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; ScannedItemsView : #32; \ndeactivate AppLocalizationService\nScannedItemsView -&gt;&gt; ScannedItemsView : updateProductList\nactivate ScannedItemsView\nloop products\nnote right of ScannedItemsView : Empty\nend\nloop defaultProducts\nalt !inStockBarcodes.contains(p.getBarcode())\nnote right of ScannedItemsView : Empty\nend\nnote right of ScannedItemsView : Empty\nend\nloop products\nScannedItemsView -&gt;&gt; ScannedItemsView : createProductCard\nactivate ScannedItemsView\nScannedItemsView -&gt;&gt; Product : getName\nactivate Product\nalt language != null\nelse \nnote right of Product : Empty\nend\nalt language != null ? language.toLowerCase() : \"\"\nelse \"de\"\nalt nameDE != null\nelse \nnote right of Product : Empty\nend\nelse \"fr\"\nalt nameFR != null\nelse \nnote right of Product : Empty\nend\nelse default -&gt; name;\nnote right of Product : Empty\nend\nProduct --&gt;&gt; ScannedItemsView : #32; \ndeactivate Product\nScannedItemsView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ScannedItemsView : #32; \ndeactivate ImageLoader\nalt icon != null\nelse \nScannedItemsView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ScannedItemsView : #32; \ndeactivate ImageLoader\nend\nalt product.isBio()\nScannedItemsView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; ScannedItemsView : #32; \ndeactivate AppLocalizationService\nelse \nScannedItemsView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; ScannedItemsView : #32; \ndeactivate AppLocalizationService\nend\nalt product.isBio()\nelse \nnote right of ScannedItemsView : Empty\nend\nalt product.isBio()\nelse \nnote right of ScannedItemsView : Empty\nend\nalt product.isLocal()\nScannedItemsView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; ScannedItemsView : #32; \ndeactivate AppLocalizationService\nelse \nScannedItemsView -&gt;&gt; AppLocalizationService : get\nactivate AppLocalizationService\nAppLocalizationService --&gt;&gt; ScannedItemsView : #32; \ndeactivate AppLocalizationService\nend\nalt product.isLocal()\nelse \nnote right of ScannedItemsView : Empty\nend\nalt product.isLocal()\nelse \nnote right of ScannedItemsView : Empty\nend\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nend\nloop filteredDefaults\nScannedItemsView -&gt;&gt; ScannedItemsView : createDefaultProductCard\nactivate ScannedItemsView\nScannedItemsView -&gt;&gt; Product : getName\nactivate Product\nalt language != null\nelse \nnote right of Product : Empty\nend\nalt language != null ? language.toLowerCase() : \"\"\nelse \"de\"\nalt nameDE != null\nelse \nnote right of Product : Empty\nend\nelse \"fr\"\nalt nameFR != null\nelse \nnote right of Product : Empty\nend\nelse default -&gt; name;\nnote right of Product : Empty\nend\nProduct --&gt;&gt; ScannedItemsView : #32; \ndeactivate Product\nScannedItemsView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ScannedItemsView : #32; \ndeactivate ImageLoader\nalt icon != null\nelse \nScannedItemsView -&gt;&gt; ImageLoader : loadScaledImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : key -&amp;gt;\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : loadImage\nactivate ImageLoader\nImageLoader -&gt;&gt; ImageLoader : path -&amp;gt;\nactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nalt original == null\nnote right of ImageLoader : Empty\nend\nImageLoader --&gt;&gt; ImageLoader : #32; \ndeactivate ImageLoader\nImageLoader --&gt;&gt; ScannedItemsView : #32; \ndeactivate ImageLoader\nend\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nend\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nScannedItemsView --&gt;&gt; ScannedItemsView : #32; \ndeactivate ScannedItemsView\nalt screens.length &gt; 1\nnote right of ScannedItemsView : Empty\nend\nScannedItemsView --&gt;&gt; MultiplayerGameLauncher : #32; \ndeactivate ScannedItemsView\nMultiplayerGameLauncher --&gt;&gt; MultiplayerGameLauncher : #32; \ndeactivate MultiplayerGameLauncher\ndeactivate MultiplayerGameLauncher</code></pre> <pre><code>sequenceDiagram\n    actor Player1 as Spieler 1\n    actor Player2 as Spieler 2\n    participant MP1C as MultiplayerPlayer1Controller\n    participant PR as ProductRepository\n    participant FSM as FridgeStockModel\n    participant SIV as ScannedItemsView\n    participant RM as RecipeModel\n    participant MP2C as MultiplayerPlayer2Controller\n    participant MGSM as MultiplayerGameStateModel\n    participant MGC as MultiplayerGameController\n    participant PM as PenguinModel\n\n    Player1-&gt;&gt;MP1C: Scannt Produkt\n    MP1C-&gt;&gt;PR: Sucht Produkt in Datenbank\n    PR--&gt;&gt;MP1C: Liefert Produktdaten\n    MP1C-&gt;&gt;FSM: F\u00fcgt Produkt hinzu\n    FSM-&gt;&gt;SIV: Benachrichtigt (PropertyChange)\n    SIV--&gt;&gt;Player1: Aktualisiert Anzeige\n    FSM-&gt;&gt;RM: Benachrichtigt (PropertyChange)\n    RM-&gt;&gt;RM: Berechnet passende Rezepte\n    RM--&gt;&gt;MP2C: Aktualisiert Rezeptliste\n    MP2C--&gt;&gt;Player2: Zeigt verf\u00fcgbare Rezepte\n    Player2-&gt;&gt;MP2C: W\u00e4hlt Rezept\n    MP2C-&gt;&gt;MGSM: Aktualisiert Spielzustand\n    MGSM-&gt;&gt;PM: Benachrichtigt \u00fcber \u00c4nderung\n    PM--&gt;&gt;Player1: Animiert Pinguin\n    PM--&gt;&gt;Player2: Animiert Pinguin\n    MGSM-&gt;&gt;MGC: Benachrichtigt \u00fcber \u00c4nderung\n    MGC-&gt;&gt;MGC: \u00dcberpr\u00fcft Spielbedingungen\n    MGC--&gt;&gt;Player1: Fordert weitere Produkte an (optional)\n    MGC--&gt;&gt;Player2: Zeigt Erfolgsmeldung (bei Erfolg)</code></pre>"},{"location":"SAD/06_runtime_view/#szenario-4-systemstart-und-initialisierung","title":"Szenario 4: Systemstart und Initialisierung","text":"<p>Dieses Szenario beschreibt den Prozess des Systemstarts und der Initialisierung der Anwendung, einschliesslich der Einrichtung der Datenbank und Ressourcen.</p>"},{"location":"SAD/06_runtime_view/#beschreibung_2","title":"Beschreibung","text":"<ol> <li>Die Anwendung wird durch Ausf\u00fchren der <code>Main</code>-Klasse gestartet.</li> <li>Die Hauptkonfiguration wird geladen und wesentliche Parameter werden initialisiert:<ul> <li>Pfade zu Ressourcen</li> <li>Fenstergr\u00f6ssen und -positionen</li> <li>Verbindungsparameter f\u00fcr die Datenbank</li> </ul> </li> <li>Die Datenbank wird initialisiert und gepr\u00fcft:<ul> <li>Verbindung zur SQLite-Datenbank wird hergestellt</li> <li>Falls die Datenbank nicht existiert, wird sie erstellt</li> <li>Tabellen werden \u00fcberpr\u00fcft und bei Bedarf angelegt</li> <li>Basisdaten (Produkte, Rezepte) werden geladen oder initialisiert</li> </ul> </li> <li>Singleton-Services werden initialisiert:<ul> <li>Der <code>AppLocalizationService</code> l\u00e4dt die Sprachdateien und setzt die Standardsprache.</li> <li>Der <code>ImageLoader</code> initialisiert den Bild-Cache und l\u00e4dt h\u00e4ufig verwendete Bilder vor.</li> </ul> </li> <li>Die Hardware-Komponenten werden eingerichtet:<ul> <li>Der Barcode-Scanner wird konfiguriert und auf Verf\u00fcgbarkeit gepr\u00fcft.</li> <li>Die zweite Anzeige (f\u00fcr den zweiten Spieler) wird erkannt und konfiguriert.</li> </ul> </li> <li>Das Haupt-UI wird erstellt und angezeigt:<ul> <li>Die <code>ChooseGameModeView</code> wird initialisiert.</li> <li>Der zugeh\u00f6rige Controller wird verkn\u00fcpft.</li> <li>Das erste Fenster wird dem Benutzer angezeigt.</li> </ul> </li> </ol>"},{"location":"SAD/06_runtime_view/#besonderheiten_2","title":"Besonderheiten","text":"<ul> <li>Die Anwendung verwendet eine SQLite-Datenbank f\u00fcr die Persistenz, wodurch keine separate Datenbankinstallation erforderlich ist.</li> <li>Die Singleton-Services stellen sicher, dass ressourcenintensive Komponenten nur einmal initialisiert werden.</li> <li>Die Hardware-Erkennung passt sich dynamisch an die verf\u00fcgbaren Ger\u00e4te an:</li> <li>Wenn nur ein Bildschirm erkannt wird, wird ein alternatives Layout verwendet.</li> <li>Die Anwendung f\u00fchrt beim Start eine Selbstdiagnose durch, um die Funktionsf\u00e4higkeit aller Komponenten zu gew\u00e4hrleisten.</li> </ul>"},{"location":"SAD/06_runtime_view/#diagramm_2","title":"Diagramm","text":"<pre><code>flowchart TD\n    Start[Anwendungsstart] --&gt; LoadConfig[Konfiguration laden]\n    LoadConfig --&gt; InitDB[Datenbank initialisieren]\n    InitDB --&gt; CheckDB{Existiert DB?}\n    CheckDB --&gt;|Nein| CreateDB[DB erstellen]\n    CreateDB --&gt; LoadBasicData[Basisdaten laden]\n    CheckDB --&gt;|Ja| ValidateDB[DB-Struktur pr\u00fcfen]\n    ValidateDB --&gt; LoadBasicData\n    LoadBasicData --&gt; InitSingletons[Singleton-Services initialisieren]\n    InitSingletons --&gt; InitLocalization[AppLocalizationService starten]\n    InitSingletons --&gt; InitImages[ImageLoader starten]\n    InitLocalization --&gt; CheckHardware[Hardware \u00fcberpr\u00fcfen]\n    InitImages --&gt; CheckHardware\n    CheckHardware --&gt; CheckScanner{Barcode-Scanner verf\u00fcgbar?}\n    CheckScanner --&gt;|Ja| ConfigScanner[Scanner konfigurieren]\n    CheckScanner --&gt;|Nein| SetupAlt[Alternative Eingabe einrichten]\n    ConfigScanner --&gt; CheckDisplays[Displays \u00fcberpr\u00fcfen]\n    SetupAlt --&gt; CheckDisplays\n    CheckDisplays --&gt; InitUI[Hauptoberfl\u00e4che initialisieren]\n    InitUI --&gt; ShowGameMode[ChooseGameModeView anzeigen]\n    ShowGameMode --&gt; End[Initialisierung abgeschlossen]</code></pre>"},{"location":"SAD/06_runtime_view/#szenario-5-sprachanderung-wahrend-der-laufzeit","title":"Szenario 5: Sprach\u00e4nderung w\u00e4hrend der Laufzeit","text":"<p>Dieses Szenario beschreibt, wie die Anwendung mit einer \u00c4nderung der Sprache durch den Benutzer w\u00e4hrend der Laufzeit umgeht.</p>"},{"location":"SAD/06_runtime_view/#beschreibung_3","title":"Beschreibung","text":"<ol> <li>Die Anwendung l\u00e4uft bereits und zeigt Inhalte in der aktuellen Sprache (z.B. Deutsch) an.</li> <li>Der Benutzer w\u00e4hlt \u00fcber ein Sprachauswahlmen\u00fc eine neue Sprache aus (z.B. Franz\u00f6sisch).</li> <li>Der Controller verarbeitet die Sprachauswahl und ruft die Methode <code>changeLanguage(String langCode)</code> des <code>AppLocalizationService</code> auf.</li> <li>Der Service f\u00fchrt folgende Schritte aus:<ul> <li>Laden der Sprachressourcen f\u00fcr die neue Sprache aus den entsprechenden Properties-Dateien</li> <li>Aktualisieren des internen Sprachzustands</li> <li>Benachrichtigen aller registrierten <code>LocalizationObserver</code> \u00fcber die Sprach\u00e4nderung</li> </ul> </li> <li>Jede UI-Komponente, die das <code>LocalizationObserver</code>-Interface implementiert, reagiert auf die Benachrichtigung:<ul> <li>Die Komponente ruft die Methode <code>updateLocalization()</code> auf</li> <li>Alle Texte, Beschriftungen und Tooltips werden aktualisiert</li> <li>Layout-Anpassungen werden vorgenommen, um l\u00e4ngere oder k\u00fcrzere Texte in der neuen Sprache zu ber\u00fccksichtigen</li> </ul> </li> <li>Die Benutzeroberfl\u00e4che wird vollst\u00e4ndig in der neuen Sprache angezeigt, ohne dass ein Neustart erforderlich ist.</li> <li>Die Spracheinstellung wird f\u00fcr zuk\u00fcnftige Anwendungsstarts gespeichert.</li> </ol>"},{"location":"SAD/06_runtime_view/#besonderheiten_3","title":"Besonderheiten","text":"<ul> <li>Der <code>AppLocalizationService</code> ist als Singleton implementiert, um einen zentralen Zugriffspunkt f\u00fcr Sprachressourcen zu bieten.</li> <li>Die Anwendung unterst\u00fctzt drei Sprachen: Deutsch, Englisch und Franz\u00f6sisch.</li> <li>Alle UI-Komponenten sind so gestaltet, dass sie dynamisch auf Sprach\u00e4nderungen reagieren k\u00f6nnen.</li> <li>Das Layout der Komponenten ist flexibel gestaltet, um unterschiedliche Textl\u00e4ngen in verschiedenen Sprachen zu ber\u00fccksichtigen.</li> <li>Die Sprach\u00e4nderung erfolgt in Echtzeit ohne Neustart der Anwendung oder Verlust des aktuellen Spielzustands.</li> </ul>"},{"location":"SAD/06_runtime_view/#diagramm_3","title":"Diagramm","text":"<pre><code>sequenceDiagram\n    participant User as Benutzer\n    participant UI as Sprachauswahl-UI:::viewStyle\n    participant Controller as Controller:::controllerStyle\n    participant ALS as AppLocalizationService:::localizationStyle\n    participant Observers as UI-Komponenten:::viewStyle\n    participant Resources as Sprachressourcen:::configStyle\n    participant Storage as Einstellungsspeicher:::utilsStyle\n\n    User-&gt;&gt;UI: W\u00e4hlt neue Sprache aus\n    UI-&gt;&gt;Controller: onLanguageSelected(langCode)\n    Controller-&gt;&gt;ALS: changeLanguage(langCode)\n    ALS-&gt;&gt;Resources: L\u00e4dt Sprachressourcen\n    Resources--&gt;&gt;ALS: Liefert lokalisierte Texte\n    ALS-&gt;&gt;Storage: Speichert Sprachpr\u00e4ferenz\n    ALS-&gt;&gt;Observers: notifyObservers()\n    loop F\u00fcr jede UI-Komponente\n        Observers-&gt;&gt;Observers: updateLocalization()\n        Observers-&gt;&gt;ALS: getText(key)\n        ALS--&gt;&gt;Observers: Lokalisierter Text\n        Observers-&gt;&gt;Observers: Aktualisiert UI-Elemente\n    end\n    Observers--&gt;&gt;User: Zeigt UI in neuer Sprache</code></pre>"},{"location":"SAD/06_runtime_view/#szenario-6-zustandsmanagement-im-mehrspielermodus","title":"Szenario 6: Zustandsmanagement im Mehrspielermodus","text":"<p>Dieses Szenario beschreibt, wie das System den Spielzustand im Mehrspielermodus verwaltet und synchronisiert, um eine konsistente Spielerfahrung zu gew\u00e4hrleisten.</p>"},{"location":"SAD/06_runtime_view/#beschreibung_4","title":"Beschreibung","text":"<ol> <li>Ein Mehrspielerspiel ist bereits im Gange mit zwei aktiven Spielern.</li> <li>Der <code>MultiplayerGameStateModel</code> ist das zentrale Element f\u00fcr die Zustandsverwaltung und enth\u00e4lt:<ul> <li>Die Liste gescannter Produkte</li> <li>Das aktuell ausgew\u00e4hlte Rezept</li> <li>Den Fortschritt des Spiels</li> <li>Den Zustand des Pinguin-Charakters</li> </ul> </li> <li>Bei jeder Aktion eines Spielers:<ul> <li>Der zust\u00e4ndige Controller aktualisiert das entsprechende Modell.</li> <li>Das Modell aktualisiert den <code>MultiplayerGameStateModel</code>.</li> <li>Der <code>MultiplayerGameStateModel</code> benachrichtigt alle Observer.</li> </ul> </li> <li>Der <code>MultiplayerGameController</code> reagiert auf Zustands\u00e4nderungen:<ul> <li>Berechnet den aktuellen Spielfortschritt</li> <li>Bestimmt, ob Spielziele erreicht wurden</li> <li>Koordiniert die Aktionen zwischen beiden Spielern</li> </ul> </li> <li>Wenn ein Spieler eine Aktion ausf\u00fchrt, die den Spielzustand \u00e4ndert:<ul> <li>Der Zustand wird atomar aktualisiert, um Race-Conditions zu vermeiden.</li> <li>Alle UI-Komponenten werden konsistent aktualisiert.</li> <li>Ausgaben auf beiden Bildschirmen werden synchronisiert.</li> </ul> </li> <li>Bei bestimmten Spielzust\u00e4nden:<ul> <li>Der Pinguin-Charakter \u00e4ndert seinen Animationszustand.</li> <li>Sound-Effekte werden abgespielt.</li> <li>Visuelle Hinweise werden angezeigt, um die Spieler zu leiten.</li> </ul> </li> </ol>"},{"location":"SAD/06_runtime_view/#besonderheiten_4","title":"Besonderheiten","text":"<ul> <li>Der <code>MultiplayerGameStateModel</code> verwendet das State-Pattern, um verschiedene Spielphasen zu verwalten.</li> <li>Die Zustands\u00e4nderungen werden durch ein ereignisbasiertes System propagiert, was eine lose Kopplung erm\u00f6glicht.</li> <li>Kritische Zustands\u00fcberg\u00e4nge werden in synchronisierten Bl\u00f6cken ausgef\u00fchrt, um Datenkonsistenz zu gew\u00e4hrleisten.</li> <li>Das Modell implementiert eine History-Funktionalit\u00e4t, die es erm\u00f6glicht, zu fr\u00fcheren Zust\u00e4nden zur\u00fcckzukehren.</li> <li>Die Beobachter werden nach Priorit\u00e4t benachrichtigt, um eine geordnete UI-Aktualisierung zu gew\u00e4hrleisten.</li> </ul>"},{"location":"SAD/06_runtime_view/#diagramm_4","title":"Diagramm","text":"<pre><code>stateDiagram\n    [*] --&gt; Initialisierung\n    Initialisierung --&gt; ErwarteScan: Spiel gestartet\n    ErwarteScan --&gt; ProduktGescannt: Barcode erkannt\n    ProduktGescannt --&gt; ErwarteScan: Weiteres Produkt ben\u00f6tigt\n    ProduktGescannt --&gt; RezeptVorgeschlagen: Genug Produkte f\u00fcr Rezept\n    RezeptVorgeschlagen --&gt; RezeptAusgew\u00e4hlt: Spieler 2 w\u00e4hlt Rezept\n    RezeptAusgew\u00e4hlt --&gt; RezeptPasst: Alle Zutaten vorhanden\n    RezeptAusgew\u00e4hlt --&gt; ErwarteScan: Fehlende Zutaten\n    RezeptPasst --&gt; SpielGewonnen: Rezept vollst\u00e4ndig\n    SpielGewonnen --&gt; [*]: Neustart oder Beenden\n\n    state ErwarteScan {\n        [*] --&gt; ScannerBereit\n        ScannerBereit --&gt; ScannerAktiv: Scan-Vorgang\n        ScannerAktiv --&gt; ScannerBereit: Scan abgebrochen\n        ScannerAktiv --&gt; ProduktIdentifizieren: Barcode erfasst\n        ProduktIdentifizieren --&gt; ScannerBereit: Produkt nicht gefunden\n        ProduktIdentifizieren --&gt; [*]: Produkt erkannt\n    }\n\n    state RezeptVorgeschlagen {\n        [*] --&gt; RezepteBerechnen\n        RezepteBerechnen --&gt; RezepteAnzeigen: Ranking erstellt\n        RezepteAnzeigen --&gt; [*]: Rezept ausgew\u00e4hlt\n    }</code></pre>"},{"location":"SAD/06_runtime_view/#zusammenfassung-der-laufzeitsicht","title":"Zusammenfassung der Laufzeitsicht","text":"<p>Die dargestellten Szenarien zeigen die wichtigsten Abl\u00e4ufe im Fridgely-System. Die Architektur erm\u00f6glicht durch ihre klare Strukturierung nach dem MVC-Pattern eine hohe Flexibilit\u00e4t und Robustheit. Besonders hervorzuheben sind:</p> <ol> <li> <p>Modulare Komponentenstruktur: Die Trennung in Controller, Views und Models erm\u00f6glicht eine unabh\u00e4ngige Entwicklung und Testung der Komponenten. Dies zeigt sich vor allem in der Implementierung des Mehrspielermodus mit spezialisierten Controllern (<code>MultiplayerPlayer1Controller</code> und <code>MultiplayerPlayer2Controller</code>). Die Einzelspielerimplementierung befindet sich derzeit noch in einem fr\u00fchen Planungsstadium.</p> </li> <li> <p>Observer-Pattern f\u00fcr Datenaustausch: Die Verwendung von <code>PropertyChangeSupport</code> und <code>PropertyChangeListener</code> sowie des <code>LocalizationObserver</code>-Interfaces erm\u00f6glicht eine lose Kopplung der Komponenten und eine effiziente Reaktion auf \u00c4nderungen. Dies ist besonders im Mehrspielermodus wichtig, wo die Aktionen eines Spielers direkt die Anzeige f\u00fcr den anderen Spieler beeinflussen.</p> </li> <li> <p>Zentrale Services als Singletons: Die gemeinsame Nutzung von Ressourcen \u00fcber Singleton-Services (<code>AppLocalizationService</code>, <code>ImageLoader</code>) erh\u00f6ht die Effizienz und Konsistenz und sorgt f\u00fcr ein einheitliches Erscheinungsbild in beiden Spielmodi.</p> </li> <li> <p>Mehrsprachigkeit und Lokalisierung: Die dynamische Sprach\u00e4nderung w\u00e4hrend der Laufzeit erh\u00f6ht die Benutzerfreundlichkeit und Zug\u00e4nglichkeit des Systems f\u00fcr Kinder verschiedener Sprachhintergr\u00fcnde.</p> </li> <li> <p>Spielfluss-Management: Das spezialisierte State-Model (<code>MultiplayerGameStateModel</code>) steuert den Spielablauf im Mehrspielermodus und sorgt f\u00fcr eine zuverl\u00e4ssige Spielerfahrung. F\u00fcr den Einzelspielermodus ist ein entsprechendes Model (<code>SinglePlayerGameStateModel</code>) in der Konzeptphase.</p> </li> </ol>"},{"location":"SAD/07_deployment_view/","title":"7. Verteilungssicht","text":"<p>Diese Verteilungssicht beschreibt die physische Infrastruktur, auf der das Fridgely-System l\u00e4uft, sowie die Zuordnung der Softwarekomponenten zu dieser Infrastruktur. Da Fridgely als physischer Smart-Fridge-Prototyp konzipiert ist, ist die Verteilungssicht besonders wichtig, um zu verstehen, wie die verschiedenen Hardware- und Softwarekomponenten zusammenwirken.</p>"},{"location":"SAD/07_deployment_view/#71-infrastruktur-ebene-1","title":"7.1 Infrastruktur Ebene 1","text":"<p>Das Fridgely-System besteht aus mehreren Hardware- und Software-Komponenten, die zusammen ein interaktives Smart-Fridge-Erlebnis bieten. Die folgende \u00dcbersicht zeigt die Hauptkomponenten und ihre Verbindungen.</p>"},{"location":"SAD/07_deployment_view/#ubersichtsdiagramm","title":"\u00dcbersichtsdiagramm","text":"<pre><code>graph TD\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    RaspberryPi[\"Raspberry Pi 5\"] --&gt; Display1[\"Hauptbildschirm (Touchscreen 1024x600)\"]\n    RaspberryPi --&gt; Display2[\"Zweiter Bildschirm (K\u00fchlschrankinhalt 1024x600)\"]\n    RaspberryPi --&gt; BarcodeScanners[\"Barcode-Scanner (USB-Verbindung)\"]\n    RaspberryPi --&gt; SQLiteDB[(\"SQLite Datenbank (Lokale Speicherung)\")]\n\n    JVM[\"Java Virtual Machine 21\"] --&gt; FridgelyApp[\"Fridgely Anwendung (Spring Boot JAR)\"]\n    RaspberryPi --&gt; JVM\n\n    FridgelyApp --&gt; UIComponents[\"Benutzerschnittstelle (Swing-Komponenten)\"]\n    FridgelyApp --&gt; BusinessLogic[\"Gesch\u00e4ftslogik (Controller &amp; Services)\"]\n    FridgelyApp --&gt; DataAccess[\"Datenzugriff (Repository-Schicht)\"]\n\n    DataAccess --&gt; SQLiteDB\n    BusinessLogic --&gt; DataAccess\n    UIComponents --&gt; BusinessLogic\n\n    class RaspberryPi,Display1,Display2,BarcodeScanners layerStyle\n    class JVM,FridgelyApp,UIComponents,BusinessLogic,DataAccess componentStyle\n    class SQLiteDB dbStyle</code></pre>"},{"location":"SAD/07_deployment_view/#infrastrukturelemente","title":"Infrastrukturelemente","text":"Element Beschreibung Raspberry Pi 5 Hauptrechner, auf dem die Fridgely-Anwendung l\u00e4uft. Ausgestattet mit 8GB RAM und Raspberry Pi OS. Hauptbildschirm 7-Zoll-Touch-Display (1024x600) f\u00fcr die Benutzerinteraktion. Dient als prim\u00e4re Benutzeroberfl\u00e4che f\u00fcr das Spiel. Zweiter Bildschirm 7-Zoll-Display (1024x600) zur Anzeige des K\u00fchlschrankinhalts. Nicht ber\u00fchrungsempfindlich. Barcode-Scanner USB-verbundene Barcode-Scanner zum Erfassen von Lebensmittelprodukten. Java VM Java Virtual Machine (JRE 21), auf der die Fridgely-Anwendung ausgef\u00fchrt wird. Fridgely-Anwendung JAR-Datei (Java-Archiv), das die gesamte Anwendung enth\u00e4lt. SQLite-Datenbank Lokale eingebettete Datenbank zur Speicherung von Produkten, Rezepten und Spielst\u00e4nden."},{"location":"SAD/07_deployment_view/#begrundung-fur-die-verteilungsstruktur","title":"Begr\u00fcndung f\u00fcr die Verteilungsstruktur","text":"<p>Die Wahl eines Raspberry Pi 5 als zentrale Hardware-Plattform bietet mehrere Vorteile:</p> <ol> <li>Kosteneffizienz: Der Raspberry Pi ist eine kosteng\u00fcnstige Plattform f\u00fcr Prototypen und Bildungszwecke.</li> <li>Ausreichende Leistung: Mit 8GB RAM und einem leistungsstarken ARM-Prozessor bietet er gen\u00fcgend Ressourcen f\u00fcr die Java-Anwendung, die zwei Displays und mehrere Barcode-Scanner verwaltet.</li> <li>Einfache Integration von Peripherieger\u00e4ten: USB-Schnittstellen f\u00fcr Scanner, HDMI und DSI f\u00fcr Displays.</li> <li>Geringe Leistungsaufnahme: Ideal f\u00fcr einen dauerhaft laufenden Smart-Fridge-Anwendungsfall.</li> </ol> <p>Die Zweibildschirl\u00f6sung wurde gew\u00e4hlt, um das Nutzererlebnis zu verbessern: 1. Hauptbildschirm (Touch): F\u00fcr Benutzerinteraktionen und Spielablauf 2. Zweiter Bildschirm: Zeigt den aktuellen K\u00fchlschrankinhalt, simuliert ein \"Smart-Fridge-Display\"</p> <p>Die Barcode-Scanner sind USB-verbunden, um eine zuverl\u00e4ssige und schnelle Datenerfassung zu erm\u00f6glichen.</p>"},{"location":"SAD/07_deployment_view/#qualitats-und-leistungsmerkmale","title":"Qualit\u00e4ts- und Leistungsmerkmale","text":"Qualit\u00e4tsmerkmal Bewertung Erl\u00e4uterung Verf\u00fcgbarkeit Hoch Das System ist als Standalone-L\u00f6sung konzipiert und ben\u00f6tigt keine Internetverbindung f\u00fcr den Betrieb. Modifizierbarkeit Mittel Durch die Java-basierte Implementierung und die MVC-Architektur ist die Software gut wartbar. Hardware-\u00c4nderungen erfordern jedoch physischen Zugriff. Performance Ausreichend Die Anwendung wurde f\u00fcr die begrenzten Ressourcen des Raspberry Pi optimiert. Tests haben gezeigt, dass Swing eine bessere Performance als JavaFX auf dieser Plattform bietet. Sicherheit Mittel Als geschlossenes System ohne Internetanbindung bietet es inh\u00e4rente Sicherheit. Die lokale SQLite-Datenbank erfordert keinen zus\u00e4tzlichen Datenbankserver. Testbarkeit Gut Das Repository-Pattern und die klare Schichtenarchitektur erm\u00f6glichen gute Testabdeckung mit JUnit."},{"location":"SAD/07_deployment_view/#zuordnung-von-bausteinen-zu-infrastruktur","title":"Zuordnung von Bausteinen zu Infrastruktur","text":"Softwarebaustein Infrastrukturelement Erl\u00e4uterung Fridgely Main Application Raspberry Pi / JVM Hauptanwendung, die \u00fcber das Spring Framework initialisiert wird. Controller-Schicht JVM Enth\u00e4lt die Steuerungslogik f\u00fcr Spiele (MultiplayerGameController) und UI-Navigation (ChooseGameModeController). View-Komponenten JVM / Displays Swing-basierte UI-Komponenten, die auf beiden Displays dargestellt werden. Model-Schicht JVM Enth\u00e4lt die Gesch\u00e4ftslogik und Dom\u00e4nenmodelle wie Product, Recipe, etc. Repository-Schicht JVM Implementiert den Datenzugriff auf die SQLite-Datenbank. SQLite-Datenbank Raspberry Pi / Dateisystem Eingebettete Datenbank, die als Datei im Dateisystem des Raspberry Pi gespeichert ist."},{"location":"SAD/07_deployment_view/#72-infrastruktur-ebene-2","title":"7.2 Infrastruktur Ebene 2","text":"<p>Auf dieser Ebene betrachten wir die inneren Details der wichtigsten Infrastrukturelemente. Wir konzentrieren uns dabei besonders auf die Softwarearchitektur des Fridgely-Systems und den Aufbau des Raspberry Pi-Setups.</p> <p></p>"},{"location":"SAD/07_deployment_view/#721-raspberry-pi-5-hardware-setup","title":"7.2.1 Raspberry Pi 5 (Hardware-Setup)","text":"<pre><code>graph TD\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    RaspberryPi[\"Raspberry Pi 5 8GB RAM, ARM Cortex-A76\"] --&gt; OS[\"Raspberry Pi OS (64-bit Bullseye)\"]\n    OS --&gt; JavaRuntime[\"Java Runtime 21 (OpenJDK)\"]\n    OS --&gt; FileSystem[\"Dateisystem (ext4)\"]\n\n    RaspberryPi --&gt; PowerSupply[\"Stromversorgung (USB-C, 5V/3A)\"]\n    RaspberryPi --&gt; USBPorts[\"USB-Ports (2x USB 2.0, 2x USB 3.0)\"]\n    RaspberryPi --&gt; DisplayPorts[\"Display-Anschl\u00fcsse (2x micro-HDMI, 1x DSI)\"]\n    RaspberryPi --&gt; Network[\"Netzwerk (Gigabit Ethernet, WiFi 5)\"]\n\n    USBPorts --&gt; BarcodeScanner1[\"Barcode-Scanner 1 (USB 2.0)\"]\n    USBPorts --&gt; BarcodeScanner2[\"Barcode-Scanner 2 (USB 2.0)\"]\n\n    DisplayPorts --&gt; MainDisplay[\"Hauptdisplay (Touch, 1024x600)\"]\n    DisplayPorts --&gt; SecondaryDisplay[\"Sekund\u00e4rdisplay (1024x600)\"]\n\n    FileSystem --&gt; SQLiteFile[\"SQLite-Datenbankdatei (fridgely.db)\"]\n    FileSystem --&gt; LogFiles[\"Log-Dateien\"]\n    FileSystem --&gt; ConfigFiles[\"Konfigurationsdateien\"]\n    FileSystem --&gt; AppJar[\"Fridgely-JAR-Datei\"]\n\n    class RaspberryPi,PowerSupply,USBPorts,DisplayPorts,Network,BarcodeScanner1,BarcodeScanner2,MainDisplay,SecondaryDisplay layerStyle\n    class OS,JavaRuntime componentStyle\n    class FileSystem interfaceStyle\n    class SQLiteFile,LogFiles,ConfigFiles,AppJar dbStyle</code></pre>"},{"location":"SAD/07_deployment_view/#hardware-komponenten","title":"Hardware-Komponenten","text":"Komponente Spezifikation Verwendungszweck Prozessor ARM Cortex-A76 (Quad-Core) Ausf\u00fchrung der Java-Anwendung und Betriebssystem Arbeitsspeicher 8GB LPDDR4 Arbeitsspeicher f\u00fcr die Anwendung und Betriebssystem Speicher 32GB microSD-Karte Speicherung von Betriebssystem, Anwendung und Datenbank Hauptdisplay 7\" Touchscreen, 1024x600 Prim\u00e4re Benutzeroberfl\u00e4che mit Touch-Eingabe Sekund\u00e4rdisplay 7\" Display, 1024x600 Anzeige des K\u00fchlschrankinhalts (FridgeStockView) Barcode-Scanner 2x USB-Barcode-Scanner Erfassung von Produkten f\u00fcr Einzel- und Mehrspielermodus Stromversorgung USB-C, 5V/3A Stromversorgung f\u00fcr das Gesamtsystem Geh\u00e4use Kunststoffgeh\u00e4use Sch\u00fctzt die Hardware und integriert die Displays"},{"location":"SAD/07_deployment_view/#722-fridgely-anwendung-softwarearchitektur","title":"7.2.2 Fridgely-Anwendung (Softwarearchitektur)","text":"<pre><code>graph TD\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    FridgelyApp[\"Fridgely-Hauptanwendung (Spring Boot)\"]\n\n    FridgelyApp --&gt; Views[\"Pr\u00e4sentationsschicht (Swing UI-Komponenten)\"]\n    FridgelyApp --&gt; Controllers[\"Anwendungsschicht (Controller)\"]\n    FridgelyApp --&gt; Models[\"Dom\u00e4nenschicht (Modelle)\"]\n    FridgelyApp --&gt; Repositories[\"Datenschicht (Repositories)\"]\n    FridgelyApp --&gt; Utils[\"Querschnittskomponenten (Utilities)\"]\n    FridgelyApp --&gt; GameLaunchers[\"Spielstarter-Komponenten\"]\n\n    Views --&gt; MainUI[\"Hauptspiel-UI\"]\n    Views --&gt; FridgeStockView[\"K\u00fchlschrankinhalt-Ansicht\"]\n    Views --&gt; ScannedItemsView[\"Gescannte-Produkte-Ansicht\"]\n      Controllers --&gt; GameControllers[\"Spielmodus-Controller\"]\n    Controllers --&gt; NavigationController[\"Navigations-Controller\"]\n    Controllers --&gt; FridgeStockController[\"K\u00fchlschrankinhalt-Controller\"]\n\n    GameLaunchers --&gt; MultiplayerLauncher[\"Mehrspieler-Starter\"]\n\n    Models --&gt; Product[\"Produkt-Modell\"]\n    Models --&gt; Recipe[\"Rezept-Modell\"]\n    Models --&gt; GameSession[\"Spielsitzungs-Modell\"]\n    Models --&gt; FridgeStockModel[\"K\u00fchlschrankinhalts-Modell\"]\n    Models --&gt; PenguinModel[\"Pinguin-Modell\"]\n\n    Repositories --&gt; ProductRepo[\"Produkt-Repository\"]\n    Repositories --&gt; RecipeRepo[\"Rezept-Repository\"]\n    Repositories --&gt; StockRepo[\"Lagerbestands-Repository\"]\n      Utils --&gt; ImageLoader[\"Bild-Loader\"]\n    Utils --&gt; Localization[\"Lokalisierung\"]\n    Utils --&gt; Configuration[\"Konfiguration\"]\n\n    Repositories --&gt; SQLiteDB[(\"SQLite-Datenbank\")]\n      class Views,MainUI,FridgeStockView,ScannedItemsView componentStyle\n    class Controllers,GameControllers,NavigationController,FridgeStockController componentStyle\n    class Models,Product,Recipe,GameSession,FridgeStockModel,PenguinModel componentStyle\n    class Repositories,ProductRepo,RecipeRepo,StockRepo componentStyle\n    class Utils,ImageLoader,Localization,Configuration componentStyle\n    class GameLaunchers,MultiplayerLauncher componentStyle\n    class FridgelyApp layerStyle\n    class SQLiteDB dbStyle</code></pre>"},{"location":"SAD/07_deployment_view/#softwarekomponenten","title":"Softwarekomponenten","text":"Komponente Beschreibung Technologie Hauptanwendung Spring Boot-Anwendung, die alle Komponenten initialisiert und verwaltet Spring Boot 3.4.5, Java 21 Pr\u00e4sentationsschicht Benutzeroberfl\u00e4chenkomponenten f\u00fcr Spiel und K\u00fchlschrankansicht Swing Anwendungsschicht Controller f\u00fcr Spiellogik, Navigation und K\u00fchlschrankinhalt Java Spielstarter Spezialisierte Komponenten zum Starten von Spielmodi (MultiplayerGameLauncher) Java Dom\u00e4nenschicht Modellklassen f\u00fcr Produkte, Rezepte, Spielsitzungen, Pinguin und K\u00fchlschrankinhalt Java Datenschicht Repository-Implementierungen f\u00fcr Datenbankzugriff mit Spring Data JPA und QueryDSL f\u00fcr flexible und typsichere Abfragen JPA, QueryDSL, JDBC Konfiguration AppConfig, GameConfig und andere Konfigurationsklassen Java, Spring Configuration Lokalisierung AppLocalizationService f\u00fcr mehrsprachige Unterst\u00fctzung Java Querschnittskomponenten Hilfsklassen f\u00fcr Bilder und Utility-Funktionen Java"},{"location":"SAD/07_deployment_view/#723-deployment-und-build-prozess","title":"7.2.3 Deployment- und Build-Prozess","text":"<pre><code>graph TD\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    GitRepo[\"Git-Repository (GitLab FHNW)\"] --&gt; CI[\"CI/CD-Pipeline (GitLab CI)\"]\n\n    CI --&gt; Validate[\"Validierung (Maven validate)\"]\n    Validate --&gt; Test[\"Tests (Maven test)\"]\n    Test --&gt; Package[\"Paketierung (Maven package)\"]\n    Package --&gt; Deploy[\"Deployment (Maven deploy)\"]\n    Deploy --&gt; Release[\"Release (GitLab Release)\"]\n\n    Release --&gt; ArtifactJAR[\"JAR-Artefakt (fridgely-*.jar)\"]\n\n    ArtifactJAR --&gt; RaspberryPi[\"Raspberry Pi (Zielumgebung)\"]\n\n    RaspberryPi --&gt; StartScript[\"Start-Skript (start.sh)\"]\n    RaspberryPi --&gt; RestartScript[\"Neustart-Skript (restart.sh)\"]\n\n    class GitRepo,CI,Validate,Test,Package,Deploy,Release componentStyle\n    class ArtifactJAR interfaceStyle\n    class RaspberryPi,StartScript,RestartScript layerStyle</code></pre> <p>Der Deployment-Prozess f\u00fcr Fridgely umfasst mehrere Schritte:</p> <ol> <li>Versionskontrolle: Der Quellcode wird in einem GitLab-Repository bei der FHNW verwaltet.</li> <li>Automatisierte Builds: Eine GitLab CI/CD-Pipeline f\u00fchrt folgende Schritte aus:</li> <li>Code-Validierung (Maven validate)</li> <li>Ausf\u00fchrung von Tests (Maven test, mit JaCoCo f\u00fcr Code-Coverage)</li> <li>Erstellung des JAR-Pakets (Maven package)</li> <li>Deployment des Artefakts (Maven deploy)</li> <li> <p>Erstellung eines Releases in GitLab</p> </li> <li> <p>Deployment auf dem Raspberry Pi:</p> </li> <li>Kopieren der JAR-Datei auf den Raspberry Pi \u00fcber SSH</li> <li>Ausf\u00fchrung des Start-Skripts (start.sh)</li> <li>Bei Bedarf Neustart \u00fcber restart.sh</li> </ol>"},{"location":"SAD/07_deployment_view/#automatisierte-deployment-konfiguration","title":"Automatisierte Deployment-Konfiguration","text":"<p>Die pom.xml enth\u00e4lt spezifische Konfigurationen f\u00fcr das Deployment auf dem Raspberry Pi:</p> Parameter Wert Beschreibung pi.hostname raspberrypi Hostname des Raspberry Pi pi.ipnumber 10.207.10.169 IP-Adresse des Raspberry Pi pi.port 22 SSH-Port f\u00fcr die Verbindung pi.username ip12 Benutzername f\u00fcr SSH-Zugriff pi.password -IP12Fridgely- Passwort f\u00fcr SSH-Zugriff pi.deploydirectory /home/ip12/deploy Zielverzeichnis f\u00fcr das Deployment pi.startScript start.sh Skript zum Starten der Anwendung pi.restartScript restart.sh Skript zum Neustarten der Anwendung"},{"location":"SAD/07_deployment_view/#724-sqlite-datenbank","title":"7.2.4 SQLite-Datenbank","text":"<p>Die SQLite-Datenbank ist eine eingebettete Datenbank, die als einzelne Datei im Dateisystem des Raspberry Pi existiert. Sie speichert alle persistenten Daten f\u00fcr das Fridgely-System. Der Zugriff erfolgt \u00fcber Spring Data JPA und QueryDSL f\u00fcr flexible und typsichere Abfragen.</p> <p></p>"},{"location":"SAD/07_deployment_view/#datenbankschema","title":"Datenbankschema","text":"Tabelle Beschreibung Wichtige Felder PRODUCTS Speichert Informationen zu allen Produkten barcode, name, description RECIPES Enth\u00e4lt Rezeptinformationen id, name, description, difficulty, preparationTime RECIPEINGREDIENTS Verkn\u00fcpfungstabelle zwischen Rezepten und K\u00fchlschrankinhalt recipeId, barcode FRIDGESTOCK Speichert den aktuellen K\u00fchlschrankinhalt id, barcode, quantity, expirydate <p>Die Datenbank wird \u00fcber das Repository-Pattern angesprochen, das eine saubere Trennung zwischen Datenzugriffscode und Gesch\u00e4ftslogik gew\u00e4hrleistet. Die technische Implementierung umfasst:</p> <ul> <li>JPA-Entities: F\u00fcr die ORM-Mappings der Tabellen zu Java-Objekten</li> <li>JPA-Repositories: F\u00fcr grundlegende CRUD-Operationen (wie FridgeStockJpaRepository, ProductJpaRepository)</li> <li>Custom Repository-Implementierungen: F\u00fcr komplexere Gesch\u00e4ftslogik (wie FridgeStockRepository, ProductRepository)</li> <li>QueryDSL: F\u00fcr typsichere und dynamische Abfragen (mit QFridgeStock)</li> <li>Hibernate Dialect: Spezifischer SQLite-Dialekt f\u00fcr die Kompatibilit\u00e4t mit Hibernate</li> </ul>"},{"location":"SAD/07_deployment_view/#73-deployment-fur-verschiedene-umgebungen","title":"7.3 Deployment f\u00fcr verschiedene Umgebungen","text":""},{"location":"SAD/07_deployment_view/#731-entwicklungsumgebung","title":"7.3.1 Entwicklungsumgebung","text":"<p>In der Entwicklungsumgebung wird Fridgely auf Standard-Entwickler-PCs mit Windows oder macOS entwickelt:</p> Aspekt Beschreibung Hardware Standard-Entwickler-PC oder Laptop (Windows/macOS) JDK OpenJDK 21 IDE IntelliJ IDEA oder Visual Studio Code Build-Tool Maven Datenbank Lokale SQLite-Datenbank Displays Simulation der Dual-Display-Konfiguration durch separate Fenster <p>Entwickler k\u00f6nnen die Anwendung lokal ausf\u00fchren und die Dual-Display-Funktionalit\u00e4t simulieren, indem separate Fenster f\u00fcr die Hauptansicht und die K\u00fchlschrankansicht verwendet werden.</p>"},{"location":"SAD/07_deployment_view/#732-test-und-staging-umgebung","title":"7.3.2 Test- und Staging-Umgebung","text":"<p>Vor dem produktiven Einsatz wird Fridgely in einer Test-Umgebung validiert:</p> Aspekt Beschreibung Hardware Raspberry Pi 5 mit identischer Konfiguration wie in der Produktionsumgebung JRE OpenJDK 21 f\u00fcr ARM Displays Zwei 7-Zoll-Displays in der finalen Konfiguration Barcode-Scanner Die gleichen USB-Barcode-Scanner wie in der Produktionsumgebung Datenbank Test-SQLite-Datenbank mit Testdaten"},{"location":"SAD/07_deployment_view/#733-produktionsumgebung","title":"7.3.3 Produktionsumgebung","text":"<p>Die endg\u00fcltige Produktionsumgebung entspricht der in Ebene 1 beschriebenen Infrastruktur. Besondere Aspekte:</p> Aspekt Beschreibung Automatischer Start Die Anwendung startet automatisch beim Hochfahren des Raspberry Pi Kiosk-Modus Das System l\u00e4uft im Kiosk-Modus, um Zugriff auf das Betriebssystem zu verhindern Datensicherung Regelm\u00e4ssige Sicherung der SQLite-Datenbankdatei Logging Erweitertes Logging f\u00fcr Fehlerdiagnose und Analyse"},{"location":"SAD/07_deployment_view/#74-hardware-software-integration","title":"7.4 Hardware-Software-Integration","text":""},{"location":"SAD/07_deployment_view/#741-barcode-scanner-integration","title":"7.4.1 Barcode-Scanner-Integration","text":"<p>Der Barcode-Scanner ist ein zentrales Element der Fridgely-Anwendung. Es erm\u00f6glicht die schnelle und zuverl\u00e4ssige Erfassung von Produkten w\u00e4hrend des Spiels. Die Integration erfolgt \u00fcber folgende Komponenten:</p> Komponente Beschreibung JVM-Tastatureingabe Da Barcode-Scanner als HID-Ger\u00e4te arbeiten, werden deren Eingaben vom System als Tastatureingaben interpretiert Controller-Komponenten Die Controller empfangen und verarbeiten die Barcode-Eingaben im jeweiligen Spielkontext USB-Treiber Standardtreiber des Raspberry Pi OS f\u00fcr die USB-Barcode-Scanner <p>Die Scanner werden an USB-Ports des Raspberry Pi angeschlossen und funktionieren ohne spezielle Treiber. Im Mehrspielermodus werden sie physisch den entsprechenden Spielern zugeordnet. Der Scan-Prozess:</p> <ol> <li>Barcode wird vom Scanner erfasst und als Zeichenfolge (simulierte Tastatureingabe) an das System gesendet</li> <li>Die Controller-Komponenten der Anwendung empfangen diese Eingabe im Fokus-Kontext</li> <li>Die jeweiligen Controller verarbeiten den Barcode gem\u00e4ss dem aktuellen Spielzustand</li> <li>Der Controller sucht das entsprechende Produkt in der Datenbank und f\u00fchrt die Spiellogik aus</li> </ol>"},{"location":"SAD/07_deployment_view/#742-dual-display-management","title":"7.4.2 Dual-Display-Management","text":"<p>Das Dual-Display-Management ist eine weitere Besonderheit des Fridgely-Systems. Die Anwendung erkennt automatisch die verf\u00fcgbaren Bildschirme und konfiguriert sie entsprechend:</p> <pre><code>public static void detectScreens() {\n    try {\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n        GraphicsDevice[] screens = ge.getScreenDevices();\n        for (GraphicsDevice screen : screens) {\n            Rectangle bounds = screen.getDefaultConfiguration().getBounds();\n            // Assign screens based on new requirement:\n            if (bounds.width == 600 &amp;&amp; bounds.height == 1024) {\n                mainAppScreen = screen;\n                LOGGER.info(\"Identified main app screen (1024x600): \" + screen.getIDstring());\n            } else if (bounds.width == 1080 &amp;&amp; bounds.height == 1920) {\n                scannedItemsScreen = screen;\n                LOGGER.info(\"Identified scanned items screen (1920x1080): \" + screen.getIDstring());\n            }\n        }\n        // Fallback logic\n        if (mainAppScreen == null) {\n            mainAppScreen = ge.getDefaultScreenDevice();\n            LOGGER.warning(\"Target main app screen (1024x600) not found. Using default: \" + mainAppScreen.getIDstring());\n        }\n        if (scannedItemsScreen == null) {\n            if (screens.length &gt; 1) {\n                for (GraphicsDevice screen : screens) {\n                    if (screen != mainAppScreen) {\n                        scannedItemsScreen = screen;\n                        LOGGER.warning(\"Target scanned items screen (1920x1080) not found. Using a different screen: \" + scannedItemsScreen.getIDstring());\n                        break;\n                    }\n                }\n            }\n            if (scannedItemsScreen == null) {\n                scannedItemsScreen = mainAppScreen;\n                isSingleDisplay = true;\n                LOGGER.warning(\"Scanned items screen will use the main app screen as target.\");\n            }\n        }\n    } catch (Exception e) {\n        LOGGER.severe(\"Error during screen detection: \" + e.getMessage());\n    }\n}\n</code></pre> <p>Dieses flexible System erm\u00f6glicht es, dass Fridgely sowohl in der Entwicklungsumgebung auf einem einzelnen PC-Bildschirm als auch in der Produktionsumgebung mit zwei dedizierten Displays funktioniert.</p>"},{"location":"SAD/07_deployment_view/#75-fazit-und-besonderheiten-der-verteilungssicht","title":"7.5 Fazit und Besonderheiten der Verteilungssicht","text":"<p>Die Verteilungssicht des Fridgely-Systems zeichnet sich durch mehrere wichtige Eigenschaften aus:</p> <ol> <li>Optimierte Hardware-Software-Integration:</li> <li>Die Anwendung wurde speziell f\u00fcr die Eigenschaften und Einschr\u00e4nkungen des Raspberry Pi 5 optimiert.</li> <li>Die Dual-Display-L\u00f6sung bietet ein authentisches \"Smart-Fridge\"-Erlebnis.</li> <li> <p>Die Verwendung von Swing statt JavaFX (siehe ADR 1) verbessert die Performance auf der Zielplattform.</p> </li> <li> <p>Standalone-Konzept:</p> </li> <li>Das System ist als selbstst\u00e4ndige Einheit konzipiert, die keine dauerhaft aktive Internetverbindung ben\u00f6tigt.</li> <li> <p>Die lokale SQLite-Datenbank (siehe ADR 5) unterst\u00fctzt dieses Konzept und minimiert externe Abh\u00e4ngigkeiten.</p> </li> <li> <p>CI/CD-Automatisierung:</p> </li> <li>Die kontinuierliche Integration und Bereitstellung \u00fcber GitLab CI gew\u00e4hrleistet einen konsistenten und zuverl\u00e4ssigen Build- und Deployment-Prozess.</li> <li> <p>Die automatisierte Testausf\u00fchrung stellt sicher, dass nur validierte Software auf das Zielsystem gelangt.</p> </li> <li> <p>Modularer Softwareaufbau:</p> </li> <li>Die MVC-Architektur (siehe ADR 3) mit Repository-Pattern (siehe ADR 2) erm\u00f6glicht eine klare Trennung von Zust\u00e4ndigkeiten.</li> <li> <p>Der modulare Aufbau vereinfacht Wartung und k\u00fcnftige Erweiterungen.</p> </li> <li> <p>Anpassbarkeit und Flexibilit\u00e4t:</p> </li> <li>Das System kann sowohl in einer simulierten Umgebung auf Standard-PCs als auch auf der Ziel-Hardware ausgef\u00fchrt werden.</li> <li>Die mehrsprachige Benutzeroberfl\u00e4che (siehe ADR 4) erh\u00f6ht die Zug\u00e4nglichkeit und Einsatzm\u00f6glichkeiten.</li> </ol> <p>Der Fridgely-Smart-Fridge ist ein Beispiel daf\u00fcr, wie eine sorgf\u00e4ltig geplante Verteilungsarchitektur zur erfolgreichen Umsetzung eines Bildungsprojekts beitragen kann. Die klare Strukturierung und Dokumentation der Verteilungssicht gew\u00e4hrleistet, dass das System leicht verstanden, gewartet und weiterentwickelt werden kann.</p>"},{"location":"SAD/08_concepts/","title":"8. Querschnittliche Konzepte","text":"<p>Dieser Abschnitt beschreibt die \u00fcbergreifenden Konzepte und Ans\u00e4tze, die in mehreren Bereichen des Fridgely-Systems Anwendung finden. Diese querschnittlichen Konzepte bilden das Fundament f\u00fcr ein konsistentes Systemdesign und gew\u00e4hrleisten die konzeptionelle Integrit\u00e4t der Architektur.</p>"},{"location":"SAD/08_concepts/#81-fachliche-konzepte","title":"8.1 Fachliche Konzepte","text":""},{"location":"SAD/08_concepts/#811-domain-modell-und-fachliche-entitaten","title":"8.1.1 Domain-Modell und Fachliche Entit\u00e4ten","text":"<p>Fridgely nutzt ein koh\u00e4rentes Domain-Modell, das die wichtigsten fachlichen Konzepte und deren Beziehungen abbildet. Die Kernentit\u00e4ten dieses Modells sind:</p> <pre><code>classDiagram\n    class Product {\n        +String barcode\n        +String name\n        +String imageUrl\n        +Boolean perishable\n        +getProperties()\n    }\n\n    class Recipe {\n        +String name\n        +String description\n        +List~Ingredient~ ingredients\n        +String difficulty\n        +getRequiredIngredients()\n    }\n\n    class FridgeStock {\n        +Product product\n        +Integer quantity\n        +Date expiryDate\n        +isExpired()\n    }\n\n    class GameSession {\n        +String sessionId\n        +GameMode mode\n        +Integer score\n        +Date timestamp\n        +calculateResult()\n    }\n\n    class PenguinModel {\n        +String name\n        +Integer happiness\n        +updateHappiness()\n    }\n\n    Product \"1\" -- \"0..*\" FridgeStock\n    Recipe \"1\" -- \"0..*\" Product\n    GameSession \"1\" -- \"0..*\" FridgeStock\n    GameSession \"1\" -- \"1\" PenguinModel\n\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;</code></pre>"},{"location":"SAD/08_concepts/#812-mehrsprachigkeitskonzept","title":"8.1.2 Mehrsprachigkeitskonzept","text":"<p>Fridgely unterst\u00fctzt mehrere Sprachen (Deutsch, Englisch, Franz\u00f6sisch) durch ein zentralisiertes Lokalisierungskonzept:</p> <pre><code>graph TD\n    ALS[AppLocalizationService] --&gt; DE[DE: languages_de.properties]\n    ALS --&gt; EN[EN: languages_en.properties]\n    ALS --&gt; FR[FR: languages_fr.properties]\n    ALS --&gt; LO[LocalizationObserver Interface]\n\n    LO --&gt; V1[Views]\n    LO --&gt; C1[Controllers]\n    LO --&gt; M1[Models mit UI-Text]\n\n    subgraph \u00c4nderungsmechanismus\n        LS[Sprachauswahl] --&gt; ALS\n        ALS --&gt; NT[Benachrichtigung an Observer]\n        NT --&gt; UT[UI-Text aktualisieren]\n    end\n\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;</code></pre> <p>Die Mehrsprachigkeitsunterst\u00fctzung basiert auf folgenden Kernkonzepten:</p> <ol> <li> <p>Properties-Dateien im Resources-Verzeichnis</p> <ul> <li><code>languages_de.properties</code> f\u00fcr Deutsch</li> <li><code>languages_en.properties</code> f\u00fcr Englisch</li> <li><code>languages_fr.properties</code> f\u00fcr Franz\u00f6sisch</li> </ul> </li> <li> <p>Schl\u00fcssel-Wert-System: Jeder UI-Text wird \u00fcber einen Schl\u00fcssel referenziert:</p> <p>Beispiel aus languages_de.properties <pre><code>home.button.lang=Deutsch\ngamemode.title=Spielmodus w\u00e4hlen\ngamemode.singleplayer=Einzelspieler\n</code></pre></p> </li> <li> <p>Observer-Pattern f\u00fcr dynamische Updates: UI-Komponenten registrieren sich als Observer und werden bei Sprach\u00e4nderungen automatisch aktualisiert.</p> </li> </ol> <p>Diese Implementierung erm\u00f6glicht eine nahtlose Sprach\u00e4nderung zur Laufzeit ohne Neustart der Anwendung und unterst\u00fctzt die mehrsprachige Zielgruppe des Fridgely-Systems.</p>"},{"location":"SAD/08_concepts/#813-datenmodell-und-persistenzkonzept","title":"8.1.3 Datenmodell und Persistenzkonzept","text":"<p>Das Persistenzmodell von Fridgely basiert auf einem relationalen Datenbankschema, das \u00fcber JPA und den Repository-Layer zug\u00e4nglich ist:</p> <pre><code>erDiagram\n    PRODUCT {\n        string barcode PK\n        string name\n        string imageUrl\n        boolean perishable\n    }\n\n    RECIPE {\n        int id PK\n        string name\n        string description\n        string difficulty\n    }\n\n    FRIDGE_STOCK {\n        int id PK\n        string product_barcode FK\n        int quantity\n        date expiry_date\n    }\n\n    RECIPE_INGREDIENT {\n        int recipe_id FK\n        string product_barcode FK\n        int required_quantity\n    }\n\n    GAME_SESSION {\n        string id PK\n        string mode\n        int score\n        timestamp created_at\n    }\n\n    PRODUCT ||--o{ FRIDGE_STOCK : \"stored_as\"\n    PRODUCT ||--o{ RECIPE_INGREDIENT : \"used_in\"\n    RECIPE ||--o{ RECIPE_INGREDIENT : \"contains\"\n    GAME_SESSION ||--o{ FRIDGE_STOCK : \"interacts_with\"\n\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;</code></pre>"},{"location":"SAD/08_concepts/#82-user-experience-ux","title":"8.2 User Experience (UX)","text":""},{"location":"SAD/08_concepts/#821-einheitliches-ui-designkonzept","title":"8.2.1 Einheitliches UI-Designkonzept","text":"<p>Fridgely implementiert ein konsistentes, kindgerechtes UI-Design basierend auf folgenden Prinzipien:</p> <ol> <li> <p>Farbschema und visuelle Identit\u00e4t</p> <ul> <li>Hauptfarbe: Soft-Blue (RGB: 248, 248, 255) - definiert in <code>Constants.BACKGROUND_COLOR</code></li> <li>Akzentfarben: Gr\u00fcn f\u00fcr positive Aktionen, Rot f\u00fcr Warnungen</li> <li>Einheitliche Schriftart und Schriftgr\u00f6ssen f\u00fcr optimale Lesbarkeit</li> </ul> <pre><code>// Auszug aus Constants.java\npublic static final Color BACKGROUND_COLOR = new Color(248, 248, 255);\n</code></pre> <p>Die Konstanten-Klasse ist als Utility-Klasse implementiert, die ausschliesslich statische Konstanten  enth\u00e4lt und nicht instanziiert werden kann:</p> <pre><code>private Constants() {\n    throw new UnsupportedOperationException(\"Utility class\");\n}\n</code></pre> </li> <li> <p>Navigationsprinzipien</p> </li> <li>Flache Navigationsstruktur mit maximal 2 Ebenen</li> <li>Konsistente Platzierung von Navigation und Aktionsschaltfl\u00e4chen</li> <li>Direkte Manipulation durch Touch-Interaktion</li> </ol> <pre><code>graph TD\n    HP[Startseite] --&gt; GM[Spielmodus-Auswahl]\n    GM --&gt; SP[Einzelspieler]\n    GM --&gt; MP[Mehrspieler]\n\n    SP --&gt; SPG[Einzelspieler Spiel]\n    MP --&gt; MPG[Mehrspieler Spiel]\n\n    SPG --&gt; SR[Spielergebnis]\n    MPG --&gt; MR[Mehrspieler Ergebnis]\n\n    SR --&gt; GM\n    MR --&gt; GM\n\n    style HP fill:#1a202c,stroke:#4a5568\n    style GM fill:#2b3d4f,stroke:#83a598\n    style SP fill:#3c3836,stroke:#fabd2f\n    style MP fill:#2d3b2d,stroke:#8ec07c</code></pre> <p>Die zentrale Definition von UI-Konstanten in <code>Constants.java</code> gew\u00e4hrleistet eine konsistente visuelle Sprache in der gesamten Anwendung und erleichtert sp\u00e4tere Anpassungen des Farbschemas.</p>"},{"location":"SAD/08_concepts/#822-barrierefreie-bedienung-und-kindgerechte-interaktion","title":"8.2.2 Barrierefreie Bedienung und Kindgerechte Interaktion","text":"<p>Fridgely setzt ein durchdachtes Interaktionsdesign f\u00fcr Kinder um:</p> Interaktionsprinzip Umsetzung Einfache Sprache Altersentsprechende Formulierungen, kurze S\u00e4tze, positives Feedback Grosse Schaltfl\u00e4chen Touch-optimierte UI-Elemente (min. 48x48 px) Visuelle Hinweise Deutliche Hervorhebung aktiver Elemente, konsistente Farbcodierung Fehlertoleranz Best\u00e4tigungsdialoge f\u00fcr kritische Aktionen, einfache Korrekturm\u00f6glichkeiten Multimodale Interaktion Kombination aus Touch-Bedienung und Barcode-Scanning"},{"location":"SAD/08_concepts/#823-dual-display-konzept","title":"8.2.3 Dual-Display-Konzept","text":"<p>Das Dual-Display-Konzept verbessert das Nutzererlebnis und verst\u00e4rkt den Lerneffekt:</p> <pre><code>graph LR\n    subgraph Hauptdisplay\n        TUI[Touch-UI f\u00fcr Benutzerinteraktion]\n        GM[Spielmodi]\n        SE[Spielerlebnis]\n    end\n\n    subgraph K\u00fchlschrankdisplay\n        SIV[ScannedItemsView]\n    end\n\n    MGC[MultiplayerGameController] --&gt; SIV\n    SC[SpielController] --&gt; MGC\n\n    TUI --&gt; SC\n    GM --&gt; SC\n    SC --&gt; SE\n\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;</code></pre>"},{"location":"SAD/08_concepts/#83-architektur-und-entwurfsmuster","title":"8.3 Architektur- und Entwurfsmuster","text":""},{"location":"SAD/08_concepts/#831-mvc-architekturmuster","title":"8.3.1 MVC-Architekturmuster","text":"<p>Fridgely implementiert das Model-View-Controller Pattern durchg\u00e4ngig:</p> <pre><code>graph TB\n    subgraph V[Views]\n        MPGV[MultiplayerGameView]\n        MP1V[MultiplayerPlayer1View]\n        MP2V[MultiplayerPlayer2View]\n        SIV[ScannedItemsView]\n    end\n\n    subgraph C[Controller]\n        MGC[MultiplayerGameController]\n        MP1C[MultiplayerPlayer1Controller]\n        MP2C[MultiplayerPlayer2Controller]\n    end\n\n    subgraph M[Models]\n        MGSM[MultiplayerGameStateModel]\n        FSM[FridgeStockModel]\n        PM[PenguinModel]\n    end\n\n    C --&gt; V\n    C --&gt; M\n    M --&gt; C\n\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;</code></pre> <p>Vorteile des MVC-Musters im Fridgely-Kontext:</p> <ul> <li>Klare Trennung von Verantwortlichkeiten f\u00f6rdert Wartbarkeit</li> <li>Unabh\u00e4ngige Testbarkeit der einzelnen Komponenten</li> <li>Flexible Weiterentwicklung einzelner Schichten</li> </ul>"},{"location":"SAD/08_concepts/#832-repository-pattern","title":"8.3.2 Repository-Pattern","text":"<p>Das Repository-Pattern abstrahiert die Datenzugriffsschicht:</p> <pre><code>graph TB\n    C[Controller] --&gt; R[Repository-Interfaces]\n    R --&gt; IMPL[Repository-Implementierungen]\n    IMPL --&gt; JPA[JPA Repositories]\n    JPA --&gt; DB[SQLite Datenbank]\n\n    subgraph \"Repository-Interfaces\"\n        PR[ProductRepository]\n        RR[RecipeRepository]  \n        FSR[FridgeStockRepository]\n    end\n\n    subgraph \"JPA-Repositories\"\n        JPAPR[ProductJpaRepository]\n        JPARR[RecipeJpaRepository]\n        JPAFSR[FridgeStockJpaRepository]\n    end\n\n    classDef layerStyle fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef componentStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;</code></pre>"},{"location":"SAD/08_concepts/#833-observer-pattern","title":"8.3.3 Observer-Pattern","text":"<p>Das Observer-Pattern wird f\u00fcr folgende Zwecke eingesetzt:</p> <ol> <li>Lokalisierung: <code>LocalizationObserver</code> Interface benachrichtigt UI-Komponenten bei Sprach\u00e4nderungen</li> <li>Model-View-Synchronisation: <code>PropertyChangeSupport</code> aktualisiert Views bei \u00c4nderungen am Model</li> </ol> <pre><code>graph LR\n    FSM[FridgeStockModel] -- notifyObservers --&gt; PCS[PropertyChangeSupport]\n    PCS -- update --&gt; V1[FridgeStockView]\n    PCS -- update --&gt; V2[MultiplayerPlayer1View]\n\n    ALS[AppLocalizationService] -- notifyObservers --&gt; O[LocalizationObserver]\n    O -- update --&gt; V1\n    O -- update --&gt; V2</code></pre>"},{"location":"SAD/08_concepts/#834-singleton-pattern","title":"8.3.4 Singleton-Pattern","text":"<p>Singletons werden f\u00fcr gemeinsam genutzte Dienste eingesetzt:</p> Singleton Verantwortlichkeit ImageLoader Zentrales Laden und Caching von Bildern AppLocalizationService Verwaltung der Mehrsprachigkeit"},{"location":"SAD/08_concepts/#84-unter-der-haube","title":"8.4 Unter-der-Haube","text":""},{"location":"SAD/08_concepts/#841-konfigurationsmanagement","title":"8.4.1 Konfigurationsmanagement","text":"<p>Fridgely implementiert ein mehrstufiges Konfigurationsmanagement:</p> <pre><code>graph TB\n    SC[System-Konfiguration] --&gt; |Basis| AC[Application.properties]\n    AC --&gt; |Erweiterung| GC[GameConfig.java]\n    AC --&gt; |Laden| PC[PersistenceConfig.java]\n\n    GC --&gt; |beeinflusst| G[Spiellogik]\n    PC --&gt; |konfiguriert| DB[Datenbankzugriff]</code></pre>"},{"location":"SAD/08_concepts/#842-fehlerbehandlung","title":"8.4.2 Fehlerbehandlung","text":"<p>Die Fehlerbehandlung in Fridgely folgt einem einheitlichen Konzept:</p> <pre><code>graph TD\n    E[Exception] --&gt; LL[Logger]\n    E --&gt; UFB[UI-Feedback]\n\n    subgraph Fehlerbehandlungsstrategie\n        DB[Datenbank-Fehler] --&gt; FR[Fallback auf Default-Daten]\n        HW[Hardware-Fehler] --&gt; GM[Graceful Degradation]\n        UI[UI-Fehler] --&gt; RC[Neustart der Komponente]\n    end</code></pre> <p>Zentrale Prinzipien:</p> <ul> <li>Fehler werden zentral geloggt (Java Logger)</li> <li>Kindgerechte, nicht-technische Fehlermeldungen</li> <li>Automatische Wiederherstellung wenn m\u00f6glich</li> </ul>"},{"location":"SAD/08_concepts/#843-ressourcenmanagement","title":"8.4.3 Ressourcenmanagement","text":"<p>Ressourcen werden in Fridgely systematisch verwaltet:</p> Ressourcentyp Managementansatz Bilder Zentrales Laden und Caching \u00fcber <code>ImageLoader</code> Lokalisierungstexte Properties-Dateien pro Sprache Datenbankverbindungen Connection-Pooling \u00fcber Spring Data UI-Komponenten Standardisierte Erstellung und Entsorgung"},{"location":"SAD/08_concepts/#844-dual-display-management","title":"8.4.4 Dual-Display Management","text":"<pre><code>sequenceDiagram\n    participant App as Fridgely Application\n    participant GE as GraphicsEnvironment\n    participant MC as MainController\n    participant SIV as ScannedItemsView\n\n    App-&gt;&gt;GE: detectScreens()\n    GE--&gt;&gt;App: screens[]\n\n    App-&gt;&gt;App: identifyScreensByResolution()\n    Note over App: Pr\u00fcfung auf 600x1024 (Main)&lt;br/&gt;und 1080x1920 (FridgeView)\n\n    alt Single Display\n        App-&gt;&gt;App: isSingleDisplay = true\n        App-&gt;&gt;SIV: initialize(mainAppScreen)\n    else Dual Display \n        App-&gt;&gt;App: mainAppScreen = screen1\n        App-&gt;&gt;App: scannedItemsScreen = screen2\n        App-&gt;&gt;SIV: initialize(scannedItemsScreen)\n    end\n\n    App-&gt;&gt;MC: startApplication()</code></pre> <p>Die Dual-Display-Erkennung erfolgt automatisch beim Start der Anwendung durch die <code>detectScreens()</code>-Methode in der <code>Fridgely</code>-Hauptklasse. Diese Methode durchsucht die verf\u00fcgbaren Bildschirme nach spezifischen Aufl\u00f6sungen:</p> <ul> <li>Hauptbildschirm (Main App Screen): 600x1024 Pixel</li> <li>K\u00fchlschrankbildschirm (Scanned Items Screen): 1080x1920 Pixel</li> </ul> <p>F\u00fcr den Fall, dass die spezifischen Zielaufl\u00f6sungen nicht gefunden werden, implementiert das System eine Fallback-Strategie:</p> <ol> <li>Wenn kein Hauptbildschirm gefunden wird, wird der Standardbildschirm verwendet</li> <li>Wenn kein K\u00fchlschrankbildschirm gefunden wird, aber mehrere Bildschirme vorhanden sind, wird ein anderer Bildschirm gew\u00e4hlt</li> <li>Wenn nur ein Bildschirm verf\u00fcgbar ist, wird der isSingleDisplay-Modus aktiviert, und der Hauptbildschirm wird f\u00fcr beide Ansichten verwendet</li> </ol> <p>Die <code>ScannedItemsView</code> implementiert sowohl das <code>PropertyChangeListener</code>-Interface, um auf \u00c4nderungen im <code>FridgeStockModel</code> zu reagieren, als auch das <code>LocalizationObserver</code>-Interface f\u00fcr die Mehrsprachigkeitsunterst\u00fctzung. Die Kommunikation erfolgt \u00fcber das Observer-Pattern, wobei die View automatisch aktualisiert wird, wenn sich der Inhalt des K\u00fchlschranks \u00e4ndert.</p> <p>Diese flexible Approach erm\u00f6glicht es Fridgely, sowohl in der Zielumgebung (Raspberry Pi mit Dual-Display-Setup) als auch in Entwicklungs- und Testumgebungen zu funktionieren.</p>"},{"location":"SAD/08_concepts/#85-entwicklungskonzepte","title":"8.5 Entwicklungskonzepte","text":""},{"location":"SAD/08_concepts/#851-build-prozess-und-dependency-management","title":"8.5.1 Build-Prozess und Dependency-Management","text":"<p>Fridgely nutzt Maven als Build-Tool mit folgendem Ansatz:</p> <pre><code>graph TD\n    POM[pom.xml] --&gt; DM[Dependency Management]\n    POM --&gt; BP[Build-Prozess]\n    POM --&gt; P[Plugins]\n    POM --&gt; DP[Deployment Profiles]\n\n    DM --&gt; S[Spring Boot 3.4.5]\n    DM --&gt; H[Hibernate 6.6.11]\n    DM --&gt; QD[QueryDSL 5.1.0]\n    DM --&gt; JP[Jakarta Persistence]\n\n    BP --&gt; C[Kompilierung]\n    BP --&gt; T[Tests]\n    BP --&gt; P[Packaging]\n\n    P --&gt; JAR[Ausf\u00fchrbares JAR]\n\n    DP --&gt; RPI[Raspberry Pi Deployment]\n    DP --&gt; CI[CI/CD Pipeline]</code></pre> <p>Die Build-Konfiguration in der <code>pom.xml</code> definiert folgende Kernaspekte:</p> Aspekt Details Spring Boot Parent Version 3.4.5 als Basis f\u00fcr Dependency-Management Java Version JDK 21 f\u00fcr moderne Sprachfeatures Datenbank SQLite mit Jakarta Persistence ORM/Query Kombination aus JPA und QueryDSL f\u00fcr typsichere Abfragen Test Framework JUnit 5 mit Mockito Code Quality Checkstyle, JaCoCo f\u00fcr Testabdeckung (&gt;70%) CI/CD GitLab CI mit automatisiertem Build, Test und Deployment <p>Spezielle Maven-Profile erm\u00f6glichen verschiedene Deployment-Optionen:</p> <ol> <li>release: Erzeugt ein ausf\u00fchrbares JAR mit allen Abh\u00e4ngigkeiten</li> <li>run-on-Pi: Kompiliert, verpackt und \u00fcbertr\u00e4gt die Anwendung auf den Raspberry Pi</li> <li>restart-on-Pi: Startet die Anwendung auf dem Raspberry Pi neu</li> </ol> <p>Der CI/CD-Prozess in <code>.gitlab-ci.yml</code> implementiert folgende Pipeline-Stufen</p> <ul> <li>build: Kompiliert den Code und f\u00fchrt Unit-Tests aus</li> <li>test: F\u00fchrt erweiterte Tests und Qualit\u00e4tspr\u00fcfungen durch</li> <li>package: Erstellt das ausf\u00fchrbare JAR-Archiv</li> <li>site: Generiert Projektdokumentation und Testberichte</li> <li>pages: Ver\u00f6ffentlicht die generierte Dokumentation</li> <li>deploy: Erstellt Release-Artefakte und Tags</li> </ul>"},{"location":"SAD/08_concepts/#852-entwicklungsworkflow-und-coding-konventionen","title":"8.5.2 Entwicklungsworkflow und Coding-Konventionen","text":"<p>Der Entwicklungsworkflow folgt klaren Richtlinien:</p> Bereich Konventionen Paketstruktur ch.primeo.fridgely mit Unterpaketen f\u00fcr MVC Namenskonventionen PascalCase f\u00fcr Klassen, camelCase f\u00fcr Methoden Code-Formatierung Einr\u00fcckung: 4 Spaces, Maximale Zeilenl\u00e4nge: 120 Zeichen Kommentarstil JavaDoc f\u00fcr \u00f6ffentliche Methoden, Inline-Kommentare f\u00fcr komplexe Logik Testorganisation Unit-Tests in src/test mit gleicher Paketstruktur"},{"location":"SAD/08_concepts/#853-testkonzept","title":"8.5.3 Testkonzept","text":"<p>Das Testkonzept von Fridgely umfasst verschiedene Teststufen:</p> <pre><code>graph TB\n    UT[Unit Tests] --&gt; I[Isolierte Komponententests]\n    IT[Integrationstests] --&gt; DB[Repository-DB Tests]\n    IT --&gt; C[Controller-View Tests]\n    ST[Systemtests] --&gt; E2E[End-to-End Workflows]\n\n    subgraph Testansatz\n        M[Mocking] --&gt; RM[Repository-Mocks]\n        M --&gt; SM[Service-Mocks]\n        AT[Automatisierte Tests] --&gt; CI[Continuous Integration]\n    end</code></pre>"},{"location":"SAD/08_concepts/#86-betriebskonzepte","title":"8.6 Betriebskonzepte","text":""},{"location":"SAD/08_concepts/#861-deployment-konzept","title":"8.6.1 Deployment-Konzept","text":"<p>Fridgely wird als eigenst\u00e4ndige Spring Boot-Anwendung deployed:</p> <pre><code>graph TD\n    JAR[Fridgely.jar] --&gt; RPI[Raspberry Pi 5]\n    RPI --&gt; SD[Systemd Service]\n    SD --&gt; AL[Autostart bei Boot]\n\n    subgraph Deployment Workflow\n        B[Build JAR] --&gt; T[Transfer auf Raspberry Pi]\n        T --&gt; IS[Installation als Service]\n        IS --&gt; R[Restart des Services]\n    end</code></pre>"},{"location":"SAD/08_concepts/#862-start-und-stop-konzept","title":"8.6.2 Start- und Stop-Konzept","text":"<pre><code>sequenceDiagram\n    participant S as Systemd\n    participant A as Application\n    participant ST as Startup Tasks\n    participant R as Runtime\n\n    S-&gt;&gt;A: start service\n    A-&gt;&gt;ST: detectScreens()\n    A-&gt;&gt;ST: preloadAllImages()\n    A-&gt;&gt;ST: initializeDatabase()\n    A-&gt;&gt;R: startMainControllers()\n\n    alt Normal Shutdown\n        S-&gt;&gt;A: stop service\n        A-&gt;&gt;A: cleanup resources\n        A-&gt;&gt;A: close database connections\n    else Exception\n        R-&gt;&gt;A: uncaught exception\n        A-&gt;&gt;A: log error\n        A-&gt;&gt;A: cleanup\n        A-&gt;&gt;S: exit code\n    end</code></pre>"},{"location":"SAD/08_concepts/#863-monitoring-und-logging","title":"8.6.3 Monitoring und Logging","text":"<p>Das Logging-Konzept von Fridgely unterst\u00fctzt das Monitoring im Betrieb:</p> Logging-Aspekt Umsetzung Log-Levels ERROR f\u00fcr kritische Fehler, WARN f\u00fcr Probleme, INFO f\u00fcr wichtige Ereignisse, DEBUG f\u00fcr Entwicklung Log-Format Zeitstempel, Thread, Klasse, Level, Nachricht Log-Speicherung Rollende Dateien mit max. Gr\u00f6sse und Aufbewahrungsdauer Performance-Monitoring Start/Ende wichtiger Operationen, Speichernutzung"},{"location":"SAD/08_concepts/#87-sicherheitskonzepte","title":"8.7 Sicherheitskonzepte","text":""},{"location":"SAD/08_concepts/#871-datenschutzkonzept","title":"8.7.1 Datenschutzkonzept","text":"<p>Obwohl Fridgely als Stand-alone-System konzipiert ist, wurden folgende Datenschutzaspekte ber\u00fccksichtigt:</p> <ul> <li>Keine dauerhafte Speicherung personenbezogener Daten</li> <li>Lokale Begrenzung der Datenerfassung auf das Ger\u00e4t</li> <li>Keine Netzwerk\u00fcbertragung sensibler Daten</li> </ul>"},{"location":"SAD/08_concepts/#872-betriebssicherheit","title":"8.7.2 Betriebssicherheit","text":"<pre><code>graph TD\n    subgraph Physische Sicherheit\n        G[Geh\u00e4usedesign] --&gt; S[Stabile Konstruktion]\n        G --&gt; Z[Zug\u00e4ngliche Komponenten]\n        G --&gt; K[Kabelf\u00fchrung]\n    end\n\n    subgraph Softwaresicherheit\n        V[Validierung] --&gt; E[Eingabevalidierung]\n        V --&gt; S2[SQL-Injection-Schutz]\n        R[Robustheit] --&gt; F[Fehlertoleranz]\n        R --&gt; W[Wiederherstellung]\n    end</code></pre>"},{"location":"SAD/08_concepts/#88-zusammenfassung","title":"8.8 Zusammenfassung","text":"<p>Die querschnittlichen Konzepte des Fridgely-Systems bilden ein solides Fundament f\u00fcr die Architektur und sorgen f\u00fcr Konsistenz und Wartbarkeit \u00fcber alle Komponenten hinweg. Die beschriebenen Muster und Ans\u00e4tze wurden bewusst gew\u00e4hlt, um die besonderen Anforderungen eines p\u00e4dagogischen, kindgerechten Smart-Fridge-Systems zu erf\u00fcllen, das:</p> <ul> <li>Intuitiv bedienbar ist</li> <li>Lehrreich und spielerisch motiviert</li> <li>Robust und wartbar bleibt</li> <li>Ressourceneffizient auf der Zielplattform l\u00e4uft</li> </ul> <p>Durch die durchg\u00e4ngige Anwendung dieser Konzepte wird die technische Qualit\u00e4t des Systems sichergestellt und gleichzeitig eine optimale Benutzererfahrung erm\u00f6glicht.</p>"},{"location":"SAD/09_architecture_decisions/","title":"9. Architekturentscheidungen","text":"<p>Dieses Kapitel dokumentiert die wichtigsten Architekturentscheidungen, die w\u00e4hrend der Entwicklung des Fridgely-Systems getroffen wurden. Es folgt dem ADR (Architecture Decision Record) Format, um die Entscheidungen, deren Kontext, Alternativen und Konsequenzen klar zu dokumentieren.</p>"},{"location":"SAD/09_architecture_decisions/#91-ubersicht-der-architekturentscheidungen","title":"9.1 \u00dcbersicht der Architekturentscheidungen","text":"<p>Die folgenden Architekturentscheidungen hatten wesentlichen Einfluss auf das Design und die Implementierung des Fridgely-Systems:</p> ID Titel Kurzbeschreibung ADR-1 Verwendung von Java Swing statt JavaFX Entscheidung f\u00fcr Java Swing als UI-Framework aufgrund von Performance-Vorteilen auf Raspberry Pi ADR-2 Implementierung des MVC-Architekturmusters Strukturierung der Anwendung nach dem Model-View-Controller-Pattern f\u00fcr bessere Wartbarkeit ADR-3 Einsatz des Repository-Patterns f\u00fcr Datenzugriff Abstraktion der Datenbankoperationen durch Repository-Interfaces ADR-4 Mehrsprachigkeitskonzept \u00fcber zentrale Lokalisierungsservices Implementierung eines flexiblen, Observer-basierten Mehrsprachigkeitssystems ADR-5 Verwendung von SQLite als eingebettete Datenbank Einsatz einer lokalen, filebasierten Datenbank f\u00fcr Standalone-Betrieb ADR-6 Dual-Display-Management f\u00fcr Smart-Fridge-Erlebnis Entwicklung einer spezialisierten Bildschirmerkennungs- und Verwaltungslogik ADR-7 Zentrale Ressourcenverwaltung via Singleton-Services Implementierung von Singleton-Mustern f\u00fcr gemeinsam genutzte Ressourcen ADR-8 Einsatz von Spring Boot als Anwendungsframework Nutzung des Dependency Injection Containers f\u00fcr modulare Architektur ADR-9 Observer-Pattern f\u00fcr UI-Aktualisierungen Verwendung von PropertyChangeSupport/PropertyChangeListener f\u00fcr reaktive UI-Updates ADR-10 Barcode-Scanner Integration Implementierung einer hardwareunabh\u00e4ngigen Schnittstelle f\u00fcr Barcode-Scannung"},{"location":"SAD/09_architecture_decisions/#92-detaillierte-architekturentscheidungen","title":"9.2 Detaillierte Architekturentscheidungen","text":""},{"location":"SAD/09_architecture_decisions/#adr-1-verwendung-von-java-swing-statt-javafx","title":"ADR-1. Verwendung von Java Swing statt JavaFX","text":"<p>Status: Akzeptiert</p> <p>Kontext:  F\u00fcr die Entwicklung der Benutzeroberfl\u00e4che des Fridgely-Systems musste ein geeignetes UI-Framework gew\u00e4hlt werden. Die Hauptkandidaten waren Java Swing und JavaFX.</p> <p>Entscheidung:  Wir haben uns f\u00fcr Java Swing als UI-Framework anstelle von JavaFX entschieden.</p> <p>Begr\u00fcndung:</p> <ul> <li>Java Swing hat einen geringeren Speicher- und Ressourcenverbrauch auf dem Raspberry Pi</li> <li>Bessere Performance auf der Zielplattform Raspberry Pi 5 mit begrenzten Ressourcen</li> <li>Einfachere Integration mit Java SE Standards</li> <li>H\u00f6here Kompatibilit\u00e4t mit \u00e4lteren Java-Versionen, falls Downgrades notwendig werden</li> <li>Ausreichende Funktionalit\u00e4t f\u00fcr die Anforderungen des Fridgely-UI</li> </ul> <p>Alternativen:</p> <ul> <li>JavaFX: Bietet modernere UI-Komponenten und bessere Animationsunterst\u00fctzung, ben\u00f6tigt jedoch mehr Ressourcen. In ersten Tests zeigte JavaFX Leistungsprobleme auf dem Raspberry Pi, besonders bei der Dual-Display-Konfiguration.</li> <li>Web-basierte UI: Wurde aufgrund von Komplexit\u00e4t und zus\u00e4tzlichen Abh\u00e4ngigkeiten verworfen.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Einfachere Entwicklung auf ressourcenbeschr\u00e4nkter Hardware</li> <li>Eingeschr\u00e4nkte Animationsm\u00f6glichkeiten</li> <li>Begrenztere UI-Gestaltungsm\u00f6glichkeiten im Vergleich zu JavaFX</li> <li>Geringerer Speicherverbrauch</li> <li>Schnellere Startzeit der Anwendung</li> </ul> <pre><code>graph LR\n    A[UI-Framework Auswahl] --&gt; B[Java Swing]\n    A --&gt; C[JavaFX]\n    A --&gt; D[Web-basierte UI]\n\n    B --&gt; E[\"+ Ressourcenschonend&lt;br&gt;+ Gute Kompatibilit\u00e4t&lt;br&gt;- Weniger moderne UI-Elemente\"]\n    C --&gt; F[\"+ Moderne UI-Komponenten&lt;br&gt;+ Bessere Animationen&lt;br&gt;- H\u00f6herer Ressourcenverbrauch\"]\n    D --&gt; G[\"+ Flexibles Design&lt;br&gt;+ Plattformunabh\u00e4ngig&lt;br&gt;- Komplexere Architektur&lt;br&gt;- Zus\u00e4tzliche Abh\u00e4ngigkeiten\"]\n\n    style B fill:#1a202c,stroke:#4a5568\n    style C fill:#2b3d4f,stroke:#83a598\n    style D fill:#3c3836,stroke:#fabd2f</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-2-implementierung-des-mvc-architekturmusters","title":"ADR-2. Implementierung des MVC-Architekturmusters","text":"<p>Status: Akzeptiert</p> <p>Kontext:  Die Architektur des Fridgely-Systems erforderte eine klare Trennung von Daten, Benutzeroberfl\u00e4che und Anwendungslogik, um Wartbarkeit und Testbarkeit zu gew\u00e4hrleisten.</p> <p>Entscheidung:  Wir haben das MVC-Architekturmuster (Model-View-Controller) als grundlegendes Strukturierungsprinzip f\u00fcr das gesamte System implementiert.</p> <p>Begr\u00fcndung:</p> <ul> <li>Klare Trennung von Zust\u00e4ndigkeiten erleichtert Wartung und Erweiterung</li> <li>Erm\u00f6glicht parallele Entwicklung von UI und Gesch\u00e4ftslogik</li> <li>Bessere Testbarkeit durch isolierte Komponenten</li> <li>Passt gut zu Swing-basierten Anwendungen</li> <li>Unterst\u00fctzt die Observer-Mechanismen f\u00fcr UI-Updates und Datensynchronisation</li> </ul> <p>Alternativen:</p> <ul> <li>MVVM (Model-View-ViewModel): Bietet bessere Bindings, aber h\u00f6here Komplexit\u00e4t.</li> <li>MVP (Model-View-Presenter): \u00c4hnlich wie MVC, aber mit anderen Kommunikationsmustern.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Erh\u00f6hte Anzahl von Klassen aufgrund der Trennung von Verantwortlichkeiten</li> <li>Bessere Wiederverwendbarkeit von Komponenten</li> <li>Leichtere Wartbarkeit und Testbarkeit</li> <li>Erleichterte parallele Entwicklung</li> </ul> <pre><code>graph TB\n    subgraph V[Views]\n        MPGV[MultiplayerGameView]\n        MP1V[MultiplayerPlayer1View]\n        MP2V[MultiplayerPlayer2View]\n        SIV[ScannedItemsView]\n    end\n\n    subgraph C[Controller]\n        BC[BaseController Interface]\n        MGC[MultiplayerGameController]\n        MP1C[MultiplayerPlayer1Controller]\n        MP2C[MultiplayerPlayer2Controller]\n    end\n\n    subgraph M[Models]\n        MGSM[MultiplayerGameStateModel]\n        FSM[FridgeStockModel]\n        PM[PenguinModel]\n    end\n\n    C --&gt; V\n    C --&gt; M\n    M --&gt; C\n\n    classDef viewStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n    classDef controllerStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef modelStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    class V viewStyle;\n    class C controllerStyle;\n    class M modelStyle;\n    class MPGV,MP1V,MP2V,SIV viewStyle;\n    class BC,MGC,MP1C,MP2C controllerStyle;\n    class MGSM,FSM,PM modelStyle;</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-3-einsatz-des-repository-patterns-fur-datenzugriff","title":"ADR-3. Einsatz des Repository-Patterns f\u00fcr Datenzugriff","text":"<p>Status: Akzeptiert</p> <p>Kontext:  F\u00fcr den Zugriff auf persistente Daten (Produkte, Rezepte, K\u00fchlschrankinhalt) ben\u00f6tigte das System eine strukturierte und wartbare Datenzugriffsschicht.</p> <p>Entscheidung:  Wir haben das Repository-Pattern als Abstraktionsschicht f\u00fcr Datenbankzugriffe implementiert, kombiniert mit Spring Data JPA und QueryDSL f\u00fcr typsichere Abfragen.</p> <p>Begr\u00fcndung:</p> <ul> <li>Abstrahiert Datenbankdetails von der Gesch\u00e4ftslogik</li> <li>Erm\u00f6glicht zentrale Fehlerbehandlung bei Datenbankoperationen</li> <li>Vereinfacht Unit-Tests durch Mock-Implementierungen der Repositories</li> <li>Unterst\u00fctzt typsichere Abfragen mit QueryDSL und JPAQueryFactory</li> <li>Konsistente Schnittstelle unabh\u00e4ngig von der Datenbankimplementierung</li> </ul> <p>Alternativen:</p> <ul> <li>DAO-Pattern: \u00c4hnlich, aber weniger fokussiert auf die Dom\u00e4nenmodellierung.</li> <li>Direct JDBC Access: Zu niedrig-levelig, erh\u00f6ht die Kopplung.</li> <li>Active Record Pattern: Vermischt Dom\u00e4nenlogik mit Datenbankzugriff.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Erh\u00f6hte Abstraktion verbessert die Testbarkeit</li> <li>Zentrale Datenzugriffslogik verringert Codeduplizierung</li> <li>Vereinfachte Migration zu anderen Datenbanktypen bei Bedarf</li> <li>Zus\u00e4tzliche Abstraktionsebene, die etwas Overhead verursacht</li> </ul> <pre><code>graph TB\n    C[Controller] --&gt; R[Repository-Interfaces]\n    R --&gt; IMPL[Repository-Implementierungen]\n    IMPL --&gt; JPA[JPA Repositories]\n    JPA --&gt; DB[SQLite Datenbank]\n\n    subgraph \"Repository-Interfaces\"\n        PR[ProductRepository]\n        RR[RecipeRepository]  \n        FSR[FridgeStockRepository]\n    end\n\n    subgraph \"JPA-Repositories\"\n        JPAPR[ProductJpaRepository]\n        JPARR[RecipeJpaRepository]\n        JPAFSR[FridgeStockJpaRepository]\n    end\n\n    classDef interfaceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef implStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n    classDef dbStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    class R,PR,RR,FSR interfaceStyle;\n    class IMPL,JPAPR,JPARR,JPAFSR implStyle;\n    class DB dbStyle;</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-4-mehrsprachigkeitskonzept-uber-zentrale-lokalisierungsservices","title":"ADR-4. Mehrsprachigkeitskonzept \u00fcber zentrale Lokalisierungsservices","text":"<p>Status: Akzeptiert</p> <p>Kontext:  Fridgely soll in mehreren Sprachen (Deutsch, Englisch, Franz\u00f6sisch) verf\u00fcgbar sein, um den Einsatz in verschiedenen Bildungskontexten zu erm\u00f6glichen.</p> <p>Entscheidung:  Wir haben einen zentralen AppLocalizationService implementiert, der das Observer-Pattern verwendet, um UI-Komponenten \u00fcber Sprach\u00e4nderungen zu informieren.</p> <p>Begr\u00fcndung:</p> <ul> <li>Zentrale Verwaltung aller \u00dcbersetzungen</li> <li>Dynamischer Sprachwechsel zur Laufzeit ohne Anwendungsneustart</li> <li>Einheitliche Benennung von UI-Elementen in allen Sprachen</li> <li>Unterst\u00fctzung f\u00fcr kindgerechte Formulierungen</li> <li>Erweiterbarkeit f\u00fcr zuk\u00fcnftige Sprachen</li> </ul> <p>Alternativen:</p> <ul> <li>ResourceBundle direkt verwenden: Weniger flexibel und schwieriger zu zentralisieren.</li> <li>Externe Lokalisierungsbibliotheken: Unn\u00f6tige Abh\u00e4ngigkeiten f\u00fcr unsere Anforderungen.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Konsistente mehrsprachige Benutzeroberfl\u00e4che</li> <li>Einfaches Hinzuf\u00fcgen neuer Sprachen</li> <li>Kompaktere Wartung aller \u00dcbersetzungen an einem Ort</li> <li>Geringf\u00fcgig erh\u00f6hte Komplexit\u00e4t durch Observer-Pattern</li> </ul> <pre><code>graph TD\n    ALS[AppLocalizationService] --&gt; DE[DE languages_de.properties]\n    ALS --&gt; EN[EN languages_en.properties]\n    ALS --&gt; FR[FR languages_fr.properties]\n    ALS --&gt; LO[LocalizationObserver Interface]\n\n    LO --&gt; V1[Views]\n    LO --&gt; C1[Controllers]\n    LO --&gt; M1[Models mit UI-Text]\n\n    subgraph \u00c4nderungsmechanismus\n        LS[Sprachauswahl] --&gt; ALS\n        ALS --&gt; NT[Benachrichtigung an Observer]\n        NT --&gt; UT[UI-Text aktualisieren]\n    end\n\n    classDef serviceStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef resourceStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n    classDef interfaceStyle fill:#2b3d4f,stroke:#83a598,stroke-width:1px;\n    classDef componentStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n\n    class ALS serviceStyle;\n    class DE,EN,FR resourceStyle;\n    class LO interfaceStyle;\n    class V1,C1,M1,LS,NT,UT componentStyle;</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-5-verwendung-von-sqlite-als-eingebettete-datenbank","title":"ADR-5. Verwendung von SQLite als eingebettete Datenbank","text":"<p>Status: Akzeptiert</p> <p>Kontext:  Fridgely ben\u00f6tigt eine Datenbank zur Speicherung von Produktinformationen, Rezepten und Spielst\u00e4nden. Als Stand-alone-System auf einem Raspberry Pi waren die Anforderungen an Einfachheit, Ressourceneffizienz und Wartungsarmut hoch.</p> <p>Entscheidung:  Wir haben SQLite als eingebettete, filebasierte Datenbank gew\u00e4hlt.</p> <p>Begr\u00fcndung:</p> <ul> <li>Kein separater Datenbankserver erforderlich</li> <li>Geringe Ressourcenanforderungen</li> <li>Einfache Sicherung durch Datei-Kopie</li> <li>Ausreichende Leistung f\u00fcr die Datenmengen von Fridgely</li> <li>Gut unterst\u00fctzt durch Spring Data JPA und Hibernate</li> </ul> <p>Alternativen:</p> <ul> <li>H2 Database: \u00c4hnlich zu SQLite, aber mit etwas anderen Leistungsmerkmalen.</li> <li>PostgreSQL, MySQL: Zu schwergewichtig f\u00fcr die Anforderungen, erfordert zus\u00e4tzliche Server-Installation.</li> <li>NoSQL-Datenbanken: \u00dcberdimensioniert f\u00fcr die einfachen Datenstrukturen von Fridgely.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Vereinfachte Deployment- und Backup-Prozesse</li> <li>Geringerer Ressourcenverbrauch auf dem Raspberry Pi</li> <li>Eingeschr\u00e4nkte Parallelzugriffsm\u00f6glichkeiten (nicht kritisch f\u00fcr Fridgely)</li> <li>Gute Performance f\u00fcr die typische Nutzung von 1-2 gleichzeitigen Benutzern</li> </ul> <pre><code>erDiagram\n    PRODUCT {\n        string barcode PK\n        string name\n        string imageUrl\n        boolean perishable\n    }\n\n    RECIPE {\n        int id PK\n        string name\n        string description\n        string difficulty\n    }\n\n    FRIDGE_STOCK {\n        int id PK\n        string product_barcode FK\n        int quantity\n        date expiry_date\n    }\n\n    RECIPE_INGREDIENT {\n        int recipe_id FK\n        string product_barcode FK\n        int required_quantity\n    }\n\n    GAME_SESSION {\n        string id PK\n        string mode\n        int score\n        timestamp created_at\n    }\n\n    PRODUCT ||--o{ FRIDGE_STOCK : \"stored_as\"\n    PRODUCT ||--o{ RECIPE_INGREDIENT : \"used_in\"\n    RECIPE ||--o{ RECIPE_INGREDIENT : \"contains\"</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-6-dual-display-management-fur-smart-fridge-erlebnis","title":"ADR-6. Dual-Display-Management f\u00fcr Smart-Fridge-Erlebnis","text":"<p>Status: Akzeptiert</p> <p>Kontext:  Das Fridgely-System ben\u00f6tigt zwei Bildschirme f\u00fcr ein immersives Erlebnis: einen Hauptbildschirm f\u00fcr das Spiel und einen zweiten Bildschirm f\u00fcr die Anzeige des K\u00fchlschrankinhalts.</p> <p>Entscheidung:  Wir haben eine spezialisierte Bildschirmerkennungs- und Verwaltungslogik implementiert, die automatisch die angeschlossenen Displays erkennt und zuordnet.</p> <p>Begr\u00fcndung:</p> <ul> <li>Immersives Erlebnis erfordert separate Displays f\u00fcr Spiel und K\u00fchlschrankinhalt</li> <li>Automatische Erkennung erm\u00f6glicht einfache Installation</li> <li>Fallback-Mechanismus f\u00fcr Single-Display-Betrieb erh\u00f6ht die Flexibilit\u00e4t</li> <li>Optimale Nutzung der unterschiedlichen Displayaufl\u00f6sungen</li> <li>Kindergerechte Benutzerf\u00fchrung durch r\u00e4umliche Trennung der Informationen</li> </ul> <p>Alternativen:</p> <ul> <li>Single Display mit Split Screen: Weniger immersiv und technisch komplexer in der UI-Gestaltung.</li> <li>Manuelle Konfiguration: Erh\u00f6hter Aufwand bei der Installation und Wartung.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Verbesserte Benutzerinteraktion durch dedizierte Displays</li> <li>Flexible Einsatzm\u00f6glichkeiten (auch mit nur einem Bildschirm)</li> <li>Erh\u00f6hte Komplexit\u00e4t der Software-Architektur</li> <li>Zus\u00e4tzliche Hardware-Anforderungen (zweites Display)</li> </ul> <pre><code>sequenceDiagram\n    participant App as Fridgely Application\n    participant GE as GraphicsEnvironment\n    participant MC as MainController\n    participant SIV as ScannedItemsView\n\n    App-&gt;&gt;GE: detectScreens()\n    GE--&gt;&gt;App: screens[]\n\n    App-&gt;&gt;App: identifyScreensByResolution()\n    Note over App: Pr\u00fcfung auf 600x1024 (Main)&lt;br/&gt;und 1080x1920 (FridgeView)\n\n    alt Single Display\n        App-&gt;&gt;App: isSingleDisplay = true\n        App-&gt;&gt;SIV: initialize(mainAppScreen)\n    else Dual Display \n        App-&gt;&gt;App: mainAppScreen = screen1\n        App-&gt;&gt;App: scannedItemsScreen = screen2\n        App-&gt;&gt;SIV: initialize(scannedItemsScreen)\n    end\n\n    App-&gt;&gt;MC: startApplication()</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-7-zentrale-ressourcenverwaltung-via-singleton-services","title":"ADR-7. Zentrale Ressourcenverwaltung via Singleton-Services","text":"<p>Status: Akzeptiert</p> <p>Kontext:  Bestimmte Ressourcen wie Bilder und Lokalisierungstexte werden von vielen Komponenten im System ben\u00f6tigt. Eine effiziente Verwaltung dieser gemeinsam genutzten Ressourcen war erforderlich.</p> <p>Entscheidung:  Wir haben das Singleton-Pattern f\u00fcr zentrale Services wie ImageLoader und AppLocalizationService implementiert.</p> <p>Begr\u00fcndung:</p> <ul> <li>Vermeidung redundanter Ressourcenladung durch zentrales Caching</li> <li>Konsistente Verwaltung gemeinsam genutzter Ressourcen</li> <li>Reduzierter Speicherverbrauch durch geteilte Ressourcen</li> <li>Vereinfachte Wartung durch Zentralisierung der Ressourcenverwaltungslogik</li> <li>Integration mit Spring-Dependency-Injection durch <code>@Component</code> und <code>@Scope(\"singleton\")</code> Annotationen</li> </ul> <p>Alternativen:</p> <ul> <li>Statische Utility-Klassen: Weniger flexibel f\u00fcr Dependency Injection und Testing.</li> <li>Ressourcen bei Bedarf laden: Ineffizient f\u00fcr h\u00e4ufig verwendete Ressourcen.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Reduzierter Speicherverbrauch durch geteilte Ressourcen</li> <li>Beschleunigte Anwendung durch vorgeladene Bilder und Texte</li> <li>Vereinfachter Zugriff auf Ressourcen im gesamten Code</li> <li>Potenzieller Thread-Safety-Overhead bei gleichzeitigen Zugriffen</li> </ul> <pre><code>graph TD\n    SC[System-Konfiguration] --&gt; |Basis| AC[Application.properties]\n    AC --&gt; |Erweiterung| GC[GameConfig.java]\n    AC --&gt; |Laden| PC[PersistenceConfig.java]\n\n    GC --&gt; |beeinflusst| G[Spiellogik]\n    PC --&gt; |konfiguriert| DB[Datenbankzugriff]\n\n    subgraph Ressourcenmanagement \n        IL[ImageLoader Singleton]\n        ALS[AppLocalizationService Singleton]\n    end\n\n    IL --&gt; |l\u00e4dt und cached| IM[Bilder]\n    ALS --&gt; |verwaltet| LOC[Lokalisierungstexte]\n\n    subgraph \"Ressourcentypen\"\n        IM\n        LOC\n        CON[Verbindungen]\n        UI[UI-Komponenten]\n    end\n\n    classDef singletonStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef resourceStyle fill:#2d3b2d,stroke:#8ec07c,stroke-width:1px;\n\n    class IL,ALS singletonStyle;\n    class IM,LOC,CON,UI resourceStyle;</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-8-einsatz-von-spring-boot-als-anwendungsframework","title":"ADR-8. Einsatz von Spring Boot als Anwendungsframework","text":"<p>Status: Akzeptiert</p> <p>Kontext:  F\u00fcr die Entwicklung einer modularen, wartbaren Anwendung wurde ein Framework mit Dependency Injection und standardisierten Anwendungsstrukturen ben\u00f6tigt.</p> <p>Entscheidung:  Wir haben Spring Boot als Anwendungsframework gew\u00e4hlt.</p> <p>Begr\u00fcndung:</p> <ul> <li>Robustes Dependency Injection System erleichtert Modularit\u00e4t</li> <li>Umfangreiche Unterst\u00fctzung f\u00fcr JPA und Datenbankzugriff</li> <li>Vereinfachte Konfiguration durch Auto-Configuration</li> <li>Gute Integration mit Swing \u00fcber non-web Spring Boot Mode</li> <li>Einfache Testbarkeit durch Spring Testing Support</li> </ul> <p>Alternativen:</p> <ul> <li>Manuelles Dependency Management: Zu aufw\u00e4ndig und fehleranf\u00e4llig.</li> <li>JavaEE/Jakarta EE: \u00dcberdimensioniert f\u00fcr Desktop-Anwendung.</li> <li>Guice: Weniger umfangreiche \u00d6kosystem-Unterst\u00fctzung.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Verbesserte Modularit\u00e4t und Testbarkeit</li> <li>Vereinfachtes Konfigurationsmanagement</li> <li>Verl\u00e4ngerter Anwendungsstart durch Spring-Kontext-Initialisierung</li> <li>H\u00f6herer Speicherbedarf durch das Framework</li> </ul> <pre><code>graph TD\n    SB[Spring Boot Application] --&gt; DI[Dependency Injection]\n    SB --&gt; AC[Auto Configuration]\n    SB --&gt; JPA[JPA Support]\n\n    DI --&gt; BD[Bean Definition]\n    DI --&gt; BC[Bean Creation]\n    DI --&gt; BW[Bean Wiring]\n\n    subgraph Spring-Beans\n        MC[ChooseGameModeController]\n        IL[ImageLoader]\n        ALS[AppLocalizationService]\n        FSR[FridgeStockRepository]\n    end\n\n    BC --&gt; Spring-Beans\n\n    classDef springStyle fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n    classDef beanStyle fill:#2d3748,stroke:#a0aec0,stroke-width:1px;\n      class SB,DI,AC,JPA,BD,BC,BW springStyle;\n    class MC,IL,ALS,FSR beanStyle;</code></pre>"},{"location":"SAD/09_architecture_decisions/#adr-9-observer-pattern-fur-ui-aktualisierungen","title":"ADR-9. Observer-Pattern f\u00fcr UI-Aktualisierungen","text":"<p>Status: Akzeptiert</p> <p>Kontext:  Bei einer MVC-Architektur muss sichergestellt werden, dass die Views automatisch aktualisiert werden, wenn sich die zugrundeliegenden Daten im Model \u00e4ndern, ohne direkte Abh\u00e4ngigkeiten zwischen diesen Komponenten zu schaffen.</p> <p>Entscheidung:  Wir haben das Observer-Pattern durch Verwendung von PropertyChangeSupport und PropertyChangeListener f\u00fcr die Kommunikation zwischen Models und Views implementiert.</p> <p>Begr\u00fcndung:</p> <ul> <li>Lose Kopplung zwischen Model- und View-Komponenten</li> <li>Automatische Aktualisierung der Benutzeroberfl\u00e4che bei Daten\u00e4nderungen</li> <li>Standardisierte Implementierung \u00fcber die Java-Bibliothek</li> <li>Unterst\u00fctzung f\u00fcr spezifische \u00c4nderungsbenachrichtigungen durch Property-Namen</li> <li>Gute Integration mit dem MVC-Architekturmuster</li> </ul> <p>Alternativen:</p> <ul> <li>Eigene Event-Bus-Implementierung: H\u00f6here Komplexit\u00e4t ohne signifikante Vorteile.</li> <li>Direkte Methodenaufrufe: W\u00fcrde die Trennung von Model und View kompromittieren.</li> <li>Reactive Programming (z.B. RxJava): Zu schwergewichtig f\u00fcr die Anforderungen.</li> </ul> <p>Konsequenzen:</p> <ul> <li>Saubere Trennung von Datenmodell und Pr\u00e4sentation</li> <li>Reaktive Benutzeroberfl\u00e4che, die automatisch auf \u00c4nderungen reagiert</li> <li>Leichte Erweiterbarkeit durch Hinzuf\u00fcgen neuer Observer ohne \u00c4nderung bestehender Komponenten</li> <li>Geringf\u00fcgiger Overhead durch Event-Handling-Mechanismus</li> </ul> <pre><code>sequenceDiagram\n    participant M as Model\n    participant PCS as PropertyChangeSupport\n    participant PCL as PropertyChangeListener\n    participant V as View\n\n    Note over M: Model implementiert&lt;br/&gt;PropertyChangeSupport\n    Note over V: View implementiert&lt;br/&gt;PropertyChangeListener\n\n    M-&gt;&gt;PCS: firePropertyChange(\"property\", oldValue, newValue)\n    PCS-&gt;&gt;PCL: propertyChange(PropertyChangeEvent)\n    PCL-&gt;&gt;V: UI-Aktualisierung\n\n    Note over V: Die View wird nur \u00fcber&lt;br/&gt;relevante \u00c4nderungen&lt;br/&gt;informiert</code></pre>"},{"location":"SAD/09_architecture_decisions/#93-zusammenfassung-der-architekturentscheidungen","title":"9.3 Zusammenfassung der Architekturentscheidungen","text":"<p>Die dokumentierten Architekturentscheidungen verdeutlichen die grundlegenden Designprinzipien des Fridgely-Systems. Durch die Kombination von MVC-Architektur, Repository-Pattern, Singleton-Services und Spring Boot entstand eine modulare, wartbare und erweiterbare Anwendung. Die Entscheidung f\u00fcr Swing als UI-Framework und SQLite als Datenbank optimiert die Performance auf der ressourcenbeschr\u00e4nkten Raspberry Pi Plattform.</p> <p>Die Dual-Display-L\u00f6sung und das Mehrsprachigkeitskonzept unterst\u00fctzen die p\u00e4dagogischen Ziele des Projekts optimal und erm\u00f6glichen ein kindgerechtes, immersives Lernerlebnis. Die Implementierung des Observer-Patterns f\u00fcr UI-Aktualisierungen sorgt f\u00fcr eine reaktive Benutzeroberfl\u00e4che bei gleichzeitiger sauberer Trennung der Architekturschichten. Diese Architekturentscheidungen bilden zusammen das technische Fundament, auf dem Fridgely seine Mission erf\u00fcllen kann: Kinder spielerisch f\u00fcr einen nachhaltigen Umgang mit Lebensmitteln zu sensibilisieren.</p>"},{"location":"SAD/10_quality_requirements/","title":"Qualit\u00e4tsanforderungen","text":""},{"location":"SAD/10_quality_requirements/#qualitatsanforderungen","title":"Qualit\u00e4tsanforderungen","text":"<p>Dieser Abschnitt dokumentiert die wichtigsten Qualit\u00e4tsanforderungen an das Fridgely-System. Die grundlegenden Qualit\u00e4tsziele wurden bereits in Abschnitt 1.2 vorgestellt. Hier werden diese nun durch einen strukturierten Qualit\u00e4tsbaum und konkrete Qualit\u00e4tsszenarien weiter spezifiziert und operationalisiert.</p> <p>Fridgely als bildungsorientiertes Smart-Fridge-System stellt besondere Anforderungen an die Qualit\u00e4t, da es von Kindern im Alter von 7-13 Jahren genutzt wird und gleichzeitig robust, wartbar und attraktiv sein muss. Die nachfolgenden Qualit\u00e4tsanforderungen bilden einen wesentlichen Leitfaden f\u00fcr Architekturentscheidungen und die Produktentwicklung.</p>"},{"location":"SAD/10_quality_requirements/#qualitatsbaum","title":"Qualit\u00e4tsbaum","text":"<p>Der folgende Qualit\u00e4tsbaum gibt einen strukturierten \u00dcberblick \u00fcber die relevanten Qualit\u00e4tsanforderungen an das Fridgely-System. Die Haupt\u00e4ste repr\u00e4sentieren die ISO 25010 Qualit\u00e4tskategorien, die f\u00fcr unser System von Bedeutung sind.</p> <pre><code>graph TD\n    Q[Qualit\u00e4t Fridgely-System] --&gt; F[Funktionale Eignung]\n    Q --&gt; P[Performance]\n    Q --&gt; K[Kompatibilit\u00e4t]\n    Q --&gt; B[Benutzbarkeit]\n    Q --&gt; Z[Zuverl\u00e4ssigkeit]\n    Q --&gt; S[Sicherheit]\n    Q --&gt; W[Wartbarkeit]\n    Q --&gt; T[\u00dcbertragbarkeit]\n\n    F --&gt; F1[Funktionale Vollst\u00e4ndigkeit]\n    F --&gt; F2[Funktionale Korrektheit]\n    F --&gt; F3[Funktionale Angemessenheit]\n\n    P --&gt; P1[Zeitverhalten]\n    P --&gt; P2[Ressourcenverbrauch]\n\n    K --&gt; K1[Koexistenz]\n    K --&gt; K2[Interoperabilit\u00e4t]\n\n    B --&gt; B1[Angemessenheit Erkennbarkeit]\n    B --&gt; B2[Erlernbarkeit]\n    B --&gt; B3[Bedienbarkeit]\n    B --&gt; B4[Benutzerfehlerschutz]\n    B --&gt; B5[\u00c4sthetik der Benutzeroberfl\u00e4che]\n    B --&gt; B6[Barrierefreiheit]\n\n    Z --&gt; Z1[Reife]\n    Z --&gt; Z2[Verf\u00fcgbarkeit]\n    Z --&gt; Z3[Fehlertoleranz]\n    Z --&gt; Z4[Wiederherstellbarkeit]\n\n    S --&gt; S1[Vertraulichkeit]\n    S --&gt; S2[Integrit\u00e4t]\n    S --&gt; S3[Nachweisbarkeit]\n\n    W --&gt; W1[Modularit\u00e4t]\n    W --&gt; W2[Wiederverwendbarkeit]\n    W --&gt; W3[Analysierbarkeit]\n    W --&gt; W4[Modifizierbarkeit]\n    W --&gt; W5[Testbarkeit]\n\n    T --&gt; T1[Anpassungsf\u00e4higkeit]\n    T --&gt; T2[Installierbarkeit]\n    T --&gt; T3[Austauschbarkeit]\n\n    %% Priorisierung durch unterschiedliche Stile\n    classDef highPriority fill:#1a202c,stroke:#4a5568,stroke-width:2px;\n    classDef mediumPriority fill:#2b3d4f,stroke:#83a598,stroke-width:1.5px;\n    classDef lowPriority fill:#3c3836,stroke:#fabd2f,stroke-width:1px;\n\n    %% Hohe Priorit\u00e4t\n    class B,Z,W,B1,B2,B3,B5,Z1,Z3,Z4,W1,W4,W5 highPriority;\n\n    %% Mittlere Priorit\u00e4t\n    class F,P,F1,F2,P1,B4,B6,S1,W2,W3,T1,T2 mediumPriority;\n\n    %% Niedrige Priorit\u00e4t\n    class K,S,T,F3,P2,K1,K2,S2,S3,T3 lowPriority;</code></pre> <p>Die Farbkodierung im Qualit\u00e4tsbaum zeigt die Priorit\u00e4t der jeweiligen Qualit\u00e4tsanforderungen: - Rot markiert Anforderungen mit h\u00f6chster Priorit\u00e4t f\u00fcr das Fridgely-System - Gelb markiert Anforderungen mit mittlerer Priorit\u00e4t - Grau markiert Anforderungen mit geringerer Priorit\u00e4t</p>"},{"location":"SAD/10_quality_requirements/#qualitatsszenarien","title":"Qualit\u00e4tsszenarien","text":"<p>Die Szenarien definieren die oben dargestellten Qualit\u00e4tsanforderungen und machen sie mess- sowie \u00fcberpr\u00fcfbar. Sie sind nach Kategorien und Priorit\u00e4t geordnet.</p>"},{"location":"SAD/10_quality_requirements/#benutzbarkeit-usability-hochste-prioritat","title":"Benutzbarkeit (Usability) - H\u00f6chste Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung U-1 Intuitive Bedienung f\u00fcr Kinder Ein Kind (7-10 Jahre) nutzt zum ersten Mal den K\u00fchlschrank Das Kind kann innerhalb von 5 Minuten ohne Hilfe ein Produkt scannen und in den K\u00fchlschrank einordnen. Hoch ADR-1 U-2 Mehrsprachige Bedienung Ein Kind wechselt die Spracheinstellung Die UI aktualisiert sich sofort mit den Texten in der gew\u00e4hlten Sprache, ohne Neustart der Anwendung. Hoch ADR-4 U-3 Visuelles Feedback bei Aktionen Ein Produkt wird gescannt Der Nutzer erh\u00e4lt innerhalb von 0,5 Sekunden visuelles Feedback (Animation oder Farb\u00e4nderung), ob der Scan erfolgreich war. Hoch ADR-1 U-4 Kindgerechte Fehlermeldungen Ein Fehler tritt w\u00e4hrend der Nutzung auf Das System zeigt eine kindgerechte, nicht-technische Erkl\u00e4rung mit Pinguin-Maskottchen an und bietet einfache Handlungsoptionen. Mittel ADR-3 U-5 Attraktives Design Kind \u00f6ffnet die App zum ersten Mal Das ansprechende Design mit konsistentem Farbschema und Pinguin-Maskottchen erzeugt positive emotionale Reaktion und motiviert zur weiteren Nutzung. Hoch ADR-1"},{"location":"SAD/10_quality_requirements/#zuverlassigkeit-reliability-hochste-prioritat","title":"Zuverl\u00e4ssigkeit (Reliability) - H\u00f6chste Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung R-1 Resilienz bei intensiver Nutzung System wird \u00fcber 8 Stunden kontinuierlich in einer Lehrveranstaltung genutzt Keine erkennbaren Leistungseinbussen oder Speicherlecks. Hoch ADR-7 R-2 Umgang mit Barcode-Scanner-Ausf\u00e4llen Der Barcode-Scanner reagiert nicht System erkennt den Ausfall innerhalb von 2 Sekunden und zeigt eine benutzerfreundliche Fehlermeldung mit Handlungsanweisung. Hoch ADR-6 R-3 Datenerhalt bei Stromausfall Unerwarteter Stromausfall w\u00e4hrend des Betriebs Nach Wiederherstellung der Stromversorgung startet das System automatisch und alle vorher gespeicherten Daten sind intakt. Hoch ADR-5 R-4 Fehlertoleranz bei falschen Eingaben Kind scannt einen nicht unterst\u00fctzten Barcode System zeigt freundliche Meldung \"Dieses Produkt kenne ich noch nicht\" und bietet Option zur manuellen Eingabe. Mittel ADR-3"},{"location":"SAD/10_quality_requirements/#wartbarkeit-maintainability-hochste-prioritat","title":"Wartbarkeit (Maintainability) - H\u00f6chste Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung M-1 Erweiterbarkeit der Produktdatenbank Neue Produkte sollen hinzugef\u00fcgt werden Ein Entwickler kann die Produktdatenbank um 50 neue Eintr\u00e4ge in weniger als 30 Minuten erweitern. Hoch ADR-3 M-2 Einfacher Austausch von UI-Komponenten Anforderung zur \u00c4nderung des Spielmodus-Bildschirms Ein Entwickler kann die betreffende View-Komponente isoliert \u00e4ndern, ohne andere Systemteile zu beeinflussen. Hoch ADR-2 M-3 Hinzuf\u00fcgen einer neuen Sprache Franz\u00f6sische Sprachunterst\u00fctzung soll erg\u00e4nzt werden Integration aller franz\u00f6sischen Texte durch Hinzuf\u00fcgen einer Properties-Datei ohne Code\u00e4nderungen in weniger als 2 Stunden. Hoch ADR-4 M-4 Fehlerdiagnose bei Problemen Ein Fehler im Mehrspieler-Modus wird gemeldet Entwickler kann den Fehler durch Logs innerhalb von 30 Minuten lokalisieren. Hoch ADR-7 M-5 Testbarkeit von Komponenten Neue Funktion wird entwickelt Entwickler kann isolierte Unit-Tests f\u00fcr neue Komponenten schreiben, ohne komplexe Mocking-Strukturen aufbauen zu m\u00fcssen. Hoch ADR-2"},{"location":"SAD/10_quality_requirements/#performance-effizienz-mittlere-prioritat","title":"Performance (Effizienz) - Mittlere Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung P-1 Schnelle Startzeit System wird eingeschaltet Die Anwendung ist in weniger als 15 Sekunden nach dem Hochfahren des Raspberry Pi vollst\u00e4ndig betriebsbereit. Mittel ADR-8 P-2 Reaktionsgeschwindigkeit bei Interaktionen Benutzer dr\u00fcckt einen Button Die Reaktion erfolgt in weniger als 100ms, sodass keine wahrnehmbare Verz\u00f6gerung auftritt. Hoch ADR-1 P-3 Effizienter Speicherverbrauch System l\u00e4uft durchgehend \u00fcber mehrere Tage Speichernutzung bleibt unter 80% der verf\u00fcgbaren Ressourcen des Raspberry Pi 5. Mittel ADR-7 P-4 Schnelles Datenbankzugriffe Abfrage des K\u00fchlschrankinhalts Abfrage und Darstellung von bis zu 50 Produkten im K\u00fchlschrank erfolgt in weniger als 1 Sekunde. Mittel ADR-5"},{"location":"SAD/10_quality_requirements/#funktionale-eignung-mittlere-prioritat","title":"Funktionale Eignung - Mittlere Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung F-1 Korrekte Produkterkennung Barcode eines bekannten Produkts wird gescannt System identifiziert das Produkt korrekt in &gt;98% der F\u00e4lle. Hoch ADR-3 F-2 Passende Rezeptvorschl\u00e4ge Neue Produkte werden zum K\u00fchlschrank hinzugef\u00fcgt System schl\u00e4gt relevante Rezepte vor, die die vorhandenen Zutaten verwenden. Mittel ADR-3 F-3 Korrekte Haltbarkeitspr\u00fcfung Ein Produkt n\u00e4hert sich seinem Ablaufdatum System zeigt korrekte Warnungen an, wenn Produkte innerhalb der n\u00e4chsten 3 Tage ablaufen. Mittel ADR-3"},{"location":"SAD/10_quality_requirements/#ubertragbarkeit-portability-mittlere-bis-niedrige-prioritat","title":"\u00dcbertragbarkeit (Portability) - Mittlere bis Niedrige Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung T-1 Einfache Installation Neues Fridgely-System wird aufgebaut Die Software kann durch ein einfaches Installationsskript in weniger als 10 Minuten installiert werden. Mittel ADR-8 T-2 Systemupgrade Neue Version des Betriebssystems wird installiert Das System funktioniert weiterhin ohne Anpassung am Code. Niedrig ADR-5 T-3 Hardwarekompatibilit\u00e4t Austausch des Barcode-Scanners gegen ein neueres Modell Das System erkennt das neue Ger\u00e4t automatisch und funktioniert ohne Code\u00e4nderungen. Niedrig ADR-6"},{"location":"SAD/10_quality_requirements/#sicherheit-security-niedrige-prioritat","title":"Sicherheit (Security) - Niedrige Priorit\u00e4t","text":"ID Szenario Ausl\u00f6ser Metrik/Reaktion Priorit\u00e4t Verweis auf Architekturentscheidung S-1 Datenschutz Pers\u00f6nliche Daten werden im System verarbeitet Keine dauerhafte Speicherung personenbezogener Daten; lokale Begrenzung der Datenerfassung auf das Ger\u00e4t. Niedrig ADR-5 S-2 SSH-Zugriffssicherheit Fernwartung \u00fcber SSH Zugriff nur mit sicheren Schl\u00fcsseln m\u00f6glich, keine Passwortauthentifizierung erlaubt. Niedrig Systemkonfiguration"},{"location":"SAD/10_quality_requirements/#konkrete-nutzungsszenarien","title":"Konkrete Nutzungsszenarien","text":"<p>Diese detaillierten Szenarien beschreiben typische Nutzungsf\u00e4lle und zeigen, wie die verschiedenen Qualit\u00e4tsaspekte bei der Anwendung zusammenwirken.</p>"},{"location":"SAD/10_quality_requirements/#nutzungsszenario-1-erstmalige-benutzung-durch-ein-kind","title":"Nutzungsszenario 1: Erstmalige Benutzung durch ein Kind","text":"<p>Kontext: Ein 8-j\u00e4hriges Kind (Erstnutzer) steht vor dem Fridgely-System.</p> <p>Ausl\u00f6ser: Das Kind schaltet das System ein und sieht den Begr\u00fcssungsbildschirm.</p> <p>Qualit\u00e4tsanforderungen: - Benutzbarkeit (U-1, U-3, U-5) - Performance (P-1, P-2)</p> <p>Szenarioablauf: 1. Das System startet in unter 15 Sekunden. 2. Das Pinguin-Maskottchen begr\u00fcsst das Kind mit einer kurzen Animation und einem Text in kindgerechter Sprache. 3. Das Kind tippt intuitiv auf \"Starten\" und w\u00e4hlt den Einzelspieler-Modus. 4. Das System reagiert sofort auf jede Interaktion (unter 100ms). 5. Eine kurze, verst\u00e4ndliche Einf\u00fchrung erkl\u00e4rt dem Kind, wie es den Barcode-Scanner benutzen kann. 6. Das Kind scannt erfolgreich ein erstes Produkt und erh\u00e4lt positives Feedback vom System. 7. Die gesamte Interaktion vom Einschalten bis zum ersten erfolgreichen Scan dauert weniger als 5 Minuten.</p>"},{"location":"SAD/10_quality_requirements/#nutzungsszenario-2-fehlerfall-beim-spielen","title":"Nutzungsszenario 2: Fehlerfall beim Spielen","text":"<p>Kontext: Zwei Kinder spielen den Mehrspieler-Modus auf dem Fridgely-System.</p> <p>Ausl\u00f6ser: Der Barcode-Scanner von Spieler 2 funktioniert w\u00e4hrend des Spiels nicht mehr.</p> <p>Qualit\u00e4tsanforderungen: - Zuverl\u00e4ssigkeit (R-2, R-4) - Benutzbarkeit (U-4)</p> <p>Szenarioablauf: 1. Das System erkennt den Ausfall des Scanners innerhalb von 2 Sekunden. 2. Das Pinguin-Maskottchen erscheint und erkl\u00e4rt kindgerecht: \"Oh nein, der Scanner macht gerade eine Pause!\" 3. Das System bietet automatisch eine Alternative: \"Ihr k\u00f6nnt die Produkte auch \u00fcber die Tasten eingeben.\" 4. Die Kinder k\u00f6nnen das Spiel ohne technisches Verst\u00e4ndnis fortsetzen. 5. Im Hintergrund protokolliert das System den Fehler f\u00fcr die sp\u00e4tere Diagnose durch Wartungspersonal.</p>"},{"location":"SAD/10_quality_requirements/#nutzungsszenario-3-wartung-und-update","title":"Nutzungsszenario 3: Wartung und Update","text":"<p>Kontext: Ein Entwickler muss neue Produkte hinzuf\u00fcgen und eine neue Sprache integrieren.</p> <p>Ausl\u00f6ser: Schulungseinsatz in einer franz\u00f6sischsprachigen Region mit neuen lokalen Produkten.</p> <p>Qualit\u00e4tsanforderungen: - Wartbarkeit (M-1, M-3) - \u00dcbertragbarkeit (T-1)</p> <p>Szenarioablauf: 1. Der Entwickler verbindet sich per SSH mit dem Fridgely-System. 2. Neue Produktdaten werden \u00fcber SQL-Skripte der SQLite-Datenbank hinzugef\u00fcgt (30 Minuten). 3. Franz\u00f6sische \u00dcbersetzungen werden als neue Properties-Datei im Lokalisierungsverzeichnis abgelegt (90 Minuten). 4. Nach einem Neustart der Anwendung sind alle neuen Produkte verf\u00fcgbar. 5. Die franz\u00f6sische Sprache erscheint als neue Option im Sprachauswahlmen\u00fc. 6. Alle UI-Elemente werden korrekt in Franz\u00f6sisch angezeigt, wenn diese Sprache gew\u00e4hlt wird.</p>"},{"location":"SAD/10_quality_requirements/#priorisierung-und-qualitatskonflikte","title":"Priorisierung und Qualit\u00e4tskonflikte","text":"<p>Bei einigen Qualit\u00e4tsanforderungen k\u00f6nnen Zielkonflikte auftreten, die abgewogen werden m\u00fcssen:</p> Konflikt Bevorzugte Qualit\u00e4t Begr\u00fcndung Performance vs. Wartbarkeit Wartbarkeit F\u00fcr ein Bildungssystem ist langfristige Anpassbarkeit und Erweiterbarkeit wichtiger als maximale Performance. Die gew\u00e4hlte Hardware ist ausreichend leistungsstark. Funktionsumfang vs. Benutzbarkeit Benutzbarkeit F\u00fcr die junge Zielgruppe ist eine intuitive, klare Bedienung wichtiger als ein grosser Funktionsumfang. Robustheit vs. Ressourcenverbrauch Robustheit Die Stabilit\u00e4t des Systems, besonders bei intensiver Nutzung durch Kinder, hat Vorrang gegen\u00fcber optimalem Ressourcenverbrauch. <p>Die hier dokumentierten Qualit\u00e4tsanforderungen bilden die Grundlage f\u00fcr kontinuierliche Evaluation und Verbesserung des Fridgely-Systems und stellen sicher, dass sowohl die technischen als auch die p\u00e4dagogischen Ziele erreicht werden.</p>"},{"location":"SAD/10_quality_requirements/#validierung-und-messung-der-qualitatsanforderungen","title":"Validierung und Messung der Qualit\u00e4tsanforderungen","text":"<p>Um sicherzustellen, dass die Qualit\u00e4tsanforderungen nicht nur dokumentiert, sondern auch erf\u00fcllt werden, implementiert das Fridgely-System verschiedene Validierungs- und Messmechanismen:</p>"},{"location":"SAD/10_quality_requirements/#performance-messung","title":"Performance-Messung","text":"<p>F\u00fcr Performance-Anforderungen wie P-1 (Startzeit unter 15 Sekunden) und P-2 (Reaktionsgeschwindigkeit unter 100ms) implementiert das System:</p> <ul> <li>Startzeit-Logging: Die <code>Fridgely.java</code> Hauptklasse misst die Zeit vom Anwendungsstart bis zur vollst\u00e4ndigen Bereitschaft der UI</li> <li>UI-Reaktionszeit-Monitoring: Ein Event-Handling-System, das die Zeit zwischen Benutzeraktion und System-Reaktion misst</li> <li>Ressourcen-Monitoring: Regelm\u00e4ssige Erfassung von Speicher- und CPU-Nutzung w\u00e4hrend des Betriebs</li> </ul>"},{"location":"SAD/10_quality_requirements/#fehlerprotokollierung","title":"Fehlerprotokollierung","text":"<p>Das im Code sichtbare Logging-System (durch Logger.getLogger in Fridgely.java) implementiert die Anforderung M-4 (Fehlerdiagnose) durch:</p> <ul> <li>Strukturierte Logs: Verschiedene Log-Level (INFO, WARNING, SEVERE) f\u00fcr unterschiedliche Ereignistypen</li> <li>Kontextbezogene Informationen: Jeder Log enth\u00e4lt Informationen zur Ereignisquelle</li> <li>Persistente Speicherung: Logs werden so gespeichert, dass sie auch nach einem Neustart verf\u00fcgbar sind</li> </ul> <p>Diese Implementierungen erm\u00f6glichen es, die im Qualit\u00e4tsbaum und in den Qualit\u00e4tsszenarien definierten Anforderungen objektiv zu messen und nachzuweisen.</p>"},{"location":"SAD/11_technical_risks/","title":"11. Risiken und technische Schulden","text":"<p>Diese Sektion listet und bewertet die wichtigsten technischen Risiken und Schulden auf, die im Rahmen der Fridgely-Systementwicklung identifiziert wurden. Die Risiken und Schulden sind nach ihrer Priorit\u00e4t geordnet, mit entsprechenden Strategien zur Risikominimierung und zum Abbau technischer Schulden.</p>"},{"location":"SAD/11_technical_risks/#111-ubersicht-der-risiken-und-technischen-schulden","title":"11.1 \u00dcbersicht der Risiken und technischen Schulden","text":"<p>Die nachfolgende Tabelle bietet einen \u00dcberblick \u00fcber alle identifizierten Risiken und technischen Schulden, kategorisiert nach Bereich und mit Angabe der Priorit\u00e4t.</p> ID Kategorie Beschreibung Priorit\u00e4t Risikobewertung R-01 Hardware/Performance Ressourcenlimitierung auf dem Raspberry Pi Hoch Wahrscheinlichkeit: MittelAuswirkung: Hoch R-02 UI/Benutzbarkeit Eingeschr\u00e4nkte UI-M\u00f6glichkeiten durch Swing Mittel Wahrscheinlichkeit: HochAuswirkung: Mittel R-03 Datenbank Skalierungslimitierung durch SQLite Niedrig Wahrscheinlichkeit: NiedrigAuswirkung: Mittel R-04 Hardware Abh\u00e4ngigkeit von spezifischen Display-Aufl\u00f6sungen Hoch Wahrscheinlichkeit: HochAuswirkung: Hoch R-05 Betrieb Backup- und Recovery-Problematik Mittel Wahrscheinlichkeit: NiedrigAuswirkung: Hoch R-06 Architektur Wartbarkeit der Observer-Pattern Implementierung Mittel Wahrscheinlichkeit: MittelAuswirkung: Mittel R-07 Deployment Komplexit\u00e4t des Deployment-Prozesses Mittel Wahrscheinlichkeit: MittelAuswirkung: Mittel R-08 Technische Schuld Unvollst\u00e4ndige Testabdeckung Hoch Wahrscheinlichkeit: HochAuswirkung: Hoch R-09 Technische Schuld Hardcodierte Konfigurationswerte Niedrig Wahrscheinlichkeit: HochAuswirkung: Niedrig R-10 Architektur Abh\u00e4ngigkeit von JPA und Hibernate auf ressourcenbeschr\u00e4nkter Hardware Mittel Wahrscheinlichkeit: MittelAuswirkung: Mittel R-11 Implementation Fest codierte Display-Identifikation (600x1024 und 1080x1920) Hoch Wahrscheinlichkeit: HochAuswirkung: Hoch R-12 Implementation Unzureichende Fehlerbehandlung und Logging Mittel Wahrscheinlichkeit: MittelAuswirkung: Mittel"},{"location":"SAD/11_technical_risks/#112-detaillierte-risikobewertung-und-massnahmen","title":"11.2 Detaillierte Risikobewertung und Massnahmen","text":""},{"location":"SAD/11_technical_risks/#1121-hardwareperformance-risiken","title":"11.2.1 Hardware/Performance-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-01-ressourcenlimitierung-auf-dem-raspberry-pi","title":"R-01: Ressourcenlimitierung auf dem Raspberry Pi","text":"<p>Beschreibung: Das Fridgely-System l\u00e4uft auf einem Raspberry Pi 5 mit begrenzten Ressourcen (RAM, CPU). Bei steigender Komplexit\u00e4t der Anwendung oder bei gleichzeitiger Nutzung mehrerer Funktionen k\u00f6nnte es zu Performance-Engp\u00e4ssen kommen.</p> <p>Auswirkungen:</p> <ul> <li>Verz\u00f6gerungen in der Benutzeroberfl\u00e4che</li> <li>Eingeschr\u00e4nkte Benutzererfahrung, besonders f\u00fcr Kinder, die sofortige Reaktionen erwarten</li> <li>Im schlimmsten Fall System-Timeouts oder Abst\u00fcrze</li> </ul> <p>Gegenmassnahmen:</p> <pre><code>flowchart TD\n    R[Ressourcenrisiko]\n\n    R --&gt; M1[Ressourcenoptimierung]\n    R --&gt; M2[Performance-Monitoring]\n    R --&gt; M3[Lastbegrenzung]\n\n    M1 --&gt; M11[Speichernutzung profilen]\n    M1 --&gt; M12[UI-Rendering optimieren]\n    M1 --&gt; M13[Image-Caching verbessern]\n\n    M2 --&gt; M21[Implementierung von Performance-Metriken]\n    M2 --&gt; M22[Automatische Warnungen bei Ressourcenknappheit]\n\n    M3 --&gt; M31[Begrenzung gleichzeitiger Operationen]\n    M3 --&gt; M32[Asynchrone Verarbeitung f\u00fcr Barcode-Scanning]\n\n    classDef riskStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class R riskStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M13,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: In Bearbeitung. Performance-Optimierungen wurden bereits umgesetzt, aber kontinuierliches Monitoring ist erforderlich.</p>"},{"location":"SAD/11_technical_risks/#1122-uibenutzbarkeit-risiken","title":"11.2.2 UI/Benutzbarkeit-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-02-eingeschrankte-ui-moglichkeiten-durch-swing","title":"R-02: Eingeschr\u00e4nkte UI-M\u00f6glichkeiten durch Swing","text":"<p>Beschreibung: Die Entscheidung f\u00fcr Java Swing als UI-Framework (statt JavaFX) war durch Performance-Gr\u00fcnde motiviert (ADR-1), f\u00fchrt aber zu Einschr\u00e4nkungen bei modernen UI-Funktionen und Animationen.</p> <p>Auswirkungen:</p> <ul> <li>Weniger attraktive Benutzeroberfl\u00e4che im Vergleich zu moderneren Frameworks</li> <li>Eingeschr\u00e4nkte Animationsm\u00f6glichkeiten, die f\u00fcr die Zielgruppe (Kinder) wichtig sein k\u00f6nnten</li> <li>H\u00f6herer Entwicklungsaufwand f\u00fcr spezielle UI-Effekte</li> </ul> <p>Gegenmassnahmen:</p> <pre><code>flowchart LR\n    R[UI-Einschr\u00e4nkungen]\n\n    R --&gt; M1[Custom Swing-Erweiterungen]\n    R --&gt; M2[Ressourcenoptimierte Animationen]\n    R --&gt; M3[Hybridansatz f\u00fcr kritische UI-Elemente]\n\n    M1 --&gt; M11[Eigene erweiterte UI-Komponenten]\n    M1 --&gt; M12[Verbesserte Renderingpipeline]\n\n    M2 --&gt; M21[Sprite-basierte Animationen]\n    M2 --&gt; M22[Vorberechnete Animationssequenzen]\n\n    M3 --&gt; M31[Pr\u00fcfung auf JavaFX f\u00fcr isolierte Komponenten]\n    M3 --&gt; M32[Experimentelles UI-Layer als Option]\n\n    classDef riskStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class R riskStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: Akzeptiertes Risiko. Die UI wurde f\u00fcr die aktuelle Zielplattform optimiert, aber zuk\u00fcnftige Versionen k\u00f6nnten alternative UI-Frameworks evaluieren.</p>"},{"location":"SAD/11_technical_risks/#1123-datenbank-risiken","title":"11.2.3 Datenbank-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-03-skalierungslimitierung-durch-sqlite","title":"R-03: Skalierungslimitierung durch SQLite","text":"<p>Beschreibung: Die Verwendung von SQLite als eingebettete Datenbank (ADR-5) bietet Vorteile hinsichtlich Einfachheit und Ressourceneffizienz, k\u00f6nnte aber bei wachsender Datenmenge oder erh\u00f6hter Anzahl gleichzeitiger Zugriffe an Grenzen stossen.</p> <p>Auswirkungen:</p> <ul> <li>M\u00f6gliche Performance-Einbussen bei grossen Datenmengen</li> <li>Eingeschr\u00e4nkte Parallelzugriffsm\u00f6glichkeiten</li> <li>Komplexere Datenmigration bei zuk\u00fcnftigem Datenbankwechsel</li> </ul> <p>Gegenmassnahmen:</p> Massnahme Beschreibung Priorit\u00e4t DB-Zugriffsoptimierung Optimierung von Queries, Indexierung kritischer Felder Hoch Datenarchivierung Implementierung einer Strategie zur Archivierung \u00e4lterer Daten Niedrig Abstraktionsschicht St\u00e4rkere Isolation der Datenbankzugriffe durch Repository-Pattern Mittel Vorbereitete Migration Dokumentation von Migrationspfaden zu alternativen Datenbanksystemen Niedrig <p>Status: \u00dcberwachtes Risiko. Aktuelle Datenvolumina sind unkritisch, regelm\u00e4ssige \u00dcberpr\u00fcfung der Performance-Indikatoren ist geplant. Repository-Pattern ist implementiert und bietet eine gute Abstraktionsschicht f\u00fcr m\u00f6gliche zuk\u00fcnftige Datenbankmigrationen.</p>"},{"location":"SAD/11_technical_risks/#1124-hardware-risiken","title":"11.2.4 Hardware-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-04-abhangigkeit-von-spezifischen-display-auflosungen","title":"R-04: Abh\u00e4ngigkeit von spezifischen Display-Aufl\u00f6sungen","text":"<p>Beschreibung: Das Dual-Display-Management (ADR-6) identifiziert Displays anhand fester Aufl\u00f6sungswerte (1024x600 f\u00fcr Hauptdisplay, 1080x1920 f\u00fcr K\u00fchlschrankdisplay). Dies k\u00f6nnte zu Problemen f\u00fchren, wenn andere Displays verwendet werden.</p> <p>Auswirkungen:</p> <ul> <li>Eingeschr\u00e4nkte Hardware-Kompatibilit\u00e4t</li> <li>Potenzielle Fehler bei der Displayerkennung</li> <li>Schwierigkeiten bei der Installation in anderen Umgebungen</li> </ul> <p>Gegenmassnahmen:</p> <pre><code>flowchart TD\n    R[Display-Abh\u00e4ngigkeit]\n\n    R --&gt; M1[Flexiblere Displayerkennung]\n    R --&gt; M2[Konfigurierbare Displayzuweisung]\n    R --&gt; M3[UI-Skalierung]\n\n    M1 --&gt; M11[Erkennung \u00fcber relative Gr\u00f6ssenverh\u00e4ltnisse]\n    M1 --&gt; M12[Erkennung \u00fcber Display-IDs]\n\n    M2 --&gt; M21[Externe Konfigurationsdatei]\n    M2 --&gt; M22[UI zur Display-Auswahl]\n\n    M3 --&gt; M31[Responsive Layouts]\n    M3 --&gt; M32[Dynamische Anpassung an Aufl\u00f6sung]\n\n    classDef riskStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class R riskStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: Hohe Priorit\u00e4t. Eine \u00fcberarbeitete Implementierung der Displayerkennung ist in Planung.</p>"},{"location":"SAD/11_technical_risks/#1125-betriebs-risiken","title":"11.2.5 Betriebs-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-05-backup-und-recovery-problematik","title":"R-05: Backup- und Recovery-Problematik","text":"<p>Beschreibung: Obwohl SQLite als filebasierte Datenbank einfach zu sichern ist, fehlt eine automatisierte Backup- und Recovery-Strategie f\u00fcr das Gesamtsystem.</p> <p>Auswirkungen:</p> <ul> <li>M\u00f6glicher Datenverlust bei Hardware-Defekten</li> <li>Aufw\u00e4ndige manuelle Wiederherstellung</li> <li>Potenziell inkonsistente Daten nach Wiederherstellung</li> </ul> <p>Gegenmassnahmen:</p> Massnahme Beschreibung Priorit\u00e4t Automatische Backups Implementierung von regelm\u00e4ssigen Datenbank-Backups Hoch Cloud-Synchronisation Optional: Synchronisation wichtiger Daten mit Cloud-Storage Niedrig Wiederherstellungsprozedur Dokumentierte und getestete Recovery-Prozeduren Mittel Zustandssicherung Regelm\u00e4ssige Speicherung des Systemzustands Mittel <p>Status: In Planung. Konzeptionelle Arbeit f\u00fcr eine Backup-L\u00f6sung hat begonnen.</p>"},{"location":"SAD/11_technical_risks/#1126-architektur-risiken","title":"11.2.6 Architektur-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-06-wartbarkeit-der-observer-pattern-implementierung","title":"R-06: Wartbarkeit der Observer-Pattern Implementierung","text":"<p>Beschreibung: Das System verwendet das Observer-Pattern (\u00fcber PropertyChangeSupport/Listener) f\u00fcr Modell-Aktualisierungen, wie in der <code>PenguinModel</code>-Klasse implementiert. Die Code-Analyse best\u00e4tigt, dass die Anwendung PropertyChangeSupport f\u00fcr die Aktualisierung von UI-Komponenten bei Modell\u00e4nderungen verwendet. Bei steigender Komplexit\u00e4t k\u00f6nnte dies zu schwer nachvollziehbaren Abh\u00e4ngigkeiten f\u00fchren.</p> <p>Auswirkungen:</p> <ul> <li>Schwierigkeiten bei der Fehlersuche</li> <li>Potenzielle Memory-Leaks durch nicht entfernte Listener</li> <li>M\u00f6gliche Race-Conditions bei Aktualisierungen</li> </ul> <p>Gegenmassnahmen:</p> <pre><code>flowchart LR\n    R[Observer-Pattern-Wartbarkeit]\n\n    R --&gt; M1[Kodierstandards]\n    R --&gt; M2[Memory-Management]\n    R --&gt; M3[\u00dcberwachung]\n\n    M1 --&gt; M11[Einheitliche Observer-Implementierung]\n    M1 --&gt; M12[Klare Dokumentation der Listener-Beziehungen]\n\n    M2 --&gt; M21[Systematisches Entfernen von Listenern]\n    M2 --&gt; M22[Weak References f\u00fcr langlebige Beziehungen]\n\n    M3 --&gt; M31[Monitoring-Tools f\u00fcr Speicherlecks]\n    M3 --&gt; M32[Zentrale Registrierung aktiver Listener]\n\n    classDef riskStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class R riskStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: In Beobachtung. Aktuell keine kritischen Probleme, aber die konsequente Implementierung von <code>removePropertyChangeListener()</code> bei der Komponentenzerst\u00f6rung sollte \u00fcberpr\u00fcft werden.</p>"},{"location":"SAD/11_technical_risks/#1127-deployment-risiken","title":"11.2.7 Deployment-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-07-komplexitat-des-deployment-prozesses","title":"R-07: Komplexit\u00e4t des Deployment-Prozesses","text":"<p>Beschreibung: Der Deployment-Prozess f\u00fcr das Fridgely-System auf einem Raspberry Pi erfordert mehrere manuelle Schritte und ist anf\u00e4llig f\u00fcr Fehler. In der Code-Analyse konnten keine automatisierten Deployment-Skripte gefunden werden.</p> <p>Auswirkungen:</p> <ul> <li>Erh\u00f6hter Zeitaufwand bei Updates</li> <li>M\u00f6gliche Inkonsistenzen zwischen Entwicklungs- und Produktionsumgebung</li> <li>Erschwertes Troubleshooting bei Deployment-Problemen</li> </ul> <p>Gegenmassnahmen:</p> Massnahme Beschreibung Priorit\u00e4t Automatisiertes Deployment Entwicklung von Shell-Skripten f\u00fcr den gesamten Deployment-Prozess Hoch Deployment-Dokumentation Erstellung einer detaillierten Schritt-f\u00fcr-Schritt-Anleitung Hoch Container-Evaluation Pr\u00fcfung von Container-Technologien f\u00fcr den Raspberry Pi Niedrig CI/CD-Pipeline Implementierung einer kontinuierlichen Integration und Deployment \u00fcber Git Mittel <p>Status: Hohe Priorit\u00e4t. Es ist dringend erforderlich, automatisierte Deployment-L\u00f6sungen zu entwickeln, da die manuelle Installation auf dem Raspberry Pi mit speziellen Hardware-Anforderungen (Dual-Display) das Risiko von fehlerhaften Installationen erheblich erh\u00f6ht.</p>"},{"location":"SAD/11_technical_risks/#1128-implementation-risiken","title":"11.2.8 Implementation-Risiken","text":""},{"location":"SAD/11_technical_risks/#r-11-fest-codierte-display-identifikation","title":"R-11: Fest codierte Display-Identifikation","text":"<p>Beschreibung: Die aktuelle Display-Erkennung in der <code>Fridgely.java</code> Klasse verwendet fest codierte Aufl\u00f6sungswerte (<code>bounds.width == 600 &amp;&amp; bounds.height == 1024</code> und <code>bounds.width == 1080 &amp;&amp; bounds.height == 1920</code>) zur Identifikation der Displays, was die Flexibilit\u00e4t des Systems stark einschr\u00e4nkt. Die Code-Analyse hat folgende spezifische Implementierung best\u00e4tigt:</p> <pre><code>if (bounds.width == 600 &amp;&amp; bounds.height == 1024) {\n    mainAppScreen = screen;\n    LOGGER.info(\"Identified main app screen (1024x600): \" + screen.getIDstring());\n} else if (bounds.width == 1080 &amp;&amp; bounds.height == 1920) {\n    scannedItemsScreen = screen;\n    LOGGER.info(\"Identified scanned items screen (1920x1080): \" + screen.getIDstring());\n}\n</code></pre> <p>Diese Implementierung macht das System sehr abh\u00e4ngig von spezifischen Display-Konfigurationen.</p> <p>Auswirkungen:</p> <ul> <li>Sehr spezifische Hardware-Abh\u00e4ngigkeit</li> <li>Funktioniert nicht mit leicht abweichenden Display-Konfigurationen</li> <li>Fehleranf\u00e4llig bei Ger\u00e4tetreiber-Updates, die Aufl\u00f6sungen anders melden</li> <li>Einschr\u00e4nkung bei der Auswahl alternativer Displays</li> </ul> <p>Gegenmassnahmen:</p> <pre><code>flowchart TD\n    R[Risiko: Fest codierte Display-Identifikation]\n\n    R --&gt; M1[Konfigurierbare Display-Erkennung]\n    R --&gt; M2[Intelligentere Erkennungslogik]\n    R --&gt; M3[UI-Anpassungsf\u00e4higkeit]\n\n    M1 --&gt; M11[Externalisierte Konfiguration]\n    M1 --&gt; M12[Admin-UI f\u00fcr Display-Konfiguration]\n\n    M2 --&gt; M21[Aspektverh\u00e4ltnis statt fester Aufl\u00f6sung]\n    M2 --&gt; M22[Display-Name/ID als Alternative]\n\n    M3 --&gt; M31[Responsive Layouts f\u00fcr alle Komponenten]\n    M3 --&gt; M32[Automatische Skalierung]\n\n    classDef riskStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class R riskStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: Hohe Priorit\u00e4t. Die Code-Analyse zeigt eine direkte Abh\u00e4ngigkeit von spezifischen Aufl\u00f6sungswerten ohne Konfigurationsm\u00f6glichkeit. Eine \u00fcberarbeitete Implementierung mit relativer Display-Erkennung ist dringend erforderlich.</p>"},{"location":"SAD/11_technical_risks/#113-technische-schulden","title":"11.3 Technische Schulden","text":""},{"location":"SAD/11_technical_risks/#1131-unvollstandige-testabdeckung-r-08","title":"11.3.1 Unvollst\u00e4ndige Testabdeckung (R-08)","text":"<p>Beschreibung: Die Code-Analyse best\u00e4tigt, dass die aktuelle Testabdeckung unzureichend ist, da keine dedizierten Testklassen im Projekt identifiziert werden konnten. Eine systematische Suche nach \"*/Test.java\" im Quellcode-Verzeichnis ergab keine Treffer. Dies betrifft insbesondere kritische Komponenten wie die UI, Barcode-Scanner-Integration und das Dual-Display-Management.</p> <p>Auswirkungen:</p> <ul> <li>Erh\u00f6htes Risiko f\u00fcr unentdeckte Fehler</li> <li>Erschwertes Refactoring</li> <li>H\u00f6herer Aufwand bei der Qualit\u00e4tssicherung</li> <li>M\u00f6gliche Regressionsfehler bei \u00c4nderungen am Code</li> </ul> <p>Massnahmen zum Schuldenabbau:</p> <pre><code>graph TD\n    TS[Technische Schuld: Testabdeckung]\n\n    TS --&gt; M1[Test-Strategie]\n    TS --&gt; M2[Test-Infrastruktur]\n    TS --&gt; M3[Kontinuierliche \u00dcberwachung]\n\n    M1 --&gt; M11[Priorisierung kritischer Komponenten]\n    M1 --&gt; M12[Definition von Testzielen pro Komponente]\n\n    M2 --&gt; M21[Mock-Objekte f\u00fcr Hardware-Komponenten]\n    M2 --&gt; M22[UI-Testautomatisierung]\n\n    M3 --&gt; M31[Test-Coverage-Reporting]\n    M3 --&gt; M32[Integration in CI/CD-Pipeline]\n\n    classDef debtStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class TS debtStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: Hohe Priorit\u00e4t. Die Einf\u00fchrung einer strukturierten Teststrategie mit automatisierten Unit- und Integrationstests sollte als eine der dringlichsten Massnahmen betrachtet werden. Der Testplan sollte ein ausgewogenes Verh\u00e4ltnis zwischen manuellen und automatisierten Tests vorsehen, mit Fokus auf kritische Pfade wie Barcode-Scanning und Dual-Display-Interaktionen.</p>"},{"location":"SAD/11_technical_risks/#1132-hardcodierte-konfigurationswerte-r-09","title":"11.3.2 Hardcodierte Konfigurationswerte (R-09)","text":"<p>Beschreibung: Im aktuellen Codebase finden sich an verschiedenen Stellen hardcodierte Konfigurationswerte, die in externe Konfigurationsdateien ausgelagert werden sollten. Die Code-Analyse hat folgende konkreten Beispiele identifiziert:</p> <ol> <li>Display-Aufl\u00f6sungswerte in <code>Fridgely.java</code> (600x1024 und 1080x1920)</li> <li>UI-Farbwerte in <code>Constants.java</code> (z.B. <code>BACKGROUND_COLOR = new Color(248, 248, 255)</code>)</li> <li>Spielparameter in <code>GameConfig.java</code> (z.B. <code>DEFAULT_ROUNDS = 3</code>, <code>MIN_PRODUCTS_PER_ROUND = 3</code>, <code>STARTING_HP = 30</code>)</li> </ol> <p>Diese Werte sind direkt im Code definiert und k\u00f6nnen nicht ohne Code-\u00c4nderung und Neukompilierung angepasst werden.</p> <p>Auswirkungen:</p> <ul> <li>Erschwertes Anpassen von Konfigurationen</li> <li>Notwendigkeit von Code-\u00c4nderungen und Neukompilierung f\u00fcr einfache Anpassungen</li> <li>Potenzielle Inkonsistenzen bei unvollst\u00e4ndiger Aktualisierung</li> <li>H\u00f6herer Aufwand bei der Anpassung an verschiedene Installationsumgebungen</li> </ul> <p>Massnahmen zum Schuldenabbau:</p> Massnahme Beschreibung Priorit\u00e4t Konfigurationsanalyse Identifikation aller hardcodierten Werte Hoch Zentralisierte Konfiguration Einf\u00fchrung einer einheitlichen Konfigurationsverwaltung Mittel Externalisierung Auslagerung in Properties-Dateien oder YAML-Konfigurationen Mittel Hot-Reload M\u00f6glichkeit zur Konfigurations\u00e4nderung ohne Neustart Niedrig <p>Status: Geplant. Die Identifikation hardcodierter Werte hat begonnen.</p>"},{"location":"SAD/11_technical_risks/#1133-abhangigkeit-von-jpa-und-hibernate-r-10","title":"11.3.3 Abh\u00e4ngigkeit von JPA und Hibernate (R-10)","text":"<p>Beschreibung: Die Code-Analyse best\u00e4tigt die Verwendung von JPA und Hibernate f\u00fcr die Datenbankabstraktion, wie in den Entity-Klassen (z.B. <code>Product.java</code> mit <code>@Entity</code> und <code>@Id</code> Annotationen) zu sehen ist. Diese Technologie bietet zwar Vorteile wie typsichere Abfragen und ein einheitliches Datenzugriffsmodell, k\u00f6nnte aber einen erheblichen Overhead auf dem ressourcenbeschr\u00e4nkten Raspberry Pi verursachen. Insbesondere zeigt die Code-Analyse in <code>Product.java</code> und anderen Modellklassen, dass JPA-Annotationen verwendet werden, ohne dass spezifische Performance-Optimierungen f\u00fcr die ressourcenbeschr\u00e4nkte Umgebung erkennbar sind.</p> <p>Auswirkungen:</p> <ul> <li>H\u00f6herer Speicherverbrauch, insbesondere beim Start der Anwendung</li> <li>L\u00e4ngere Startup-Zeit der Anwendung durch Hibernate-Initialisierung</li> <li>Potenziell komplexes Fehlerverhalten bei ORM-Problemen</li> </ul> <p>Massnahmen zum Schuldenabbau:</p> <pre><code>flowchart TD\n    TS[Technische Schuld: JPA/Hibernate]\n\n    TS --&gt; M1[Kurzfristige Optimierung]\n    TS --&gt; M2[Mittelfristige Alternative]\n    TS --&gt; M3[Langfristige Strategie]\n\n    M1 --&gt; M11[Optimierung der JPA-Konfiguration]\n    M1 --&gt; M12[Reduzierung Lazy-Loading]\n\n    M2 --&gt; M21[Evaluation leichtgewichtigerer ORM-L\u00f6sungen]\n    M2 --&gt; M22[Teilweise Migration kritischer Komponenten]\n\n    M3 --&gt; M31[Modulare Repository-Implementierungen]\n    M3 --&gt; M32[Strategie zur vollst\u00e4ndigen Migration]\n\n    classDef debtStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class TS debtStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: Mittlere Priorit\u00e4t. Es ist notwendig, die JPA-Konfiguration zu \u00fcberpr\u00fcfen und zu optimieren, oder eine Evaluierung leichtgewichtigerer Alternativen wie JDBC Template oder JDBI in Betracht zu ziehen. Die potenzielle Kombination von ORM-Overhead und ressourcenbeschr\u00e4nkter Hardware (Raspberry Pi) bleibt ein signifikantes Risiko f\u00fcr die Anwendungsperformance.</p>"},{"location":"SAD/11_technical_risks/#1134-fehlender-backup-mechanismus-erweiterung-von-r-05","title":"11.3.4 Fehlender Backup-Mechanismus (Erweiterung von R-05)","text":"<p>Beschreibung: Die Code-Analyse zeigt, dass derzeit kein automatisierter Backup-Mechanismus f\u00fcr die SQLite-Datenbank implementiert ist. Obwohl die filebasierte Natur von SQLite manuelle Backups durch Dateikopien erm\u00f6glicht, fehlt eine integrierte L\u00f6sung im Anwendungscode. Es wurden keine dedizierten Backup- oder Recovery-Klassen oder -Methoden im Quellcode identifiziert.</p> <p>Auswirkungen:</p> <ul> <li>Erh\u00f6htes Risiko von Datenverlust bei unerwarteten Systemausf\u00e4llen</li> <li>Keine M\u00f6glichkeit zur automatischen Wiederherstellung nach Fehlern</li> <li>Fehlende Versionierung und Historisierung von Daten</li> <li>Komplexe manuelle Eingriffe erforderlich bei Datenkorruption</li> </ul> <p>Massnahmen zum Schuldenabbau:</p> Massnahme Beschreibung Priorit\u00e4t Backup-Service Implementation eines Backup-Services mit zeitgesteuerter Ausf\u00fchrung Hoch Integriertes Wiederherstellungstool Entwicklung einer UI zur Auswahl und Wiederherstellung von Backups Mittel SQLite-Datenbank-Checkpointing Regelm\u00e4ssiges Checkpointing zur Vermeidung von Datenkorruption Hoch Exportfunktionalit\u00e4t M\u00f6glichkeit zum manuellen Export wichtiger Daten (z.B. Rezepte, eigene Produkte) Mittel Transaktionslogging Erweiterung um Write-Ahead-Logging f\u00fcr Point-in-Time-Recovery Niedrig Export/Import-Funktionalit\u00e4t Implementierung von Funktionen zum manuellen Backup/Restore durch den Benutzer Mittel <p>Status: Hohe Priorit\u00e4t. Die Code-Analyse best\u00e4tigt, dass keinerlei Backup-Funktionalit\u00e4t implementiert ist. Angesichts der Natur des Systems als Langzeit-Installationsger\u00e4t mit Benutzerdaten ist die Entwicklung von Backup- und Wiederherstellungsfunktionalit\u00e4t kritisch.</p>"},{"location":"SAD/11_technical_risks/#1135-unzureichende-fehlerbehandlung-und-logging-r-12","title":"11.3.5 Unzureichende Fehlerbehandlung und Logging (R-12)","text":"<p>Beschreibung: Die Code-Analyse zeigt, dass die aktuelle Implementierung eine Mischung aus verschiedenen Logging-Ans\u00e4tzen verwendet. Im <code>Fridgely.java</code> wird <code>java.util.logging.Logger</code> verwendet, wie in folgendem Codebeispiel zu sehen:</p> <pre><code>private static final Logger LOGGER = Logger.getLogger(Fridgely.class.getName());\n// ...\nLOGGER.info(\"Identified main app screen (1024x600): \" + screen.getIDstring());\n// ...\nLOGGER.warning(\"Target main app screen (1024x600) not found. Using default: \" + mainAppScreen.getIDstring());\n</code></pre> <p>Ausserdem sind die Fehlerbehandlungsstrategien nicht konsistent, und es gibt keine zentrale Erfassung oder Reporting von Anwendungsfehlern. Die Exception-Handling-Strategie ist h\u00e4ufig auf einfache Konsolen-Ausgaben beschr\u00e4nkt.</p> <p>Auswirkungen:</p> <ul> <li>Erschwerte Fehleranalyse bei Systemabst\u00fcrzen oder unerwarteten Verhaltensweisen</li> <li>Inkonsistente Logging-Informationen in verschiedenen Teilen der Anwendung</li> <li>Keine M\u00f6glichkeit zur proaktiven \u00dcberwachung des Systemzustands</li> <li>Potenzielle Sicherheitsl\u00fccken durch unbehandelte Ausnahmen</li> </ul> <p>Massnahmen zum Schuldenabbau:</p> <pre><code>flowchart TD\n    TS[Technische Schuld: Fehlerbehandlung &amp; Logging]\n\n    TS --&gt; M1[Vereinheitlichung des Loggings]\n    TS --&gt; M2[Robustere Fehlerbehandlung]\n    TS --&gt; M3[Monitoring-Infrastruktur]\n\n    M1 --&gt; M11[\"Migration zu einem einheitlichen Logger (SLF4J)\"]\n    M1 --&gt; M12[Konsistente Log-Level-Strategie]\n\n    M2 --&gt; M21[Zentrale Fehlerbehandlung implementieren]\n    M2 --&gt; M22[Graceful Degradation bei nicht-kritischen Fehlern]\n\n    M3 --&gt; M31[Logfile-Rotation und -Archivierung]\n    M3 --&gt; M32[Optionales Remote-Monitoring]\n\n    classDef debtStyle fill:#4d1f1c,stroke:#fb4934,stroke-width:2px;\n    classDef measureStyle fill:#1d2021,stroke:#83a598,stroke-width:1px;\n    classDef submeasureStyle fill:#282828,stroke:#b8bb26,stroke-width:1px;\n\n    class TS debtStyle;\n    class M1,M2,M3 measureStyle;\n    class M11,M12,M21,M22,M31,M32 submeasureStyle;</code></pre> <p>Status: Mittlere Priorit\u00e4t. Die Vereinheitlichung des Logging-Ansatzes sollte kurzfristig angegangen werden, w\u00e4hrend die Implementierung einer robusten Fehlerbehandlung und eines Monitoring-Systems mittelfristig erfolgen sollte.</p>"},{"location":"SAD/11_technical_risks/#114-risikobewertungsmatrix","title":"11.4 Risikobewertungsmatrix","text":"<p>Die folgende Matrix visualisiert die identifizierten Risiken nach Eintrittswahrscheinlichkeit und Auswirkung:</p> <pre><code>%%{init: {\n  \"theme\": \"base\",\n  \"themeVariables\": {\n    \"darkMode\": true, \n    \"background\": \"transparent\",\n    \"quadrant1Fill\": \"#2E3440\",\n    \"quadrant2Fill\": \"#2E3440\",\n    \"quadrant3Fill\": \"#2E3440\",\n    \"quadrant4Fill\": \"#2E3440\",\n    \"quadrantXAxisTextFill\": \"#fff\",\n    \"quadrantYAxisTextFill\": \"#fff\",\n    \"quadrant1TextFill\": \"#fff\",\n    \"quadrant2TextFill\": \"#fff\",\n    \"quadrant3TextFill\": \"#fff\",\n    \"quadrant4TextFill\": \"#fff\",\n    \"quadrantPointTextFill\": \"#fff\",\n    \"quadrantPointFill\": \"#FF6347\",\n    \"quadrantInternalBorderStrokeFill\": \"#888\",\n    \"quadrantExternalBorderStrokeFill\": \"#888\"\n  }\n}}%%\nquadrantChart\n    title Risikobewertungsmatrix\n    x-axis Eintrittswahrscheinlichkeit --&gt; Niedrig Mittel Hoch\n    y-axis Auswirkung --&gt; Niedrig Mittel Hoch\n    quadrant-1 Kritische Risiken\n    quadrant-2 Mittlere Risiken\n    quadrant-3 Geringe Risiken\n    quadrant-4 Mittlere Risiken\n    \"R-01\": [0.55, 0.80] color: #FF6347, radius: 8\n    \"R-02\": [0.75, 0.50] color: #7CFC00, radius: 8\n    \"R-03\": [0.30, 0.50] color: #00FA9A, radius: 8\n    \"R-04\": [0.80, 0.85] color: #1E90FF, radius: 8\n    \"R-05\": [0.30, 0.75] color: #FFD700, radius: 8\n    \"R-06\": [0.50, 0.55] color: #FF69B4, radius: 8\n    \"R-07\": [0.45, 0.60] color: #20B2AA, radius: 8\n    \"R-08\": [0.70, 0.75] color: #FF4500, radius: 8\n    \"R-09\": [0.75, 0.30] color: #ADFF2F, radius: 8\n    \"R-10\": [0.60, 0.45] color: #8A2BE2, radius: 8\n    \"R-11\": [0.85, 0.80] color: #DC143C, radius: 8\n    \"R-12\": [0.50, 0.50] color: #4682B4, radius: 8</code></pre>"},{"location":"SAD/11_technical_risks/#115-fazit-und-ausblick","title":"11.5 Fazit und Ausblick","text":"<p>Die identifizierten Risiken und technischen Schulden im Fridgely-System sind typisch f\u00fcr ein innovatives Projekt, das Hardware- und Softwarekomponenten integriert und auf einer ressourcenbeschr\u00e4nkten Plattform l\u00e4uft. Die meisten Risiken sind mit angemessenen Gegenmassnahmen kontrollierbar.</p> <p>Besondere Aufmerksamkeit erfordern:</p> <ol> <li>Ressourcenlimitierung (R-01), Display-Abh\u00e4ngigkeit (R-04) und Fest codierte Display-Identifikation (R-11) aufgrund ihrer hohen Auswirkung und Wahrscheinlichkeit</li> <li>Unvollst\u00e4ndige Testabdeckung (R-08) als technische Schuld mit hohem Risikopotenzial</li> <li>Hardcodierte Konfigurationswerte (R-09) in verschiedenen Teilen des Codes, die externalisiert werden sollten</li> </ol> <p>Die Codeanalyse hat die in der Dokumentation beschriebenen Risiken best\u00e4tigt und konkrete Implementierungsdetails identifiziert, die diese Risiken untermauern. Die Verwendung von JPA/Hibernate auf ressourcenbeschr\u00e4nkter Hardware (R-10), die fest codierte Display-Identifikation (R-11) und die Verwendung des Observer-Patterns (R-06) wurden im Code best\u00e4tigt und entsprechend dokumentiert.</p> <p>Der vorgestellte Plan zum Risikomanagement und Abbau technischer Schulden sollte in Abstimmung mit dem Product Owner und den Stakeholdern kontinuierlich verfolgt und aktualisiert werden.</p> <p>Durch proaktive Adressierung dieser Risiken wird sichergestellt, dass das Fridgely-System als robuste, wartbare und benutzerfreundliche L\u00f6sung f\u00fcr seine p\u00e4dagogischen Ziele eingesetzt werden kann.</p>"},{"location":"SAD/12_glossary/","title":"12. Glossar","text":""},{"location":"SAD/12_glossary/#begriffe-und-definitionen","title":"Begriffe und Definitionen","text":"Begriff Definition ADR Architecture Decision Record, Dokumentationsformat f\u00fcr Architekturentscheidungen, das im SAD des Fridgely-Systems verwendet wird. AppConfig Konfigurationsklasse, die anwendungsspezifische Einstellungen wie die Sprache aus der app.properties-Datei l\u00e4dt und bereitstellt. AppLocalizationService Dienst, der die Mehrsprachigkeitsfunktionen der Anwendung verwaltet und die \u00dcbersetzungstexte f\u00fcr die aktuelle Sprache bereitstellt. Barcode-Scanner Hardwarekomponente, die zur automatischen Erfassung von Produkten durch Scannen ihrer Strichcodes verwendet wird. BaseController Abstrakte Basisklasse f\u00fcr alle Controller, die gemeinsame Funktionalit\u00e4ten und Strukturen definiert. Bio-Produkt Lebensmittelprodukt, das nach biologischen Richtlinien hergestellt wurde. Im Fridgely-Kontext erh\u00e4lt der Spieler f\u00fcr Bio-Produkte mehr Punkte. ChooseGameModeController Controller, der die Auswahl des Spielmodus verwaltet und den entsprechenden Spielmodus startet. ChooseGameModeView Benutzeroberfl\u00e4che zur Auswahl des Spielmodus (Einzelspieler oder Mehrspieler). Constants Klasse, die konstante Werte f\u00fcr die gesamte Anwendung definiert, einschliesslich Pfade, Dateinamen und andere unver\u00e4nderliche Werte. DataLoader Komponente, die f\u00fcr das initiale Laden von Daten aus SQL-Skripten in die Datenbank nach der Schemaerstellung durch Hibernate verantwortlich ist. Dual-Display Hardwarekonfiguration des Fridgely-Systems mit zwei Bildschirmen - ein Hauptdisplay f\u00fcr die Benutzeroberfl\u00e4che und ein zweites Display f\u00fcr die angezeigten gescannten Produkte. Einkaufsphase Phase im Spielablauf, in der die Benutzer (insbesondere Player 1 im Mehrspielermodus) Produkte scannen und einkaufen. Fridgely Name des gesamten Smart-Fridge-Systems, bestehend aus Hardware- und Softwarekomponenten zur spielerischen Sensibilisierung von Kindern f\u00fcr nachhaltigen Lebensmittelkonsum. FridgeStock Repr\u00e4sentation des aktuellen Bestands an Lebensmitteln im K\u00fchlschrank, gespeichert als Sammlung von Produkt-Barcodes. FridgeStockJpaRepository Interface zur Datenabfrage f\u00fcr FridgeStock-Entit\u00e4ten mittels Spring Data JPA. FridgeStockModel Modell, das den gesamten Inhalt des K\u00fchlschranks verwaltet und \u00c4nderungen an Beobachter kommuniziert. FridgeStockRepository Dienst zur Verwaltung des K\u00fchlschrankbestands, vermittelt zwischen Model und Datenbankzugriff. GameConfig Konfigurationsklasse, die spielbezogene Konstanten wie Rundenzahl, minimale Produktanzahl und HP-Werte definiert. GameMode Spielmodus des Fridgely-Systems, entweder Einzelspieler (SinglePlayer) oder Mehrspieler (Multiplayer). Gamifizierung Anwendung von spieltypischen Elementen und Spieldesign-Techniken im Kontext einer Lernanwendung, um Motivation und Engagement zu f\u00f6rdern. HP (Health Points) Gesundheitspunkte des Pinguins im Spiel, die sich je nach Umweltfreundlichkeit der gescannten Produkte ver\u00e4ndern. ImageLoader Hilfsprogramm zum Laden und Zwischenspeichern von Bildern f\u00fcr die Anwendung, um Leistung zu optimieren. Kochphase Phase im Spielablauf, in der die Benutzer (insbesondere Player 2 im Mehrspielermodus) Rezepte ausw\u00e4hlen und kochen. LanguageSwitchButton UI-Komponente, die dem Benutzer erm\u00f6glicht, zwischen den verf\u00fcgbaren Sprachen zu wechseln. LocalizationObserver Interface, das von Klassen implementiert wird, die auf Sprach\u00e4nderungen reagieren m\u00fcssen, um ihre Texte entsprechend anzupassen. Lokales Produkt Lebensmittelprodukt, das lokal produziert wurde. Im Fridgely-Kontext werden lokale Produkte als umweltfreundlicher bewertet. Maskottchen Pinguin-Charakter, der als visuelle Darstellung im Spiel dient und auf die Umweltauswirkungen der Lebensmittelentscheidungen reagiert. Mehrspielermodus Spielmodus, bei dem zwei Spieler kooperativ spielen - einer in der Rolle des Eink\u00e4ufers (Player 1) und einer in der Rolle des Kochs (Player 2). MultiplayerGameController Controller-Klasse, die den Spielablauf im Mehrspielermodus koordiniert und zwischen den Spielern vermittelt. MultiplayerGameLauncher Klasse, die den Mehrspielermodus initialisiert, die notwendigen Controller und Views erstellt und das Spiel startet. MultiplayerGameStateModel Modellklasse zur Verwaltung des Spielzustands im Mehrspielermodus, inkl. Rundenzahl, aktueller Spieler und Punktestand. MultiplayerGameView Hauptansicht f\u00fcr den Mehrspielermodus, die die \u00fcbergeordnete UI f\u00fcr beide Spieler enth\u00e4lt. MultiplayerPlayer1Controller Controller f\u00fcr Spieler 1 im Mehrspielermodus, der f\u00fcr die Einkaufsphase verantwortlich ist. MultiplayerPlayer1View Benutzeroberfl\u00e4che f\u00fcr Spieler 1 im Mehrspielermodus, die Funktionen zum Scannen und Ausw\u00e4hlen von Produkten anzeigt. MultiplayerPlayer2Controller Controller f\u00fcr Spieler 2 im Mehrspielermodus, der f\u00fcr die Kochphase verantwortlich ist. MultiplayerPlayer2View Benutzeroberfl\u00e4che f\u00fcr Spieler 2 im Mehrspielermodus, die Funktionen zur Auswahl und Zubereitung von Rezepten anzeigt. Nachhaltigkeit Konzept des verantwortungsvollen Umgangs mit Ressourcen, insbesondere im Zusammenhang mit Lebensmitteln, um Verschwendung zu reduzieren. PenguinFacialExpression Enumeration, die die verschiedenen Gesichtsausdr\u00fccke des Pinguin-Maskottchens je nach Spielzustand definiert. PenguinHPState Zustand des Pinguin-Maskottchens basierend auf den verbleibenden HP-Punkten, beeinflusst durch umweltfreundliche oder -sch\u00e4dliche Produktwahl. PenguinModel Modellklasse zur Verwaltung des Zustands des Pinguins, einschliesslich seiner Gesundheit und visuellen Darstellung. PenguinReactionOverlay Visuelle Komponente, die die Reaktion des Pinguins auf die Produkt- oder Rezeptauswahl des Spielers anzeigt. Player 1 Spieler im Mehrspielermodus, der f\u00fcr das Scannen von Produkten zust\u00e4ndig ist (auch \"Scanner\" genannt). Player 2 Spieler im Mehrspielermodus, der f\u00fcr die Auswahl und Zubereitung von Rezepten zust\u00e4ndig ist (auch \"Koch\" genannt). Produkt Einzelnes Lebensmittel im System, dargestellt durch einen Barcode und zus\u00e4tzliche Attribute wie Name, Beschreibung und Nachhaltigkeitseigenschaften. ProductJpaRepository Interface zur Datenabfrage f\u00fcr Product-Entit\u00e4ten mittels Spring Data JPA. ProductRepository Service-Klasse, die den Zugriff auf die Produktdaten verwaltet und die Abfrage von Produkten nach Barcodes erm\u00f6glicht. PropertyChangeListener Interface aus dem Java-Beans-Framework, das von Views implementiert wird, um \u00fcber \u00c4nderungen in Modellen informiert zu werden. PropertyChangeSupport Klasse aus dem Java-Beans-Framework, die von Modellen genutzt wird, um \u00c4nderungsbenachrichtigungen an registrierte Listener zu senden. Raspberry Pi Einplatinencomputer, auf dem die Fridgely-Software l\u00e4uft, steuert die Hardware und f\u00fchrt die Spiellogik aus. Rezept Anleitung zur Zubereitung einer Mahlzeit aus bestimmten Zutaten, im System gespeichert mit mehrsprachigen Namen und Beschreibungen. RecipeIngredient Darstellung einer Zutat innerhalb eines Rezepts, mit Angabe des erforderlichen Produkts und der Menge. RecipeIngredientJpaRepository Interface zur Datenabfrage f\u00fcr RecipeIngredient-Entit\u00e4ten mittels Spring Data JPA. RecipeJpaRepository Interface zur Datenabfrage f\u00fcr Recipe-Entit\u00e4ten mittels Spring Data JPA. RecipeModel Modellklasse zur Verwaltung und Filterung von Rezepten basierend auf verf\u00fcgbaren Zutaten im K\u00fchlschrank. RecipeRepository Service-Klasse, die den Zugriff auf die Rezeptdaten verwaltet, einschliesslich der zugeh\u00f6rigen Zutaten. ResourceLoader Spring-Komponente, die im Fridgely-System f\u00fcr den Zugriff auf Ressourcendateien wie Bilder und Lokalisierungsdateien verwendet wird. Runde Einzelner Spieldurchlauf im Mehrspielermodus, bestehend aus einer Einkaufs- und einer Kochphase. ScannedItemsView Ansicht, die auf dem zweiten Display die gescannten Produkte oder ausgew\u00e4hlten Rezepte anzeigt. SingleplayerController (Geplante Komponente) Controller f\u00fcr den Einzelspielermodus, der die Spiellogik f\u00fcr einen einzelnen Spieler verwalten soll. Aktuell nur als Platzhalter vorhanden. Smart-Fridge Intelligenter K\u00fchlschrank, der mithilfe von Sensoren und Software den Inhalt verwaltet und Benutzerinteraktionen erm\u00f6glicht. Spring Boot Framework, das f\u00fcr die Entwicklung des Fridgely-Systems verwendet wird, bietet Dependency Injection und vereinfacht die Konfiguration. SQLite Leichtgewichtige Datenbank, die zur lokalen Speicherung von Produkten, Rezepten und Spielst\u00e4nden verwendet wird. Swing Java-GUI-Toolkit, das f\u00fcr die Entwicklung der Benutzeroberfl\u00e4che des Fridgely-Systems verwendet wird. UnifiedRecipePanel UI-Komponente zur einheitlichen Anzeige von Rezeptinformationen, einschliesslich Name, Beschreibung und ben\u00f6tigter Zutaten. MVC-Pattern Architekturmuster (Model-View-Controller), das im Fridgely-System durchg\u00e4ngig implementiert ist, um eine klare Trennung von Daten (Models), Benutzeroberfl\u00e4che (Views) und Anwendungslogik (Controllers) zu gew\u00e4hrleisten. Repository-Pattern Entwurfsmuster, das im Fridgely-System verwendet wird, um die Datenzugriffsschicht zu abstrahieren und eine klare Trennung zwischen Gesch\u00e4ftslogik und Datenbankoperationen zu schaffen. Singleton-Pattern Entwurfsmuster f\u00fcr gemeinsam genutzte Ressourcen wie ImageLoader und AppLocalizationService, das sicherstellt, dass von diesen Klassen jeweils nur eine Instanz existiert. Observer-Pattern Entwurfsmuster, das im Fridgely-System mit Java-Beans PropertyChangeSupport und PropertyChangeListener implementiert ist, um UI-Komponenten \u00fcber \u00c4nderungen in den Modellen zu informieren. MultiplayerGameLauncher Klasse, die den Mehrspielermodus initialisiert, die notwendigen Controller und Views erstellt und das Spiel startet. JPA Java Persistence API, die im Fridgely-System f\u00fcr den Datenbankzugriff und die Abbildung von Java-Objekten auf Datenbankstrukturen verwendet wird. GameSession Modellklasse, die den aktuellen Spielzustand mit Spielmodus, Punktzahl und Zeitstempel verwaltet. Dependency Injection Entwurfsprinzip, das im Fridgely-System durch Spring Boot umgesetzt wird, um Abh\u00e4ngigkeiten zwischen Komponenten zu verwalten und lose Kopplung zu f\u00f6rdern. QueryDSL Java-Framework, das im Fridgely-System f\u00fcr typsichere SQL-Abfragen in Verbindung mit JPA verwendet wird. BaseView Abstrakte Oberklasse f\u00fcr alle Views, die gemeinsame Funktionalit\u00e4t wie Mehrsprachigkeit und UI-Initialisierung implementiert. CRUD-Operationen Create, Read, Update, Delete - grundlegende Datenbankoperationen, die durch die Repository-Klassen im Fridgely-System implementiert werden. FridgelyMainController Hauptcontroller der Anwendung, der die Initialisierung und Koordination der verschiedenen Anwendungskomponenten \u00fcbernimmt. GraphicsDevice Java AWT-Klasse, die im Fridgely-System f\u00fcr das Management der Dual-Display-Konfiguration verwendet wird. GraphicsConfiguration Java AWT-Klasse, die Informationen \u00fcber die Bildschirmkonfiguration bereitstellt und f\u00fcr das Dual-Display-Management verwendet wird. ISO 25010 Qualit\u00e4tsstandard f\u00fcr Software, der als Leitfaden f\u00fcr die Qualit\u00e4tsanforderungen des Fridgely-Systems dient."},{"location":"SAD/12_glossary/#konzeptdiagramme","title":"Konzeptdiagramme","text":"<p><pre><code>%% Hardware Box\ngraph TD\n    classDef hardwareClass fill:#1a365d,stroke:#2b6cb0,color:#bee3f8,font-size:14px;\n    B[Hardware]\n    B --&gt; B1[Raspberry Pi]\n    B --&gt; B2[Barcode-Scanner]\n    B --&gt; B3[Dual-Display]\n    class B,B1,B2,B3 hardwareClass;</code></pre> <pre><code>graph TD\n    classDef softwareClass fill:#2c3e50,stroke:#3498db,color:#ecf0f1,font-size:12px;\n\n    subgraph C[Software]\n        %% Modelle\n        subgraph C1[Modelle]\n            C1_1[ProductModel]\n            C1_2[RecipeModel]\n            C1_3[PenguinModel]\n            C1_4[FridgeStockModel]\n            C1_5[MultiplayerGameStateModel]\n        end\n\n        %% Controller\n        subgraph C2[Controller]\n            C2_1[MultiplayerGameController]\n            C2_2[\"SingleplayerController\"]\n            C2_3[MultiplayerPlayer1Controller]\n            C2_4[MultiplayerPlayer2Controller]\n            C2_5[ChooseGameModeController]\n        end\n\n        %% Views\n        subgraph C3[Views]\n            C3_1[ScannedItemsView]\n            C3_2[ChooseGameModeView]\n            C3_3[PenguinReactionOverlay]\n            C3_4[MultiplayerGameView]\n            C3_5[MultiplayerPlayer1View]\n            C3_6[MultiplayerPlayer2View]\n            C3_7[UnifiedRecipePanel]\n            C3_8[LanguageSwitchButton]\n        end\n\n        %% Dienste\n        subgraph C4[Dienste]\n            C4_1[ProductRepository]\n            C4_2[RecipeRepository]\n            C4_3[AppLocalizationService]\n            C4_4[FridgeStockRepository]\n            C4_5[ImageLoader]\n            C4_6[DataLoader]\n        end\n\n        %% Konfiguration\n        subgraph C5[Konfiguration]\n            C5_1[AppConfig]\n            C5_2[GameConfig]\n            C5_3[Constants]\n        end\n\n    end\n\n    class C,C1,C2,C3,C4,C5,C1_1,C1_2,C1_3,C1_4,C1_5,C2_1,C2_2,C2_3,C2_4,C2_5,C3_1,C3_2,C3_3,C3_4,C3_5,C3_6,C3_7,C3_8,C4_1,C4_2,C4_3,C4_4,C4_5,C4_6,C5_1,C5_2,C5_3 softwareClass;</code></pre> <pre><code>%% Game Logic Box\ngraph TD\n    classDef gameClass fill:#2a454b,stroke:#38b2ac,color:#e6fffa,font-size:14px;\n\n    D[Spiel-Logik]\n    D --&gt; D1[GameModes]\n    D1 --&gt; D1_1[Einzelspieler]\n    D1 --&gt; D1_2[Mehrspieler]\n\n    D --&gt; D2[Spielphasen]\n    D2 --&gt; D2_1[Einkaufsphase]\n    D2 --&gt; D2_2[Kochphase]\n\n    D --&gt; D3[Bewertungssystem]\n    D3 --&gt; D3_1[HP-System]\n    D3 --&gt; D3_2[Punktesystem]\n\n    class D,D1,D1_1,D1_2,D2,D2_1,D2_2,D3,D3_1,D3_2 gameClass;</code></pre> <pre><code>%% User Box\ngraph TD\n    classDef userClass fill:#44337a,stroke:#805ad5,color:#e9d8fd,font-size:14px;\n\n    E[Benutzer]\n    E --&gt; E1[Kinder]\n    E --&gt; E2[Lehrkr\u00e4fte]\n\n    class E,E1,E2 userClass;</code></pre></p>"},{"location":"System-idea/system-idee/","title":"System-Idee","text":""},{"location":"System-idea/system-idee/#kernaufgabe-des-systems","title":"Kernaufgabe des Systems","text":"<p> Fridgely ist ein interaktiver Mock-Smart-K\u00fchlschrank, der spielerisch Kinder im Alter von 7\u201313 Jahren f\u00fcr einen bewussten Umgang mit Lebensmitteln sensibilisiert und Lebensmittelverschwendung reduziert. Das System erfasst automatisch Produkte \u00fcber Barcode-Scanning, \u00fcberwacht deren Haltbarkeit und bietet proaktive Rezeptvorschl\u00e4ge, wodurch Kinder einen nachhaltigen und effizienten Umgang mit Lebensmitteln erlernen.   </p>"},{"location":"System-idea/system-idee/#zentrale-begriffe-der-fachdomane","title":"Zentrale Begriffe der Fachdom\u00e4ne","text":"<ul> <li>Smart-Fridge (intelligenter K\u00fchlschrank)</li> <li>Foodmanagement (Lebensmittelverwaltung)</li> <li>Gamifizierung (spielerisches Lernen)</li> <li>Nachhaltigkeit (bewusster Konsum)</li> <li>Barcode-Scanning (automatisierte Produkterfassung)</li> <li>Rezeptvorschl\u00e4ge (proaktive Nutzung vorhandener Lebensmittel)</li> <li>Kinderfreundliche Benutzeroberfl\u00e4che (intuitive Interaktion)</li> <li>Mehrsprachigkeit (sprach\u00fcbergreifende Nutzbarkeit)</li> </ul>"},{"location":"System-idea/system-idee/#kategorie-von-system","title":"Kategorie von System","text":"Interaktives Online-System <p>       Fridgely arbeitet als Teil eines normalen K\u00fchlschrank-Nutzungsprozesses und enth\u00e4lt Operationen auf Daten (Erfassung, \u00c4nderung und L\u00f6schung von Lebensmitteleintr\u00e4gen). Die Transaktionen sind in die Benutzeroberfl\u00e4che eingebettet und das System operiert auf aktuellen Datenbest\u00e4nden mit hoher Verf\u00fcgbarkeit und Performance.     </p> Mobile Systeme (Charakteristika) <p>       Obwohl nicht mobil im herk\u00f6mmlichen Sinne, \u00fcbernimmt Fridgely Eigenschaften mobiler Systeme mit starkem Fokus auf Benutzeroberfl\u00e4che und Benutzbarkeit. Es setzt auf Touch-Interaktion und eine intuitive, visuelle Gestaltung.     </p> Eingebettetes System <p>       Das System arbeitet eng verzahnt mit spezieller Hardware (Raspberry Pi, Barcode-Scanner, Dual-Displays, Lautsprecher) und ist in eine physische K\u00fchlschrank-Attrappe integriert.     </p>"},{"location":"System-idea/system-idee/#wesentliche-qualitatsanforderungen","title":"Wesentliche Qualit\u00e4tsanforderungen","text":"Qualit\u00e4tsanforderungen <ul> <li>Usability (Benutzerfreundlichkeit): Intuitiv und selbsterkl\u00e4rend f\u00fcr Kinder im Alter von 7-13 Jahren. Kinderfreundliche Gestaltung mit Maskottchen und verst\u00e4ndlichen Visualisierungen.</li> <li>Robustheit und Zuverl\u00e4ssigkeit: Stabilit\u00e4t auch bei intensiver Nutzung. Fehlerhafte Eingaben werden verst\u00e4ndlich kommuniziert.</li> <li>Wartbarkeit und Modifizierbarkeit: Modulare Software-Architektur mit Spring Boot und MVC-Pattern. Fernwartung \u00fcber SSH.</li> <li>Attraktivit\u00e4t: Kindgerechtes Design mit spielerischen Elementen, die Lernmotivation f\u00f6rdern.</li> <li>Funktionale Eignung: Zuverl\u00e4ssige und korrekte Funktionen wie Barcode-Scanning, Lebensmittelverwaltung und Rezeptvorschl\u00e4ge.</li> </ul>"},{"location":"System-idea/system-idee/#relevante-stakeholder","title":"Relevante Stakeholder","text":"Prim\u00e4re Nutzer <p>Kinder im Alter von 7-13 Jahren</p> Hauptzielgruppe Sekund\u00e4re Nutzer <p>Lehrkr\u00e4fte und Eltern</p> Unterst\u00fctzer Product Owner <p>Elif G\u00fcrcinar</p> Verantwortlich f\u00fcr Produktvision Primeo Energie AG <p>Auftraggeber</p> F\u00f6rderung von Umweltbewusstsein Projekt Stakeholder <p>Stefan Vetter, weitere</p> Beratung und Unterst\u00fctzung Wartungspersonal <p>Entwickler</p> Wartung und Weiterentwicklung"},{"location":"System-idea/system-idee/#schnittstellen-zu-externen-systemen","title":"Schnittstellen zu externen Systemen","text":"Netzwerkzugang f\u00fcr Wartung <p>SSH-Schnittstelle f\u00fcr Fernwartung und Debugging. Zugriff auf Systemstatus und Log-Daten.</p> Barcode-Scanner-Schnittstelle <p>USB-Verbindung zum Barcode-Scanner-Modul. Erkennt 1D/2D Codes und \u00fcbertr\u00e4gt diese an die Anwendung.</p> Ausgabe-Schnittstellen <p>Dual-Display-Konfiguration und Audio-Ausgabe f\u00fcr akustisches Feedback.</p> Physikalische Eingabe-Schnittstellen <p>Kapazitiver Touchscreen und GPIO-Anschl\u00fcsse f\u00fcr zus\u00e4tzliche Eingabem\u00f6glichkeiten.</p> Stromversorgung <p>Anschluss an das Stromnetz \u00fcber Steckdosenleiste. Versorgt alle Hardware-Komponenten des Systems.</p> <p>Das System ist bewusst als geschlossenes System konzipiert, das keine externe Internetverbindung f\u00fcr den normalen Betrieb ben\u00f6tigt. Dies erh\u00f6ht die Sicherheit und vermeidet Abh\u00e4ngigkeiten von externen Diensten. Die lokale SQLite-Datenbank speichert alle relevanten Informationen zu Lebensmitteln, Rezepten und Benutzerinteraktionen.</p>"},{"location":"Testing/Testplan/","title":"Testplan","text":""},{"location":"Testing/Testplan/#1-einfuhrung","title":"1. Einf\u00fchrung","text":"<p>In diesem Dokument werden alle Informationen der Tests, welche in diesem Projekt durchgef\u00fchrt werden, aufgelistet. Darunter, welche Art von Tests durchgef\u00fchrt werden, wann diese durchgef\u00fchrt werden, etc.</p>"},{"location":"Testing/Testplan/#2-test-arten","title":"2. Test-Arten","text":"<p>In diesem Projekt wird das Produkt mit verschiedenen Arten von Tests getestet:</p>"},{"location":"Testing/Testplan/#1-funktionstest","title":"1. Funktionstest","text":"<p>Hier werden einzelne Funktionen/Module getestet, wie das Scannen, Mehrsprachigkeit, etc.</p>"},{"location":"Testing/Testplan/#2-integrationstests","title":"2. Integrationstests","text":"<p>Hier wird getestet/sichergestellt, dass die Komponenten/Module korrekt zusammenarbeiten und funktionieren.</p>"},{"location":"Testing/Testplan/#3-usability-tests","title":"3. Usability-Tests","text":"<p>Hier wird anhand von Prototypen und dem Endprodukt mit der Interessengruppe Tests durchgef\u00fchrt.</p>"},{"location":"Testing/Testplan/#4-smoke-tests","title":"4. Smoke-Tests","text":"<p>Hier werden schnelle grundlegende Tests durchgef\u00fchrt, um sicherzustellen, dass das Produkt funktionsf\u00e4hig ist.</p>"},{"location":"Testing/Testplan/#5-langzeit-test","title":"5. Langzeit-Test","text":"<p>Um das Verhalten von Fridgely auch w\u00e4hrend langem Gebrauch zu testen, wird ein Langzeit-Test durchgef\u00fchrt, in welchem Fridgely \u00fcber eine l\u00e4ngere Zeitspanne (6h) angeschaltet bleibt.</p>"},{"location":"Testing/Testplan/#6-abnahme-test","title":"6. Abnahme-Test","text":"<p>Um die \u00dcbergabe, Abnahme und Inbetriebnahme des Produktes zu testen und \u00fcberpr\u00fcfen wird ein Abnahmetest gegen Ende der Produktion gemacht.</p>"},{"location":"Testing/Testplan/#3-planung-der-tests","title":"3. Planung der Tests","text":""},{"location":"Testing/Testplan/#generelle-planung-der-tests","title":"Generelle Planung der Tests","text":"Art Zeitpunkt / Regelm\u00e4ssigkeit Test(s) Verantwortlich Status Smoketests W\u00f6chentlich (Mi) TC 1.1, TC 1.2, (TC 2.1) TM Done Funktions / Unit-Tests Nach jeder neuen Software-Funktion - DEV / TM Done Integrationstests Nach Implementierung neuer Module TC_2_ - TC_8_ TM / DEV / SA Done Usability-Tests Nach Fertigstellung Geh\u00e4use und Zielgruppenfindung (siehe Usability Tests) TC_8_1 bis TC_8_3 UX / TM Done Langzeit-Tests Nach Fertigstellung Geh\u00e4use und Komponenteneinbau (siehe Langzeit-Tests) TC_* TM Done Abnahmetest Gegen Ende des Projekts TC_* TM Done"},{"location":"Testing/Testplan/#genauere-planung","title":"Genauere Planung","text":""},{"location":"Testing/Testplan/#usability-tests","title":"Usability-Tests","text":""},{"location":"Testing/Testplan/#prototyp-3","title":"Prototyp 3","text":"Datum Art Test Verantwortlich Status 16.12.2024 Usability-Test TBD UX Done"},{"location":"Testing/Testplan/#endprodukt","title":"Endprodukt","text":"Datum Art Test Verantwortlich Status 14.05.2025 Usability-Test TBD UX Done 22.05.2025 Usability-Test TBD UX Done"},{"location":"Testing/Testplan/#langzeit-tests","title":"Langzeit-Tests","text":"Datum Art Test Verantwortlich Status 06.05.2025 Abnahmetest TC_* TM Done 14.05.2025 Abnahmetest TC_* TM Done"},{"location":"Testing/Testplan/#abnahme-test","title":"Abnahme-Test","text":"Datum Art Test Verantwortlich Status Transition-Phase (29.05.2025) Abnahmetest TC_* TM Done"},{"location":"Testing/Testplan/#4-testumgebung","title":"4. Testumgebung","text":"Kategorie Details OS Windows &amp; RasPi OS IDE IntelliJ (VS Code) Hardware Raspi, Touchscreen, Monitor, Barcodescanner Testframeworks JUnit5"},{"location":"Testing/Testplan/#randbedingungen","title":"Randbedingungen","text":"<p>Siehe SAD</p> <ul> <li>Temperatur: 10 \u00b0C bis 40 \u00b0C</li> <li>Luftfeuchtigkeit: 10 % bis 90 % (nicht kondensierend)</li> <li>Betriebsumgebung: Stabil, trocken und staubfrei</li> <li>Schutzart: IP20 (gesch\u00fctzt gegen Ber\u00fchrung mit festen Fremdk\u00f6rpern &gt; 12 mm, nicht gegen Wasser oder Staub)</li> <li>Betriebsart: On-Premises (lokal)</li> <li>Benutzeranzahl: 1 oder 2 Benutzer gleichzeitig</li> <li>Vorgesehene m\u00f6gliche Einsatzorte: Prim\u00e4r in Bildungseinrichtungen, wie Schulen oder \u00e4hnlichen Umgebungen</li> </ul>"},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/","title":"TC 0.1 Boot-Vorgang Raspberry PI","text":""},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob das Raspberry Pi korrekt startet.</p>"},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/#testart","title":"Testart","text":"<p>Smoketest / Hardwaretest</p>"},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>OS auf SD-Karte im Raspberry PI</li> </ul>"},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Mit Strom versorgen</li> </ol>"},{"location":"Testing/TestCases/TC_0_1_BootRaspberryPI/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Gr\u00fcne LED am PI leuchtet</li> <li>Boottext oder Splashscreen sichtbar</li> <li>System f\u00e4hrt hoch</li> </ul>"},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/","title":"TC 0.1 Bildsignal auf dem grossen Monitor","text":""},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob der Monitor nach dem Einschalten ein Bildsignal erh\u00e4lt bzw. Funktionsf\u00e4hig ist</p>"},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/#testart","title":"Testart","text":"<p>Smoketest / Hardwaretest</p>"},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Monitor am Strom angeschlossen</li> <li>Monitor \u00fcber HDMI mit dem Raspberry PI verbunden</li> </ul>"},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Raspberry PI / Fridgely starten</li> </ol>"},{"location":"Testing/TestCases/TC_0_2_BildsignalGrosserMonitor/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Bildschirm geht an</li> <li>Anzeige des Bootvorgangs oder Lagerbildschirm</li> <li>KEIN \"No Signal\" o.\u00e4. </li> </ul>"},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/","title":"TC 0.2 Bildsignal auf dem Touchscreen","text":""},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob der Touchscreen nach dem Einschalten ein Bildsignal erh\u00e4lt bzw. Funktionsf\u00e4hig ist</p>"},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/#testart","title":"Testart","text":"<p>Smoketest / Hardwaretest</p>"},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Touchscreen am Strom angeschlossen</li> <li>Touchsreen \u00fcber HDMI mit dem Raspberry PI verbunden</li> </ul>"},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Raspberry PI / Fridgely starten</li> </ol>"},{"location":"Testing/TestCases/TC_0_3_BildsignalTouchscreen/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Bildschirm geht an</li> <li>Anzeige des Bootvorgangs oder Startscreen</li> <li>KEIN \"No Signal\" o.\u00e4. </li> </ul>"},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/","title":"TC 0.4 Barcode-Scanner Aufstarten","text":""},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, dass der Scanner korrekt startet und funktionsf\u00e4hig ist</p>"},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/#testart","title":"Testart","text":"<p>Smoketest / Hardwaretest</p>"},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Scanner per USB mit Raspberry PI verbunden</li> <li>Raspberry PI mit Strom versorgt</li> </ul>"},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Raspberry PI / Fridgely starten</li> </ol>"},{"location":"Testing/TestCases/TC_0_4_ScannerAufstarten/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Scanner leuchtet ein rotes Licht </li> </ul>"},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/","title":"TC 0.3 Touch-Funktionalit\u00e4t des Touchscreen","text":""},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob der Touchscreen Ber\u00fchrungen nach dem Einschalten erkennt.</p>"},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/#testart","title":"Testart","text":"<p>Smoketest / Hardwaretest</p>"},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Touchscreen am Strom angeschlossen</li> <li>Touchsreen \u00fcber HDMI mit dem Raspberry PI verbunden</li> </ul>"},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Raspberry PI / Fridgely starten</li> </ol>"},{"location":"Testing/TestCases/TC_0_5_TouchfunktionTouchscreen/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Bildschirm geht an und zeigt Fridgely-Software oder Desktop an</li> <li>Visuelles Feedback bei Ber\u00fchrungen</li> <li>Button reagieren auf Ber\u00fchrungen</li> </ul>"},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/","title":"TC 1.1: Fridgely einschalten","text":""},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob Fridgely korrekt eingeschaltet wird, wenn der Benutzer den On-Button klickt.</p>"},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/#testart","title":"Testart","text":"<p>Smoketest / Funktionstest</p>"},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Stromquelle vorhanden</li> <li>Hardware-Komponenten korrekt verbunden und angeschlossen</li> <li>Hardware-Komponenten (Bildschirme und Scanner) funktionieren</li> </ul>"},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Fridgely an Strom anschliessen</li> <li>On-Button klicken</li> </ol>"},{"location":"Testing/TestCases/TC_1_1_FridgelyEinschalten/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Das System wird gestartet</li> <li>Beide Bildschirme (Touchscreen und Lagersicht) schalten sich ein</li> <li>Barcode-Scanner schaltet sich ein</li> <li>Startseite wird auf dem Touchscreen angezeigt</li> <li>Fridgely ist betriebsbereit</li> </ul>"},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/","title":"TC 1.2: Fridgely ausschalten","text":""},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob Fridgely korrekt ausgeschaltet wird, wenn der Benutzer den On/Off-Button bet\u00e4tigt.</p>"},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/#testart","title":"Testart","text":"<p>Smoketest / Funktionstest</p>"},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist an einer Stromquelle angeschlossen</li> <li>Fridgely ist eingeschaltet</li> </ul>"},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/#testdaten","title":"Testdaten","text":"<p>Keine</p>"},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>On/Off-Button dr\u00fccken</li> </ol>"},{"location":"Testing/TestCases/TC_1_2_FridgelyAusschalten/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Fridgely f\u00e4hrt vollst\u00e4ndig herunter</li> <li>Beide Bildschirme schalten sich aus</li> <li>Barcode-Scanner schaltet sich aus</li> </ul>"},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/","title":"TC 2.1: Produkt scannen und Bestand aktualisieren","text":""},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob ein Produkt erfolgreich gescannt wird und der Bestand von Fridgely aktualisiert wird.</p>"},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Barcode-Scanner ist funktionsf\u00e4hig</li> <li>Verbindung zur Datenbank besteht</li> </ul>"},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/#testdaten","title":"Testdaten","text":"<ul> <li>Produkt mit g\u00fcltigem Barcode, welches auch in der Datenbank vorhanden ist</li> </ul>"},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>In den Scanmodus von Fridgely gehen</li> <li>Barcode des Produkts scannen</li> </ol>"},{"location":"Testing/TestCases/TC_2_1_ProduktScannen/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Informationen zum gescannten Produkt werden angezeigt</li> <li>Produkt wird in den Bestand von Fridgely aufgenommen</li> <li>Produkt wird im Lager / zweiten Bildschirm angezeigt</li> </ul>"},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/","title":"TC 2.2: Unbekanntes Produkt gescannt","text":""},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, wie Fridgely reagiert, wenn ein Barcode nicht gescannt werden kann oder unbekannt bzw. nicht in der Produktdatenbank vorhanden ist.</p>"},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Barcode-Scanner ist funktionsf\u00e4hig</li> <li>Verbindung zur Produktdatenbank besteht</li> </ul>"},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/#testdaten","title":"Testdaten","text":"<ul> <li>Barcode, welcher unlesbar ist oder nicht in der Produktdatenbank vorhanden ist.</li> </ul>"},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>In den Scanmodus von Fridgely gehen</li> <li>Einen fehlerhaften Barcode scannen</li> </ol>"},{"location":"Testing/TestCases/TC_2_2_UnbekanntesProduktScan/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Fridgely zeigt eine Fehlermeldung an, dass das Produkt nicht gefunden wurde</li> <li>Nichts wird in das Lager geladen</li> <li>Benutzer kann wie gewohnt weiterscannen</li> </ul>"},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/","title":"TC 2.3: Bestand anzeigen","text":""},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob der Bestand von bereits gescannten Produkten von Fridgely korrekt auf dem zweiten Bildschirm angezeigt wird.</p>"},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/#testart","title":"Testart","text":"<p>Funktionstest</p>"},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Es wurden schon Produkte erfolgreich gescannt und im System gespeichert</li> </ul>"},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/#testdaten","title":"Testdaten","text":"<ul> <li>Vorhandene, gescannte Produkte</li> </ul>"},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Weiteres Produkt scannen</li> <li>Lagerbildschirm (zweiter Bildschirm) anschauen</li> </ol>"},{"location":"Testing/TestCases/TC_2_3_BestandAnzeigen/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Der Bestand zeigt die korrekten Produkte an</li> <li>Die Produkte werden auf dem zweiten Bildschirm / Inventar-Bildschirm angezeigt.</li> </ul>"},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/","title":"TC 2.4: Doppelter Scan desselben Produkts","text":""},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob der Bestand von bereits gescannten Produkten von Fridgely korrekt auf dem zweiten Bildschirm angezeigt wird.</p>"},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> </ul>"},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/#testdaten","title":"Testdaten","text":"<ul> <li>Produkt mit g\u00fcltigem, in der Produktdatenbank vorhandenem Barcode</li> </ul>"},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>In den Scanmodus von Fridgely gehen</li> <li>Produkt scannen</li> <li>Dasselbe Produkt erneut scannen</li> </ol>"},{"location":"Testing/TestCases/TC_2_4_DoppelterScan/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Beim ersten Scan wird das Produkt im System gespeichert und auf dem Lagerbildschirm angezeigt</li> <li>Beim zweiten Scan wird das Produkt nicht in den Bestand aufgenommen</li> </ul>"},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/","title":"TC 2.5: Ablaufwarnung anzeigen","text":""},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob Fridgely bei Produkten, welche bald ablaufen, Warnungen/Hinweise korrekt anzeigt.</p>"},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Barcode-Scanner ist funktionsf\u00e4hig</li> <li>Verbindung zur Datenbank besteht</li> </ul>"},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/#testdaten","title":"Testdaten","text":"<ul> <li>Produkt, welches bald abl\u00e4uft (Ablaufdatum n\u00e4chster Tag)</li> </ul>"},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>In den Scanmodus von Fridgely gehen</li> <li>Produkt mit dem bald ablaufenden Barcode scannen</li> </ol>"},{"location":"Testing/TestCases/TC_2_5_Ablaufwarnung/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Fridgely zeigt eine Warnung an</li> </ul>"},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/","title":"TC 3.1: Sprache umschalten","text":""},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob man die Sprache in der Fridgely-Software \u00e4ndern kann.</p>"},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/#testart","title":"Testart","text":"<p>Funktionstest</p>"},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Die Software zeigt die Startseite an</li> </ul>"},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/#testdaten","title":"Testdaten","text":"<ul> <li>Aktuelle Sprache: Deutsch</li> <li>Neue Sprachen: Englisch, Franz\u00f6sisch</li> </ul>"},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Auf die Sprachumschalt-Fl\u00e4che klicken</li> </ol>"},{"location":"Testing/TestCases/TC_3_1_SpracheUmschalten/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Die Sprache wird auf eine neue Sprache gewechselt.</li> <li>Die Beschriftungen der Oberfl\u00e4che passen sich der neuen Sprache an.</li> </ul>"},{"location":"Testing/TestCases/TC_4_1_Rezeptvorschl%C3%A4geAnzeigen/","title":"TC 4.1: Rezeptvorschl\u00e4ge anzeigen","text":""},{"location":"Testing/TestCases/TC_4_1_Rezeptvorschl%C3%A4geAnzeigen/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob Fridgely Rezeptvorschl\u00e4ge basierend auf den gegebenen bzw. vorhandenen Lebensmitteln anzeigt.</p>"},{"location":"Testing/TestCases/TC_4_1_Rezeptvorschl%C3%A4geAnzeigen/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Es sind g\u00fcltige Produktdaten in der Produktdatenbank vorhanden</li> <li>Mindestens drei Produkte wurden gescannt und im System/Lager erfasst</li> </ul>"},{"location":"Testing/TestCases/TC_4_1_Rezeptvorschl%C3%A4geAnzeigen/#testdaten","title":"Testdaten","text":"<ul> <li>Mindestens 3 g\u00fcltige Produkte, welche zu einem Rezept f\u00fchren k\u00f6nnen</li> <li>(TBD: Genaue Produkte angeben?)</li> </ul>"},{"location":"Testing/TestCases/TC_4_1_Rezeptvorschl%C3%A4geAnzeigen/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Scan-Modus/Phase beenden</li> </ol>"},{"location":"Testing/TestCases/TC_4_1_Rezeptvorschl%C3%A4geAnzeigen/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Automatischer Wechsel in den Rezept-Modus/Phase</li> <li>Fridgely zeigt Rezeptvorschl\u00e4ge an, welche die Produkte aus dem Lager beinhalten</li> </ul>"},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/","title":"TC 4.2: Kein Rezeptvorschlag gefunden","text":""},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob Fridgely korrekt reagiert, wenn kein Rezeptvorschlag gefunden wird.</p>"},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Mindestens drei Produkte wurden gescannt und im System/Lager erfasst, welche aber zu keinem Rezept f\u00fchren</li> </ul>"},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/#testdaten","title":"Testdaten","text":"<ul> <li>Mindestens 3 Produkte, deren Kombination nicht zu einem Rezept f\u00fchren</li> <li>(TBD: Beispiel f\u00fcr falsche Produktkombination auflisten)</li> </ul>"},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Scan-Modus/Phase beenden</li> </ol>"},{"location":"Testing/TestCases/TC_4_2_RezeptvorschlagNichtGefunden/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Automatischer Wechsel in den Rezept-Modus/Phase</li> <li>Fridgely zeigt eine Meldung an, dass kein Rezept gefunden wurde</li> <li>Der Benutzer kann die Rezept-Phase beenden</li> </ul>"},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/","title":"TC 7.1: Einkaufs- und Energieanalyse anzeigen","text":""},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Funktionstest \u00fcberpr\u00fcft, ob Fridgely eine Analyse der Einkaufs- und Energieverbrauchsdaten korrekt visualisiert, sofern entsprechende Daten vorliegen.</p>"},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>In der Datenbank sind Einkaufs- und Energieverbrauchsdaten vorhanden</li> </ul>"},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/#testdaten","title":"Testdaten","text":"<ul> <li>Einkaufs-/Lebensmitteldaten</li> <li>Energieverbrauchsdaten</li> </ul>"},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Scan-Phase durchspielen</li> <li>Rezeptphase durchspielen und beenden</li> </ol>"},{"location":"Testing/TestCases/TC_7_1_EinkaufsEnergieAnalyse/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Fridgely zeigt mit einer Pinguin-Grafik eine Analyse des Einkaufs- und Energieverbrauchs an</li> <li>Der Benutzer wird \u00fcber die Einkaufs- und Energieverbrauchsdaten der Runde informiert</li> </ul>"},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/","title":"TC 8.1: Einkaufsphase starten","text":""},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob die Einkaufs-/Scan-Phase korrekt gestartet wird, wenn Benutzer*in 1 den Produkt-Scannen-Modus ausw\u00e4hlt.</p>"},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet</li> <li>Das System befindet sich auf dem Start-Screen und in keiner aktiven Phase (Einkauf / Koch)</li> <li>Der Touchscreen reagiert auf Benutzereingaben</li> </ul>"},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/#testdaten","title":"Testdaten","text":"<ul> <li>Keine</li> </ul>"},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Benutzer*in 1 w\u00e4hlt den Produkt-Scannen-Modus aus.</li> </ol>"},{"location":"Testing/TestCases/TC_8_1_EinkaufsphaseStarten/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Der Touchscreen zeigt den Produkt-Scanner-Screen an.</li> <li>Die Einkaufsphase ist aktiv.</li> </ul>"},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/","title":"TC 8.2: Einkaufsphase beenden und Kochphase starten","text":""},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob der Wechsel von der Einkaufsphase in die Kochphase korrekt erfolgt, nachdem die erforderliche Anzahl Produkte gescannt wurde und die Einkaufsphase beendet wird.</p>"},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet und betriebsbereit</li> <li>Die Einkaufsphase ist aktiv</li> <li>Es wurden mindestens die erforderliche Anzahl (z. B. 3) Produkte gescannt</li> <li>Zwei Benutzerinnen sind aktiv (Benutzerin 1 und Benutzer*in 2)</li> </ul>"},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/#testdaten","title":"Testdaten","text":"<ul> <li>Produktscans, welche die Mindestanzahl der ben\u00f6tigten Scans erf\u00fcllen</li> </ul>"},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Benutzer*in 1 beendet die Einkaufsphase.</li> </ol>"},{"location":"Testing/TestCases/TC_8_2_EinkaufsphaseBeenden/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Fridgely beendet die Einkaufsphase.</li> <li>Fridgely startet automatisch die Kochphase.</li> <li>Rezeptvorschl\u00e4ge werden geladen (siehe TC 4.1).</li> <li>Benutzer*in 2 wird zur Interaktion aufgefordert.</li> </ul>"},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/","title":"TC 8.3: Rezept ausw\u00e4hlen und Kochphase beenden","text":""},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob nach der Auswahl eines Rezeptes durch Benutzer*in 2 die Kochphase korrekt beendet wird, Nachhaltigkeitspunkte berechnet werden und das Feedback (\u00fcber Pinguin-Visualisierungen) angezeigt wird \u2013 was den Abschluss des Spielzyklus signalisiert.</p>"},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet und betriebsbereit</li> <li>Kochphase ist aktiv</li> <li>Rezeptvorschl\u00e4ge wurden aus der Datenbank geladen und werden auf dem Touchscreen angezeigt</li> </ul>"},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/#testdaten","title":"Testdaten","text":"<ul> <li>G\u00fcltiges, ausw\u00e4hlbares Rezept oder Rezepte (basierend auf den zuvor gescannten Produkten)</li> </ul>"},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Benutzer*in 2 w\u00e4hlt einen Rezeptvorschlag aus (via Touch).</li> </ol>"},{"location":"Testing/TestCases/TC_8_3_Kochphasebeenden/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Fridgely berechnet im Hintergrund die \"Nachhaltigkeitspunkte\" basierend auf den gescannten Produkten, welche im Rezept benutzt werden.</li> <li>Fridgely entfernt die im Rezept ben\u00f6tigten Produkte aus dem Lager.</li> <li>Die Kochphase wird beendet.</li> <li>Ein visuelles Feedback (Pinguin-Sprite) zeigt die Nachhaltigkeitsbewertung der Runde an.</li> <li>Der Spielzyklus wird zur\u00fcckgesetzt und ein neuer Tag bzw. eine neue Einkaufsphase gestartet.</li> </ul>"},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/","title":"TC 8.4: Nachhaltigkeitsbewertung und Pinguin-Feedback","text":""},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/#testbeschreibung","title":"Testbeschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob Fridgely anhand der gescannten Produkte den Nachhaltigkeitsgrad korrekt bewertet und das entsprechende Pinguin-Bild (Feedback) anzeigt. Dabei soll ersichtlich sein, ob der Koch als nachhaltig (Sieges-Pinguin) oder als verschwenderisch (z. B. Game-Over-Pinguin) eingestuft wird.</p>"},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet und betriebsbereit</li> <li>Ausreichend Daten (gescannte Produkte) vorhanden, welche sinnvolle Rezepte und Bewertungen erm\u00f6glichen</li> </ul>"},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/#testdaten","title":"Testdaten","text":"<ul> <li>Produktszenario mit hoher Nachhaltigkeit (z. B. \u00fcberwiegend umweltfreundliche Produkte)  </li> <li>Produktszenario mit geringer Nachhaltigkeit (z. B. \u00fcberwiegend weniger nachhaltige Produkte)</li> </ul>"},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Multiplayer-Zyklus starten gem\u00e4ss TC 8.1 bis TC 8.2</li> <li>Simulation der Szenarien \"Hohe Nachhaltigkeit\" und \"Niedrige Nachhaltigkeit\"</li> <li>Pinguin-Feedback beobachten</li> </ol>"},{"location":"Testing/TestCases/TC_8_4_NachhaltigkeitsbewertungFeedback.adoc/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Bei Szenario \"Hohe Nachhaltigkeit\" wird ein positiveres oder Sieges-Pinguin angezeigt</li> <li>Bei Szenario \"Niedrige Nachhaltigkeit\" wird ein negativeres oder Game-Over-Pinguin angezeigt</li> <li>Die Nachhaltigkeitsbewertung f\u00fcr die aktuelle Runde wird korrekt im System festgehalten</li> </ul>"},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/","title":"TC 8.5: Punktesystem und Berechnung","text":""},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/#testbeschreibung","title":"Testbeschreibung","text":"<p>\u00dcberpr\u00fcft, ob das Punktesystem im Multiplayer-Modus korrekt arbeitet und die Punkte (z.\u202fB. \u201eVerschwendungspunkte\u201c bzw. Nachhaltigkeitsbonus) korrekt berechnet werden.</p>"},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/#testart","title":"Testart","text":"<p>Funktionstest / Integrationstest</p>"},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet und betriebsbereit.</li> <li>Der Multiplayer-Spielzyklus (Einkaufs- und Kochphase) wurde gestartet und erfolgreich abgeschlossen.</li> <li>Die interne Logik zur Punkteberechnung (basierend auf den gescannten Produkten und der Kochphase) ist implementiert.</li> </ul>"},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/#testdaten","title":"Testdaten","text":"<ul> <li>Simulierte Eingaben bzw. Produktszenarien, die zu vorhersehbaren Punktzahlen f\u00fchren.</li> </ul>"},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>Starte den Multiplayer-Zyklus, scanne Produkte in der Einkaufsphase.</li> <li>W\u00e4hle w\u00e4hrend der Kochphase ein Rezept aus.</li> <li>Beobachte nach Abschluss der Kochphase die berechneten Punkte.</li> </ol>"},{"location":"Testing/TestCases/TC_8_5_PunktesystemBerechnung/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Das Punktesystem stimmt mit den vorgegebenen Berechnungsregeln \u00fcberein.</li> </ul>"},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/","title":"TC 8.7: Wiederholte Spielzyklen (Reset-Funktionalit\u00e4t)","text":""},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/#testbeschreibung","title":"Testbeschreibung","text":"<p>\u00dcberpr\u00fcft, ob nach Abschluss eines vollst\u00e4ndigen Multiplayer-Zyklus (Einkaufs- und Kochphase inklusive Feedback) das System korrekt zur\u00fcckgesetzt wird und ein neuer Spielzyklus gestartet werden kann.</p>"},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/#testart","title":"Testart","text":"<p>Integrationstest / End-to-End-Test</p>"},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/#annahmen-und-voraussetzungen","title":"Annahmen und Voraussetzungen","text":"<ul> <li>Fridgely ist eingeschaltet und betriebsbereit.</li> <li>Ein vollst\u00e4ndiger Zyklus wurde bereits durchlaufen (Einkaufsphase, Kochphase, Feedback).</li> <li>Systemvariablen und Zust\u00e4nde werden nach Abschluss korrekt zur\u00fcckgesetzt.</li> </ul>"},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/#testdaten","title":"Testdaten","text":"<ul> <li>Simulierte Produktscans und Rezeptwahl, die einen vollst\u00e4ndigen Zyklus erm\u00f6glichen.</li> </ul>"},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/#auszufuhrende-schritte","title":"Auszuf\u00fchrende Schritte","text":"<ol> <li>F\u00fchre einen vollst\u00e4ndigen Multiplayer-Zyklus (TC 8.1 bis TC 8.3) durch.</li> <li>\u00dcberpr\u00fcfe nach Abschluss der Kochphase, dass alle Zust\u00e4nde (z. B. gescannte Produktliste, Punktestand, angezeigtes Feedback) auf den Ausgangszustand zur\u00fcckgesetzt werden.</li> <li>Starte anschliessend erneut den Zyklus, indem Benutzer*in 1 die Einkaufsphase aktiviert.</li> </ol>"},{"location":"Testing/TestCases/TC_8_6_Spielzyklen/#erwartetes-ergebnis","title":"Erwartetes Ergebnis","text":"<ul> <li>Nach Abschluss eines Zyklus werden alle relevanten Variablen und Zust\u00e4nde (z. B. Punkte, Feedbackanzeige, Produktliste) zur\u00fcckgesetzt oder korrekt gesetzt.</li> <li>Das System signalisiert, dass ein neuer Zyklus gestartet werden kann.</li> <li>Die Wiederholung des Zyklus erfolgt reibungslos, ohne Reste des vorangegangenen Zyklus.</li> </ul>"},{"location":"Testing/Tests/Abnahmetest/","title":"Abnahme-Test","text":"Datum 29.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Abnahmetest/#beschreibung","title":"Beschreibung","text":"<p>Ziel des Abnahmetests ist es, die \u00dcbergabe und in Betriebnahme von Fridgely zu simulieren und zu testen, um sicherzustellen, dass alles korrekt l\u00e4uft und funktioniert bei Inbetriebnahme von Fridgely nach einer \u00dcbergabe.</p>"},{"location":"Testing/Tests/Abnahmetest/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>Alles</li> </ul>"},{"location":"Testing/Tests/Abnahmetest/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: Alle Test-Cases waren erfolgreich und alle \"Must-Have\" Funktionen wurden nach Vereinbarung umgesetzt. Desweiteren wurde die Installation von Fridgely an einem neuen Ort simuliert, was auch erfolgreich war.</p>"},{"location":"Testing/Tests/Inhalt/","title":"Generelle Informationen","text":""},{"location":"Testing/Tests/Inhalt/#smoketests","title":"Smoketests","text":"<ul> <li>W\u00f6chentlich durchgef\u00fchrt</li> <li>Testen der Grundfunktionen</li> </ul> <p>Mock bedeutet, dass zur durchf\u00fchrung des Tests eine Funktionen \"gemocked\" wurde bzw. nicht die schlussendliche Funktion wiederspiegelt. Bei den Mock-Smoketests ist dies die Funktion des On/Off-Buttons, welcher erst nach fertigstellung des Geh\u00e4uses implementiert war. Bei den Mock-Tests wurde hier als On/Off-Button das Starten, der Software gebraucht.</p>"},{"location":"Testing/Tests/Inhalt/#die-tests","title":"Die Tests","text":"Test Datum Status (Mock) Smoketest 01 26.02.2025 Erfolgreich (Mock) Smoketest 02 05.03.2025 Erfolgreich (Mock) Smoketest 03 12.03.2025 Erfolgreich (Mock) Smoketest 04 19.03.2025 Erfolgreich (Mock) Smoketest 05 26.03.2025 Erfolgreich (Mock) Smoketest 06 02.04.2025 Erfolgreich (Mock) Smoketest 07 09.04.2025 Erfolgreich (Mock) Smoketest 08 16.04.2025 Erfolgreich Smoketest 09 06.05.2025 Erfolgreich Smoketest 10 14.05.2025 Erfolgreich"},{"location":"Testing/Tests/Inhalt/#hardwaretests","title":"Hardwaretests","text":"<p>Es wurden zwei Hardwaretests durchgef\u00fchrt, um die einzelnen Hardwarekomponente zu testen. Der Erste nach erhalt der Hardware, der Zweite nach Einbau der Hardware in das Geh\u00e4use.</p>"},{"location":"Testing/Tests/Inhalt/#die-tests_1","title":"Die Tests","text":"Test Datum Status Hardwaretest 01 26.02.2025 Erfolgreich Hardwaretest 02 05.05.2025 Erfolgreich"},{"location":"Testing/Tests/Inhalt/#funktionsintegrationstests","title":"Funktions/Integrationstests","text":"<p>Diese Tests \u00fcberpr\u00fcfen einzelne Funktionen und/oder das Zusammenspiel einzelner Module bzw. Komponenten von Fridgely. Einfachkeitshalber wurden auch hier einzelne funktionen simuliert. Diese Tests werden mit Mock gekennzeichnet und in der Testbeschreibung wird n\u00e4heres erl\u00e4utert.</p>"},{"location":"Testing/Tests/Inhalt/#die-tests_2","title":"Die Tests","text":"Test Datum Status (Mock) Scantest 01 05.03.2025 Erfolgreich Scantest 02 02.04.2025 Erfolgreich Scantest 03 05.05.2025 Erfolgreich Gamelooptest 01 08.05.2025 Erfolgreich Rezepttest 01 02.04.2025 Erfolgreich Rezepttest 02 07.05.2025 Erfolgreich Sprachtest 01 26.02.2025 Erfolgreich"},{"location":"Testing/Tests/Inhalt/#langzeittests","title":"Langzeittests","text":"<p>Eigentlich war nur ein Langzeittest geplant, um zu \u00fcberpr\u00fcfen, dass Fridgely auch nach 6h noch betriebsf\u00e4hig ist. Da der Erste aber fehlschlug, wurd ein zweiter Test geplant und durchgef\u00fchrt.</p> Test Datum Status Langzeittest 01 06.05.2025 Failed Langzeittest 02 14.05.2025 Erfolgreich"},{"location":"Testing/Tests/Inhalt/#abnahmetest","title":"Abnahmetest","text":"<p>In diesem Test werden noch einmal alle Test-Cases gepr\u00fcft, geschaut, ob alle Must-Have Features implementiert sind und ob die installation des Projekts an einem neuen Ort reibungslos funktioniert.</p> Test Datum Status Abnahmetest 29.05.2025 Erfolgreich"},{"location":"Testing/Tests/test_template00_ddmmyyyy/","title":"Title 00","text":"Datum dd.mm.yyyy Verantwortlich Name"},{"location":"Testing/Tests/test_template00_ddmmyyyy/#beschreibung","title":"Beschreibung","text":""},{"location":"Testing/Tests/test_template00_ddmmyyyy/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC X.X</li> </ul>"},{"location":"Testing/Tests/test_template00_ddmmyyyy/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich / Fail</p> <p>Bemerkungen: -</p> <p>(Optional) N\u00e4chste Schritte:</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Gamelooptest01_08052025/","title":"Gameloop Test 01","text":"Datum 08.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Gamelooptest01_08052025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird der eigentliche Gameloop getestet.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Gamelooptest01_08052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 8.1</li> <li>TC 8.2</li> <li>TC 8.3</li> <li>TC 8.4</li> <li>TC 8.5</li> <li>TC 8.6</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Gamelooptest01_08052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest01_02042025/","title":"Rezept Test 01","text":"Datum 02.04.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest01_02042025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird die Generierung von Rezeptvorschl\u00e4gen getestet.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest01_02042025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 4.1</li> <li>TC 4.2</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest01_02042025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest02_07052025/","title":"Rezept Test 02","text":"Datum 07.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest02_07052025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird die Generierung von Rezeptvorschl\u00e4gen getestet.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest02_07052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 4.1</li> <li>TC 4.2</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Rezepttest02_07052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: Zeigt nun nur noch Rezepte an, welche m\u00f6glich sind zu kochen mit den Produkten im Lager</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest02_02042025/","title":"Scan-Test 2","text":"Datum 02.04.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest02_02042025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird die Scan-Funktionalit\u00e4t von Fridgely gepr\u00fcft.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest02_02042025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 2.1</li> <li>TC 2.2</li> <li>TC 2.3</li> <li>TC 2.4</li> <li>TC 2.5</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest02_02042025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: Scanfunktion funktioniert auch mit Barcode-Scanner.</p> <p>N\u00e4chste Schritte: Scanfunktion mit eingebautem Barcode-Scanner im Geh\u00e4use testen.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest03_05052025/","title":"Scan-Test 3","text":"Datum 05.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest03_05052025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird die Scan-Funktionalit\u00e4t von Fridgely gepr\u00fcft.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest03_05052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 2.1</li> <li>TC 2.2</li> <li>TC 2.3</li> <li>TC 2.4</li> <li>TC 2.5</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest03_05052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: Scanfunktion funktioniert auch mit eingebautem Barcode-Scanner im Geh\u00e4use.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest_Mock01_05032025/","title":"(Mock) Scan-Test 1","text":"Datum 05.03.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest_Mock01_05032025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird die Scan-Funktionalit\u00e4t von Fridgely gepr\u00fcft. Mock: Die Scanfunktion wird \u00fcber Tastatureingabe simuliert.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest_Mock01_05032025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 2.1</li> <li>TC 2.2</li> <li>TC 2.3</li> <li>TC 2.4</li> <li>TC 2.5</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Scantest_Mock01_05032025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p> <p>N\u00e4chste Schritte: Scanfunktion mit Barcode-Scanner testen.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Sprachtest01_26022025/","title":"Sprach Test 01","text":"Datum 07.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Funktion_Integrationtests/Sprachtest01_26022025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test wird die Sprachumschaltfunktion getestet.</p>"},{"location":"Testing/Tests/Funktion_Integrationtests/Sprachtest01_26022025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 3.1</li> </ul>"},{"location":"Testing/Tests/Funktion_Integrationtests/Sprachtest01_26022025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Hardwaretests/TestHardware01_26022025/","title":"Hardware-Test 1","text":"Datum 26.02.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Hardwaretests/TestHardware01_26022025/#beschreibung","title":"Beschreibung","text":"<p>In diesem Test werden die neu erhaltenen Hardwarekomponenten (Monitor, Touchscreen, Barcodescanner) getestet und \u00fcberpr\u00fcft, ob sie korrekt laufen, wenn sie mit dem Raspberry PI verbunden sind.</p>"},{"location":"Testing/Tests/Hardwaretests/TestHardware01_26022025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 0.1</li> <li>TC 0.2</li> <li>TC 0.3</li> <li>TC 0.4</li> <li>TC 0.5</li> </ul>"},{"location":"Testing/Tests/Hardwaretests/TestHardware01_26022025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: Alle Komponenten starteten und waren funktionionsf\u00e4hig.</p>"},{"location":"Testing/Tests/Hardwaretests/TestHardware02_05052025/","title":"Hardware-Test 2","text":"Datum 05.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Hardwaretests/TestHardware02_05052025/#beschreibung","title":"Beschreibung","text":"<p>Dieser Test \u00fcberpr\u00fcft, ob die Hardwarekomponenten auch nach dem Einbau in das Geh\u00e4use von Fridgely korrekt funktionieren und aufstarten.</p>"},{"location":"Testing/Tests/Hardwaretests/TestHardware02_05052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 0.1</li> <li>TC 0.2</li> <li>TC 0.3</li> <li>TC 0.4</li> <li>TC 0.5</li> </ul> <p>Status: Erfolgreich</p> <p>Bemerkungen: Die Hardwarekomponenten (grosser Bildschirm, Touchscreen, Raspberry Pi und Barcodescanner) laufen und starten korrekt, wenn sie angeschlossen und im Geh\u00e4use eingebaut sind.</p>"},{"location":"Testing/Tests/Langzeittests/Langzeittest01_06052025/","title":"Langzeit-Test 1","text":"Datum 06.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Langzeittests/Langzeittest01_06052025/#beschreibung","title":"Beschreibung","text":"<p>Ziel dieses Tests ist es zu \u00fcberpr\u00fcfen und kontrollieren, dass Fridgely auch nach 6h aktivem Laufen funktionsf\u00e4hig ist.</p>"},{"location":"Testing/Tests/Langzeittests/Langzeittest01_06052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>Alles</li> </ul>"},{"location":"Testing/Tests/Langzeittests/Langzeittest01_06052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Failed</p> <p>Bemerkungen: Der linke Bildschirm, ging aus bzw. ging in den Ruhemodus.</p> <p>N\u00e4chste Schritte: Einstellung f\u00fcr Ruhemodus ausgeschaltet. N\u00e4chster Langezeit-Test geplannt: 14.05.2025</p>"},{"location":"Testing/Tests/Langzeittests/Langzeittest02_14052025/","title":"Langzeit-Test 2","text":"Datum 14.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Langzeittests/Langzeittest02_14052025/#beschreibung","title":"Beschreibung","text":"<p>Ziel dieses Tests ist es zu \u00fcberpr\u00fcfen und kontrollieren, dass Fridgely auch nach 6h aktivem Laufen funktionsf\u00e4hig ist.</p>"},{"location":"Testing/Tests/Langzeittests/Langzeittest02_14052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>Alles</li> </ul>"},{"location":"Testing/Tests/Langzeittests/Langzeittest02_14052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: Fridgely blieb durchgehend an und konnte auch nach den 6h bedient werden.</p>"},{"location":"Testing/Tests/Smoketests/Smoketest09_06052025/","title":"Smoketest 09","text":"Datum 06.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest09_06052025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet.</p>"},{"location":"Testing/Tests/Smoketests/Smoketest09_06052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest09_06052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest10_14052025/","title":"Smoketest 10","text":"Datum 14.05.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest10_14052025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet.</p>"},{"location":"Testing/Tests/Smoketests/Smoketest10_14052025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest10_14052025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock01_26022025/","title":"(Mock) Smoketest 01","text":"Datum 26.02.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock01_26022025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock01_26022025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock01_26022025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock02_05032025/","title":"(Mock) Smoketest 02","text":"Datum 05.03.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock02_05032025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock02_05032025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock02_05032025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock03_12032025/","title":"(Mock) Smoketest 03","text":"Datum 12.03.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock03_12032025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock03_12032025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock03_12032025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock04_19032025/","title":"(Mock) Smoketest 04","text":"Datum 19.03.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock04_19032025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock04_19032025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock04_19032025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock05_26032025/","title":"(Mock) Smoketest 05","text":"Datum 26.03.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock05_26032025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock05_26032025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock05_26032025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock06_02042025/","title":"(Mock) Smoketest 06","text":"Datum 02.04.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock06_02042025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock06_02042025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock06_02042025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock07_09042025/","title":"(Mock) Smoketest 07","text":"Datum 09.04.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock07_09042025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock07_09042025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock07_09042025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock08_16042025/","title":"(Mock) Smoketest 08","text":"Datum 09.04.2025 Verantwortlich Ben Woodtli"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock08_16042025/#beschreibung","title":"Beschreibung","text":"<p>Kurzer Test, welcher \u00fcberpr\u00fcft, dass die Software korrekt startet. Mock: On/Off-Button wird als aufstarten der Software in der IDE simuliert. </p>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock08_16042025/#geprufte-test-cases","title":"Gepr\u00fcfte Test-Cases","text":"<ul> <li>TC 1.1</li> <li>TC 1.2</li> </ul>"},{"location":"Testing/Tests/Smoketests/Smoketest_Mock08_16042025/#ergebnis","title":"Ergebnis","text":"<p>Status: Erfolgreich</p> <p>Bemerkungen: -</p>"}]}